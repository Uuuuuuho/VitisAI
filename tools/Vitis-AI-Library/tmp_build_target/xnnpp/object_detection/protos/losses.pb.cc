// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/losses.proto

#include "object_detection/protos/losses.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BootstrappedSigmoidClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HardExampleMiner_object_5fdetection_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Loss_EqualizationLoss_object_5fdetection_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomExampleSampler_object_5fdetection_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigmoidFocalClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedIOULocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedL2LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedSigmoidClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedSmoothL1LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedSoftmaxClassificationAgainstLogitsLoss_object_5fdetection_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedSoftmaxClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto;
namespace object_detection {
namespace protos {
class Loss_EqualizationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Loss_EqualizationLoss> _instance;
} _Loss_EqualizationLoss_default_instance_;
class LossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Loss> _instance;
} _Loss_default_instance_;
class LocalizationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalizationLoss> _instance;
  const ::object_detection::protos::WeightedL2LocalizationLoss* weighted_l2_;
  const ::object_detection::protos::WeightedSmoothL1LocalizationLoss* weighted_smooth_l1_;
  const ::object_detection::protos::WeightedIOULocalizationLoss* weighted_iou_;
} _LocalizationLoss_default_instance_;
class WeightedL2LocalizationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeightedL2LocalizationLoss> _instance;
} _WeightedL2LocalizationLoss_default_instance_;
class WeightedSmoothL1LocalizationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeightedSmoothL1LocalizationLoss> _instance;
} _WeightedSmoothL1LocalizationLoss_default_instance_;
class WeightedIOULocalizationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeightedIOULocalizationLoss> _instance;
} _WeightedIOULocalizationLoss_default_instance_;
class ClassificationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassificationLoss> _instance;
  const ::object_detection::protos::WeightedSigmoidClassificationLoss* weighted_sigmoid_;
  const ::object_detection::protos::WeightedSoftmaxClassificationLoss* weighted_softmax_;
  const ::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss* weighted_logits_softmax_;
  const ::object_detection::protos::BootstrappedSigmoidClassificationLoss* bootstrapped_sigmoid_;
  const ::object_detection::protos::SigmoidFocalClassificationLoss* weighted_sigmoid_focal_;
} _ClassificationLoss_default_instance_;
class WeightedSigmoidClassificationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeightedSigmoidClassificationLoss> _instance;
} _WeightedSigmoidClassificationLoss_default_instance_;
class SigmoidFocalClassificationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigmoidFocalClassificationLoss> _instance;
} _SigmoidFocalClassificationLoss_default_instance_;
class WeightedSoftmaxClassificationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeightedSoftmaxClassificationLoss> _instance;
} _WeightedSoftmaxClassificationLoss_default_instance_;
class WeightedSoftmaxClassificationAgainstLogitsLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeightedSoftmaxClassificationAgainstLogitsLoss> _instance;
} _WeightedSoftmaxClassificationAgainstLogitsLoss_default_instance_;
class BootstrappedSigmoidClassificationLossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BootstrappedSigmoidClassificationLoss> _instance;
} _BootstrappedSigmoidClassificationLoss_default_instance_;
class HardExampleMinerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HardExampleMiner> _instance;
} _HardExampleMiner_default_instance_;
class RandomExampleSamplerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomExampleSampler> _instance;
} _RandomExampleSampler_default_instance_;
}  // namespace protos
}  // namespace object_detection
static void InitDefaultsscc_info_BootstrappedSigmoidClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_BootstrappedSigmoidClassificationLoss_default_instance_;
    new (ptr) ::object_detection::protos::BootstrappedSigmoidClassificationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::BootstrappedSigmoidClassificationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BootstrappedSigmoidClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BootstrappedSigmoidClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto}, {}};

static void InitDefaultsscc_info_ClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_ClassificationLoss_default_instance_;
    new (ptr) ::object_detection::protos::ClassificationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::ClassificationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_ClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto}, {
      &scc_info_WeightedSigmoidClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
      &scc_info_WeightedSoftmaxClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
      &scc_info_WeightedSoftmaxClassificationAgainstLogitsLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
      &scc_info_BootstrappedSigmoidClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
      &scc_info_SigmoidFocalClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,}};

static void InitDefaultsscc_info_HardExampleMiner_object_5fdetection_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_HardExampleMiner_default_instance_;
    new (ptr) ::object_detection::protos::HardExampleMiner();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::HardExampleMiner::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HardExampleMiner_object_5fdetection_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HardExampleMiner_object_5fdetection_2fprotos_2flosses_2eproto}, {}};

static void InitDefaultsscc_info_LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_LocalizationLoss_default_instance_;
    new (ptr) ::object_detection::protos::LocalizationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::LocalizationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto}, {
      &scc_info_WeightedL2LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
      &scc_info_WeightedSmoothL1LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
      &scc_info_WeightedIOULocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,}};

static void InitDefaultsscc_info_Loss_object_5fdetection_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_Loss_default_instance_;
    new (ptr) ::object_detection::protos::Loss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::Loss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Loss_object_5fdetection_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_Loss_object_5fdetection_2fprotos_2flosses_2eproto}, {
      &scc_info_LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
      &scc_info_ClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
      &scc_info_HardExampleMiner_object_5fdetection_2fprotos_2flosses_2eproto.base,
      &scc_info_RandomExampleSampler_object_5fdetection_2fprotos_2flosses_2eproto.base,
      &scc_info_Loss_EqualizationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,}};

static void InitDefaultsscc_info_Loss_EqualizationLoss_object_5fdetection_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_Loss_EqualizationLoss_default_instance_;
    new (ptr) ::object_detection::protos::Loss_EqualizationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::Loss_EqualizationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Loss_EqualizationLoss_object_5fdetection_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Loss_EqualizationLoss_object_5fdetection_2fprotos_2flosses_2eproto}, {}};

static void InitDefaultsscc_info_RandomExampleSampler_object_5fdetection_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomExampleSampler_default_instance_;
    new (ptr) ::object_detection::protos::RandomExampleSampler();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomExampleSampler::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomExampleSampler_object_5fdetection_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RandomExampleSampler_object_5fdetection_2fprotos_2flosses_2eproto}, {}};

static void InitDefaultsscc_info_SigmoidFocalClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_SigmoidFocalClassificationLoss_default_instance_;
    new (ptr) ::object_detection::protos::SigmoidFocalClassificationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::SigmoidFocalClassificationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigmoidFocalClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SigmoidFocalClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto}, {}};

static void InitDefaultsscc_info_WeightedIOULocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_WeightedIOULocalizationLoss_default_instance_;
    new (ptr) ::object_detection::protos::WeightedIOULocalizationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::WeightedIOULocalizationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedIOULocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WeightedIOULocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto}, {}};

static void InitDefaultsscc_info_WeightedL2LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_WeightedL2LocalizationLoss_default_instance_;
    new (ptr) ::object_detection::protos::WeightedL2LocalizationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::WeightedL2LocalizationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedL2LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WeightedL2LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto}, {}};

static void InitDefaultsscc_info_WeightedSigmoidClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_WeightedSigmoidClassificationLoss_default_instance_;
    new (ptr) ::object_detection::protos::WeightedSigmoidClassificationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::WeightedSigmoidClassificationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedSigmoidClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WeightedSigmoidClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto}, {}};

static void InitDefaultsscc_info_WeightedSmoothL1LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_WeightedSmoothL1LocalizationLoss_default_instance_;
    new (ptr) ::object_detection::protos::WeightedSmoothL1LocalizationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::WeightedSmoothL1LocalizationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedSmoothL1LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WeightedSmoothL1LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto}, {}};

static void InitDefaultsscc_info_WeightedSoftmaxClassificationAgainstLogitsLoss_object_5fdetection_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_WeightedSoftmaxClassificationAgainstLogitsLoss_default_instance_;
    new (ptr) ::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedSoftmaxClassificationAgainstLogitsLoss_object_5fdetection_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WeightedSoftmaxClassificationAgainstLogitsLoss_object_5fdetection_2fprotos_2flosses_2eproto}, {}};

static void InitDefaultsscc_info_WeightedSoftmaxClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_WeightedSoftmaxClassificationLoss_default_instance_;
    new (ptr) ::object_detection::protos::WeightedSoftmaxClassificationLoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::WeightedSoftmaxClassificationLoss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightedSoftmaxClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WeightedSoftmaxClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_object_5fdetection_2fprotos_2flosses_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_object_5fdetection_2fprotos_2flosses_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_object_5fdetection_2fprotos_2flosses_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_object_5fdetection_2fprotos_2flosses_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Loss_EqualizationLoss, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Loss_EqualizationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Loss_EqualizationLoss, weight_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Loss_EqualizationLoss, exclude_prefixes_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Loss, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Loss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Loss, localization_loss_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Loss, classification_loss_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Loss, hard_example_miner_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Loss, classification_weight_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Loss, localization_weight_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Loss, random_example_sampler_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Loss, equalization_loss_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Loss, expected_loss_weights_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Loss, min_num_negative_samples_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Loss, desired_negative_sampling_ratio_),
  0,
  1,
  2,
  8,
  9,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::LocalizationLoss, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::LocalizationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::LocalizationLoss, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::object_detection::protos::LocalizationLossDefaultTypeInternal, weighted_l2_),
  offsetof(::object_detection::protos::LocalizationLossDefaultTypeInternal, weighted_smooth_l1_),
  offsetof(::object_detection::protos::LocalizationLossDefaultTypeInternal, weighted_iou_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::LocalizationLoss, localization_loss_),
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedL2LocalizationLoss, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedL2LocalizationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedL2LocalizationLoss, anchorwise_output_),
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedSmoothL1LocalizationLoss, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedSmoothL1LocalizationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedSmoothL1LocalizationLoss, anchorwise_output_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedSmoothL1LocalizationLoss, delta_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedIOULocalizationLoss, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedIOULocalizationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ClassificationLoss, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ClassificationLoss, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::object_detection::protos::ClassificationLossDefaultTypeInternal, weighted_sigmoid_),
  offsetof(::object_detection::protos::ClassificationLossDefaultTypeInternal, weighted_softmax_),
  offsetof(::object_detection::protos::ClassificationLossDefaultTypeInternal, weighted_logits_softmax_),
  offsetof(::object_detection::protos::ClassificationLossDefaultTypeInternal, bootstrapped_sigmoid_),
  offsetof(::object_detection::protos::ClassificationLossDefaultTypeInternal, weighted_sigmoid_focal_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ClassificationLoss, classification_loss_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedSigmoidClassificationLoss, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedSigmoidClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedSigmoidClassificationLoss, anchorwise_output_),
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SigmoidFocalClassificationLoss, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SigmoidFocalClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SigmoidFocalClassificationLoss, anchorwise_output_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SigmoidFocalClassificationLoss, gamma_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SigmoidFocalClassificationLoss, alpha_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedSoftmaxClassificationLoss, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedSoftmaxClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedSoftmaxClassificationLoss, anchorwise_output_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedSoftmaxClassificationLoss, logit_scale_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss, anchorwise_output_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss, logit_scale_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BootstrappedSigmoidClassificationLoss, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BootstrappedSigmoidClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BootstrappedSigmoidClassificationLoss, alpha_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BootstrappedSigmoidClassificationLoss, hard_bootstrap_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BootstrappedSigmoidClassificationLoss, anchorwise_output_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::HardExampleMiner, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::HardExampleMiner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::HardExampleMiner, num_hard_examples_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::HardExampleMiner, iou_threshold_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::HardExampleMiner, loss_type_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::HardExampleMiner, max_negatives_per_positive_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::HardExampleMiner, min_negatives_per_image_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomExampleSampler, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomExampleSampler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomExampleSampler, positive_sample_fraction_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::object_detection::protos::Loss_EqualizationLoss)},
  { 9, 24, sizeof(::object_detection::protos::Loss)},
  { 34, 43, sizeof(::object_detection::protos::LocalizationLoss)},
  { 46, 52, sizeof(::object_detection::protos::WeightedL2LocalizationLoss)},
  { 53, 60, sizeof(::object_detection::protos::WeightedSmoothL1LocalizationLoss)},
  { 62, 67, sizeof(::object_detection::protos::WeightedIOULocalizationLoss)},
  { 67, 78, sizeof(::object_detection::protos::ClassificationLoss)},
  { 83, 89, sizeof(::object_detection::protos::WeightedSigmoidClassificationLoss)},
  { 90, 98, sizeof(::object_detection::protos::SigmoidFocalClassificationLoss)},
  { 101, 108, sizeof(::object_detection::protos::WeightedSoftmaxClassificationLoss)},
  { 110, 117, sizeof(::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss)},
  { 119, 127, sizeof(::object_detection::protos::BootstrappedSigmoidClassificationLoss)},
  { 130, 140, sizeof(::object_detection::protos::HardExampleMiner)},
  { 145, 151, sizeof(::object_detection::protos::RandomExampleSampler)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_Loss_EqualizationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_Loss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_LocalizationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_WeightedL2LocalizationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_WeightedSmoothL1LocalizationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_WeightedIOULocalizationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_ClassificationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_WeightedSigmoidClassificationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_SigmoidFocalClassificationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_WeightedSoftmaxClassificationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_WeightedSoftmaxClassificationAgainstLogitsLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_BootstrappedSigmoidClassificationLoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_HardExampleMiner_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomExampleSampler_default_instance_),
};

const char descriptor_table_protodef_object_5fdetection_2fprotos_2flosses_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$object_detection/protos/losses.proto\022\027"
  "object_detection.protos\"\376\005\n\004Loss\022D\n\021loca"
  "lization_loss\030\001 \001(\0132).object_detection.p"
  "rotos.LocalizationLoss\022H\n\023classification"
  "_loss\030\002 \001(\0132+.object_detection.protos.Cl"
  "assificationLoss\022E\n\022hard_example_miner\030\003"
  " \001(\0132).object_detection.protos.HardExamp"
  "leMiner\022 \n\025classification_weight\030\004 \001(\002:\001"
  "1\022\036\n\023localization_weight\030\005 \001(\002:\0011\022M\n\026ran"
  "dom_example_sampler\030\006 \001(\0132-.object_detec"
  "tion.protos.RandomExampleSampler\022I\n\021equa"
  "lization_loss\030\007 \001(\0132..object_detection.p"
  "rotos.Loss.EqualizationLoss\022V\n\025expected_"
  "loss_weights\030\022 \001(\01621.object_detection.pr"
  "otos.Loss.ExpectedLossWeights:\004NONE\022#\n\030m"
  "in_num_negative_samples\030\023 \001(\002:\0010\022*\n\037desi"
  "red_negative_sampling_ratio\030\024 \001(\002:\0013\032\?\n\020"
  "EqualizationLoss\022\021\n\006weight\030\001 \001(\002:\0010\022\030\n\020e"
  "xclude_prefixes\030\002 \003(\t\"Y\n\023ExpectedLossWei"
  "ghts\022\010\n\004NONE\020\000\022\025\n\021EXPECTED_SAMPLING\020\001\022!\n"
  "\035REWEIGHTING_UNMATCHED_ANCHORS\020\002\"\232\002\n\020Loc"
  "alizationLoss\022J\n\013weighted_l2\030\001 \001(\01323.obj"
  "ect_detection.protos.WeightedL2Localizat"
  "ionLossH\000\022W\n\022weighted_smooth_l1\030\002 \001(\01329."
  "object_detection.protos.WeightedSmoothL1"
  "LocalizationLossH\000\022L\n\014weighted_iou\030\003 \001(\013"
  "24.object_detection.protos.WeightedIOULo"
  "calizationLossH\000B\023\n\021localization_loss\">\n"
  "\032WeightedL2LocalizationLoss\022 \n\021anchorwis"
  "e_output\030\001 \001(\010:\005false\"V\n WeightedSmoothL"
  "1LocalizationLoss\022 \n\021anchorwise_output\030\001"
  " \001(\010:\005false\022\020\n\005delta\030\002 \001(\002:\0011\"\035\n\033Weighte"
  "dIOULocalizationLoss\"\202\004\n\022ClassificationL"
  "oss\022V\n\020weighted_sigmoid\030\001 \001(\0132:.object_d"
  "etection.protos.WeightedSigmoidClassific"
  "ationLossH\000\022V\n\020weighted_softmax\030\002 \001(\0132:."
  "object_detection.protos.WeightedSoftmaxC"
  "lassificationLossH\000\022j\n\027weighted_logits_s"
  "oftmax\030\005 \001(\0132G.object_detection.protos.W"
  "eightedSoftmaxClassificationAgainstLogit"
  "sLossH\000\022^\n\024bootstrapped_sigmoid\030\003 \001(\0132>."
  "object_detection.protos.BootstrappedSigm"
  "oidClassificationLossH\000\022Y\n\026weighted_sigm"
  "oid_focal\030\004 \001(\01327.object_detection.proto"
  "s.SigmoidFocalClassificationLossH\000B\025\n\023cl"
  "assification_loss\"E\n!WeightedSigmoidClas"
  "sificationLoss\022 \n\021anchorwise_output\030\001 \001("
  "\010:\005false\"c\n\036SigmoidFocalClassificationLo"
  "ss\022 \n\021anchorwise_output\030\001 \001(\010:\005false\022\020\n\005"
  "gamma\030\002 \001(\002:\0012\022\r\n\005alpha\030\003 \001(\002\"]\n!Weighte"
  "dSoftmaxClassificationLoss\022 \n\021anchorwise"
  "_output\030\001 \001(\010:\005false\022\026\n\013logit_scale\030\002 \001("
  "\002:\0011\"j\n.WeightedSoftmaxClassificationAga"
  "instLogitsLoss\022 \n\021anchorwise_output\030\001 \001("
  "\010:\005false\022\026\n\013logit_scale\030\002 \001(\002:\0011\"w\n%Boot"
  "strappedSigmoidClassificationLoss\022\r\n\005alp"
  "ha\030\001 \001(\002\022\035\n\016hard_bootstrap\030\002 \001(\010:\005false\022"
  " \n\021anchorwise_output\030\003 \001(\010:\005false\"\241\002\n\020Ha"
  "rdExampleMiner\022\035\n\021num_hard_examples\030\001 \001("
  "\005:\00264\022\032\n\riou_threshold\030\002 \001(\002:\0030.7\022K\n\tlos"
  "s_type\030\003 \001(\01622.object_detection.protos.H"
  "ardExampleMiner.LossType:\004BOTH\022%\n\032max_ne"
  "gatives_per_positive\030\004 \001(\005:\0010\022\"\n\027min_neg"
  "atives_per_image\030\005 \001(\005:\0010\":\n\010LossType\022\010\n"
  "\004BOTH\020\000\022\022\n\016CLASSIFICATION\020\001\022\020\n\014LOCALIZAT"
  "ION\020\002\">\n\024RandomExampleSampler\022&\n\030positiv"
  "e_sample_fraction\030\001 \001(\002:\0040.01"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_object_5fdetection_2fprotos_2flosses_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_object_5fdetection_2fprotos_2flosses_2eproto_sccs[14] = {
  &scc_info_BootstrappedSigmoidClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
  &scc_info_ClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
  &scc_info_HardExampleMiner_object_5fdetection_2fprotos_2flosses_2eproto.base,
  &scc_info_LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
  &scc_info_Loss_object_5fdetection_2fprotos_2flosses_2eproto.base,
  &scc_info_Loss_EqualizationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
  &scc_info_RandomExampleSampler_object_5fdetection_2fprotos_2flosses_2eproto.base,
  &scc_info_SigmoidFocalClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
  &scc_info_WeightedIOULocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
  &scc_info_WeightedL2LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
  &scc_info_WeightedSigmoidClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
  &scc_info_WeightedSmoothL1LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
  &scc_info_WeightedSoftmaxClassificationAgainstLogitsLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
  &scc_info_WeightedSoftmaxClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_object_5fdetection_2fprotos_2flosses_2eproto_once;
static bool descriptor_table_object_5fdetection_2fprotos_2flosses_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2flosses_2eproto = {
  &descriptor_table_object_5fdetection_2fprotos_2flosses_2eproto_initialized, descriptor_table_protodef_object_5fdetection_2fprotos_2flosses_2eproto, "object_detection/protos/losses.proto", 2669,
  &descriptor_table_object_5fdetection_2fprotos_2flosses_2eproto_once, descriptor_table_object_5fdetection_2fprotos_2flosses_2eproto_sccs, descriptor_table_object_5fdetection_2fprotos_2flosses_2eproto_deps, 14, 0,
  schemas, file_default_instances, TableStruct_object_5fdetection_2fprotos_2flosses_2eproto::offsets,
  file_level_metadata_object_5fdetection_2fprotos_2flosses_2eproto, 14, file_level_enum_descriptors_object_5fdetection_2fprotos_2flosses_2eproto, file_level_service_descriptors_object_5fdetection_2fprotos_2flosses_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_object_5fdetection_2fprotos_2flosses_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_object_5fdetection_2fprotos_2flosses_2eproto), true);
namespace object_detection {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Loss_ExpectedLossWeights_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_5fdetection_2fprotos_2flosses_2eproto);
  return file_level_enum_descriptors_object_5fdetection_2fprotos_2flosses_2eproto[0];
}
bool Loss_ExpectedLossWeights_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Loss_ExpectedLossWeights Loss::NONE;
constexpr Loss_ExpectedLossWeights Loss::EXPECTED_SAMPLING;
constexpr Loss_ExpectedLossWeights Loss::REWEIGHTING_UNMATCHED_ANCHORS;
constexpr Loss_ExpectedLossWeights Loss::ExpectedLossWeights_MIN;
constexpr Loss_ExpectedLossWeights Loss::ExpectedLossWeights_MAX;
constexpr int Loss::ExpectedLossWeights_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HardExampleMiner_LossType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_5fdetection_2fprotos_2flosses_2eproto);
  return file_level_enum_descriptors_object_5fdetection_2fprotos_2flosses_2eproto[1];
}
bool HardExampleMiner_LossType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HardExampleMiner_LossType HardExampleMiner::BOTH;
constexpr HardExampleMiner_LossType HardExampleMiner::CLASSIFICATION;
constexpr HardExampleMiner_LossType HardExampleMiner::LOCALIZATION;
constexpr HardExampleMiner_LossType HardExampleMiner::LossType_MIN;
constexpr HardExampleMiner_LossType HardExampleMiner::LossType_MAX;
constexpr int HardExampleMiner::LossType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Loss_EqualizationLoss::InitAsDefaultInstance() {
}
class Loss_EqualizationLoss::_Internal {
 public:
  using HasBits = decltype(std::declval<Loss_EqualizationLoss>()._has_bits_);
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Loss_EqualizationLoss::Loss_EqualizationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.Loss.EqualizationLoss)
}
Loss_EqualizationLoss::Loss_EqualizationLoss(const Loss_EqualizationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      exclude_prefixes_(from.exclude_prefixes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.Loss.EqualizationLoss)
}

void Loss_EqualizationLoss::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Loss_EqualizationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base);
  weight_ = 0;
}

Loss_EqualizationLoss::~Loss_EqualizationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.Loss.EqualizationLoss)
  SharedDtor();
}

void Loss_EqualizationLoss::SharedDtor() {
}

void Loss_EqualizationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Loss_EqualizationLoss& Loss_EqualizationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Loss_EqualizationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void Loss_EqualizationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.Loss.EqualizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exclude_prefixes_.Clear();
  weight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Loss_EqualizationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float weight = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string exclude_prefixes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_exclude_prefixes(), ptr, ctx, "object_detection.protos.Loss.EqualizationLoss.exclude_prefixes");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Loss_EqualizationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.Loss.EqualizationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float weight = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string exclude_prefixes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_exclude_prefixes()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exclude_prefixes(this->exclude_prefixes_size() - 1).data(),
            static_cast<int>(this->exclude_prefixes(this->exclude_prefixes_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "object_detection.protos.Loss.EqualizationLoss.exclude_prefixes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.Loss.EqualizationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.Loss.EqualizationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Loss_EqualizationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.Loss.EqualizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float weight = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->weight(), output);
  }

  // repeated string exclude_prefixes = 2;
  for (int i = 0, n = this->exclude_prefixes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exclude_prefixes(i).data(), static_cast<int>(this->exclude_prefixes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.Loss.EqualizationLoss.exclude_prefixes");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->exclude_prefixes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.Loss.EqualizationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* Loss_EqualizationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.Loss.EqualizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float weight = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->weight(), target);
  }

  // repeated string exclude_prefixes = 2;
  for (int i = 0, n = this->exclude_prefixes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exclude_prefixes(i).data(), static_cast<int>(this->exclude_prefixes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.Loss.EqualizationLoss.exclude_prefixes");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->exclude_prefixes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.Loss.EqualizationLoss)
  return target;
}

size_t Loss_EqualizationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.Loss.EqualizationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string exclude_prefixes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->exclude_prefixes_size());
  for (int i = 0, n = this->exclude_prefixes_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->exclude_prefixes(i));
  }

  // optional float weight = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Loss_EqualizationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.Loss.EqualizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const Loss_EqualizationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Loss_EqualizationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.Loss.EqualizationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.Loss.EqualizationLoss)
    MergeFrom(*source);
  }
}

void Loss_EqualizationLoss::MergeFrom(const Loss_EqualizationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.Loss.EqualizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exclude_prefixes_.MergeFrom(from.exclude_prefixes_);
  if (from.has_weight()) {
    set_weight(from.weight());
  }
}

void Loss_EqualizationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.Loss.EqualizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Loss_EqualizationLoss::CopyFrom(const Loss_EqualizationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.Loss.EqualizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Loss_EqualizationLoss::IsInitialized() const {
  return true;
}

void Loss_EqualizationLoss::InternalSwap(Loss_EqualizationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  exclude_prefixes_.InternalSwap(CastToBase(&other->exclude_prefixes_));
  swap(weight_, other->weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Loss_EqualizationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Loss::InitAsDefaultInstance() {
  ::object_detection::protos::_Loss_default_instance_._instance.get_mutable()->localization_loss_ = const_cast< ::object_detection::protos::LocalizationLoss*>(
      ::object_detection::protos::LocalizationLoss::internal_default_instance());
  ::object_detection::protos::_Loss_default_instance_._instance.get_mutable()->classification_loss_ = const_cast< ::object_detection::protos::ClassificationLoss*>(
      ::object_detection::protos::ClassificationLoss::internal_default_instance());
  ::object_detection::protos::_Loss_default_instance_._instance.get_mutable()->hard_example_miner_ = const_cast< ::object_detection::protos::HardExampleMiner*>(
      ::object_detection::protos::HardExampleMiner::internal_default_instance());
  ::object_detection::protos::_Loss_default_instance_._instance.get_mutable()->random_example_sampler_ = const_cast< ::object_detection::protos::RandomExampleSampler*>(
      ::object_detection::protos::RandomExampleSampler::internal_default_instance());
  ::object_detection::protos::_Loss_default_instance_._instance.get_mutable()->equalization_loss_ = const_cast< ::object_detection::protos::Loss_EqualizationLoss*>(
      ::object_detection::protos::Loss_EqualizationLoss::internal_default_instance());
}
class Loss::_Internal {
 public:
  using HasBits = decltype(std::declval<Loss>()._has_bits_);
  static const ::object_detection::protos::LocalizationLoss& localization_loss(const Loss* msg);
  static void set_has_localization_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::object_detection::protos::ClassificationLoss& classification_loss(const Loss* msg);
  static void set_has_classification_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::object_detection::protos::HardExampleMiner& hard_example_miner(const Loss* msg);
  static void set_has_hard_example_miner(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_classification_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_localization_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::object_detection::protos::RandomExampleSampler& random_example_sampler(const Loss* msg);
  static void set_has_random_example_sampler(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::object_detection::protos::Loss_EqualizationLoss& equalization_loss(const Loss* msg);
  static void set_has_equalization_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_expected_loss_weights(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_min_num_negative_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_desired_negative_sampling_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::object_detection::protos::LocalizationLoss&
Loss::_Internal::localization_loss(const Loss* msg) {
  return *msg->localization_loss_;
}
const ::object_detection::protos::ClassificationLoss&
Loss::_Internal::classification_loss(const Loss* msg) {
  return *msg->classification_loss_;
}
const ::object_detection::protos::HardExampleMiner&
Loss::_Internal::hard_example_miner(const Loss* msg) {
  return *msg->hard_example_miner_;
}
const ::object_detection::protos::RandomExampleSampler&
Loss::_Internal::random_example_sampler(const Loss* msg) {
  return *msg->random_example_sampler_;
}
const ::object_detection::protos::Loss_EqualizationLoss&
Loss::_Internal::equalization_loss(const Loss* msg) {
  return *msg->equalization_loss_;
}
Loss::Loss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.Loss)
}
Loss::Loss(const Loss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_localization_loss()) {
    localization_loss_ = new ::object_detection::protos::LocalizationLoss(*from.localization_loss_);
  } else {
    localization_loss_ = nullptr;
  }
  if (from.has_classification_loss()) {
    classification_loss_ = new ::object_detection::protos::ClassificationLoss(*from.classification_loss_);
  } else {
    classification_loss_ = nullptr;
  }
  if (from.has_hard_example_miner()) {
    hard_example_miner_ = new ::object_detection::protos::HardExampleMiner(*from.hard_example_miner_);
  } else {
    hard_example_miner_ = nullptr;
  }
  if (from.has_random_example_sampler()) {
    random_example_sampler_ = new ::object_detection::protos::RandomExampleSampler(*from.random_example_sampler_);
  } else {
    random_example_sampler_ = nullptr;
  }
  if (from.has_equalization_loss()) {
    equalization_loss_ = new ::object_detection::protos::Loss_EqualizationLoss(*from.equalization_loss_);
  } else {
    equalization_loss_ = nullptr;
  }
  ::memcpy(&expected_loss_weights_, &from.expected_loss_weights_,
    static_cast<size_t>(reinterpret_cast<char*>(&localization_weight_) -
    reinterpret_cast<char*>(&expected_loss_weights_)) + sizeof(localization_weight_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.Loss)
}

void Loss::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Loss_object_5fdetection_2fprotos_2flosses_2eproto.base);
  ::memset(&localization_loss_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_num_negative_samples_) -
      reinterpret_cast<char*>(&localization_loss_)) + sizeof(min_num_negative_samples_));
  desired_negative_sampling_ratio_ = 3;
  classification_weight_ = 1;
  localization_weight_ = 1;
}

Loss::~Loss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.Loss)
  SharedDtor();
}

void Loss::SharedDtor() {
  if (this != internal_default_instance()) delete localization_loss_;
  if (this != internal_default_instance()) delete classification_loss_;
  if (this != internal_default_instance()) delete hard_example_miner_;
  if (this != internal_default_instance()) delete random_example_sampler_;
  if (this != internal_default_instance()) delete equalization_loss_;
}

void Loss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Loss& Loss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Loss_object_5fdetection_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void Loss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.Loss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(localization_loss_ != nullptr);
      localization_loss_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(classification_loss_ != nullptr);
      classification_loss_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(hard_example_miner_ != nullptr);
      hard_example_miner_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(random_example_sampler_ != nullptr);
      random_example_sampler_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(equalization_loss_ != nullptr);
      equalization_loss_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&expected_loss_weights_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_num_negative_samples_) -
        reinterpret_cast<char*>(&expected_loss_weights_)) + sizeof(min_num_negative_samples_));
    desired_negative_sampling_ratio_ = 3;
  }
  if (cached_has_bits & 0x00000300u) {
    classification_weight_ = 1;
    localization_weight_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Loss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.LocalizationLoss localization_loss = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_localization_loss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.ClassificationLoss classification_loss = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_classification_loss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.HardExampleMiner hard_example_miner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_hard_example_miner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float classification_weight = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_classification_weight(&has_bits);
          classification_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float localization_weight = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_localization_weight(&has_bits);
          localization_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomExampleSampler random_example_sampler = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_random_example_sampler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.Loss.EqualizationLoss equalization_loss = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_equalization_loss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.Loss.ExpectedLossWeights expected_loss_weights = 18 [default = NONE];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::object_detection::protos::Loss_ExpectedLossWeights_IsValid(val))) {
            set_expected_loss_weights(static_cast<::object_detection::protos::Loss_ExpectedLossWeights>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float min_num_negative_samples = 19 [default = 0];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_min_num_negative_samples(&has_bits);
          min_num_negative_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float desired_negative_sampling_ratio = 20 [default = 3];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_desired_negative_sampling_ratio(&has_bits);
          desired_negative_sampling_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Loss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.Loss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.LocalizationLoss localization_loss = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_localization_loss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ClassificationLoss classification_loss = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_classification_loss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.HardExampleMiner hard_example_miner = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hard_example_miner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float classification_weight = 4 [default = 1];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_classification_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &classification_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float localization_weight = 5 [default = 1];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_localization_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &localization_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomExampleSampler random_example_sampler = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_random_example_sampler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.Loss.EqualizationLoss equalization_loss = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_equalization_loss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.Loss.ExpectedLossWeights expected_loss_weights = 18 [default = NONE];
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::Loss_ExpectedLossWeights_IsValid(value)) {
            set_expected_loss_weights(static_cast< ::object_detection::protos::Loss_ExpectedLossWeights >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                18, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_num_negative_samples = 19 [default = 0];
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (157 & 0xFF)) {
          _Internal::set_has_min_num_negative_samples(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_num_negative_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desired_negative_sampling_ratio = 20 [default = 3];
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (165 & 0xFF)) {
          _Internal::set_has_desired_negative_sampling_ratio(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desired_negative_sampling_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.Loss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.Loss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Loss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.Loss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.LocalizationLoss localization_loss = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::localization_loss(this), output);
  }

  // optional .object_detection.protos.ClassificationLoss classification_loss = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::classification_loss(this), output);
  }

  // optional .object_detection.protos.HardExampleMiner hard_example_miner = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::hard_example_miner(this), output);
  }

  // optional float classification_weight = 4 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->classification_weight(), output);
  }

  // optional float localization_weight = 5 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->localization_weight(), output);
  }

  // optional .object_detection.protos.RandomExampleSampler random_example_sampler = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::random_example_sampler(this), output);
  }

  // optional .object_detection.protos.Loss.EqualizationLoss equalization_loss = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::equalization_loss(this), output);
  }

  // optional .object_detection.protos.Loss.ExpectedLossWeights expected_loss_weights = 18 [default = NONE];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      18, this->expected_loss_weights(), output);
  }

  // optional float min_num_negative_samples = 19 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(19, this->min_num_negative_samples(), output);
  }

  // optional float desired_negative_sampling_ratio = 20 [default = 3];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(20, this->desired_negative_sampling_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.Loss)
}

::PROTOBUF_NAMESPACE_ID::uint8* Loss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.Loss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.LocalizationLoss localization_loss = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::localization_loss(this), target);
  }

  // optional .object_detection.protos.ClassificationLoss classification_loss = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::classification_loss(this), target);
  }

  // optional .object_detection.protos.HardExampleMiner hard_example_miner = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::hard_example_miner(this), target);
  }

  // optional float classification_weight = 4 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->classification_weight(), target);
  }

  // optional float localization_weight = 5 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->localization_weight(), target);
  }

  // optional .object_detection.protos.RandomExampleSampler random_example_sampler = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::random_example_sampler(this), target);
  }

  // optional .object_detection.protos.Loss.EqualizationLoss equalization_loss = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::equalization_loss(this), target);
  }

  // optional .object_detection.protos.Loss.ExpectedLossWeights expected_loss_weights = 18 [default = NONE];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->expected_loss_weights(), target);
  }

  // optional float min_num_negative_samples = 19 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->min_num_negative_samples(), target);
  }

  // optional float desired_negative_sampling_ratio = 20 [default = 3];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->desired_negative_sampling_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.Loss)
  return target;
}

size_t Loss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.Loss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .object_detection.protos.LocalizationLoss localization_loss = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *localization_loss_);
    }

    // optional .object_detection.protos.ClassificationLoss classification_loss = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_loss_);
    }

    // optional .object_detection.protos.HardExampleMiner hard_example_miner = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hard_example_miner_);
    }

    // optional .object_detection.protos.RandomExampleSampler random_example_sampler = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *random_example_sampler_);
    }

    // optional .object_detection.protos.Loss.EqualizationLoss equalization_loss = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *equalization_loss_);
    }

    // optional .object_detection.protos.Loss.ExpectedLossWeights expected_loss_weights = 18 [default = NONE];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->expected_loss_weights());
    }

    // optional float min_num_negative_samples = 19 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float desired_negative_sampling_ratio = 20 [default = 3];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float classification_weight = 4 [default = 1];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float localization_weight = 5 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Loss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.Loss)
  GOOGLE_DCHECK_NE(&from, this);
  const Loss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Loss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.Loss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.Loss)
    MergeFrom(*source);
  }
}

void Loss::MergeFrom(const Loss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.Loss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_localization_loss()->::object_detection::protos::LocalizationLoss::MergeFrom(from.localization_loss());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_classification_loss()->::object_detection::protos::ClassificationLoss::MergeFrom(from.classification_loss());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_hard_example_miner()->::object_detection::protos::HardExampleMiner::MergeFrom(from.hard_example_miner());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_random_example_sampler()->::object_detection::protos::RandomExampleSampler::MergeFrom(from.random_example_sampler());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_equalization_loss()->::object_detection::protos::Loss_EqualizationLoss::MergeFrom(from.equalization_loss());
    }
    if (cached_has_bits & 0x00000020u) {
      expected_loss_weights_ = from.expected_loss_weights_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_num_negative_samples_ = from.min_num_negative_samples_;
    }
    if (cached_has_bits & 0x00000080u) {
      desired_negative_sampling_ratio_ = from.desired_negative_sampling_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      classification_weight_ = from.classification_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      localization_weight_ = from.localization_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Loss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.Loss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Loss::CopyFrom(const Loss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.Loss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Loss::IsInitialized() const {
  return true;
}

void Loss::InternalSwap(Loss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(localization_loss_, other->localization_loss_);
  swap(classification_loss_, other->classification_loss_);
  swap(hard_example_miner_, other->hard_example_miner_);
  swap(random_example_sampler_, other->random_example_sampler_);
  swap(equalization_loss_, other->equalization_loss_);
  swap(expected_loss_weights_, other->expected_loss_weights_);
  swap(min_num_negative_samples_, other->min_num_negative_samples_);
  swap(desired_negative_sampling_ratio_, other->desired_negative_sampling_ratio_);
  swap(classification_weight_, other->classification_weight_);
  swap(localization_weight_, other->localization_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Loss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalizationLoss::InitAsDefaultInstance() {
  ::object_detection::protos::_LocalizationLoss_default_instance_.weighted_l2_ = const_cast< ::object_detection::protos::WeightedL2LocalizationLoss*>(
      ::object_detection::protos::WeightedL2LocalizationLoss::internal_default_instance());
  ::object_detection::protos::_LocalizationLoss_default_instance_.weighted_smooth_l1_ = const_cast< ::object_detection::protos::WeightedSmoothL1LocalizationLoss*>(
      ::object_detection::protos::WeightedSmoothL1LocalizationLoss::internal_default_instance());
  ::object_detection::protos::_LocalizationLoss_default_instance_.weighted_iou_ = const_cast< ::object_detection::protos::WeightedIOULocalizationLoss*>(
      ::object_detection::protos::WeightedIOULocalizationLoss::internal_default_instance());
}
class LocalizationLoss::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalizationLoss>()._has_bits_);
  static const ::object_detection::protos::WeightedL2LocalizationLoss& weighted_l2(const LocalizationLoss* msg);
  static const ::object_detection::protos::WeightedSmoothL1LocalizationLoss& weighted_smooth_l1(const LocalizationLoss* msg);
  static const ::object_detection::protos::WeightedIOULocalizationLoss& weighted_iou(const LocalizationLoss* msg);
};

const ::object_detection::protos::WeightedL2LocalizationLoss&
LocalizationLoss::_Internal::weighted_l2(const LocalizationLoss* msg) {
  return *msg->localization_loss_.weighted_l2_;
}
const ::object_detection::protos::WeightedSmoothL1LocalizationLoss&
LocalizationLoss::_Internal::weighted_smooth_l1(const LocalizationLoss* msg) {
  return *msg->localization_loss_.weighted_smooth_l1_;
}
const ::object_detection::protos::WeightedIOULocalizationLoss&
LocalizationLoss::_Internal::weighted_iou(const LocalizationLoss* msg) {
  return *msg->localization_loss_.weighted_iou_;
}
void LocalizationLoss::set_allocated_weighted_l2(::object_detection::protos::WeightedL2LocalizationLoss* weighted_l2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_localization_loss();
  if (weighted_l2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weighted_l2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weighted_l2, submessage_arena);
    }
    set_has_weighted_l2();
    localization_loss_.weighted_l2_ = weighted_l2;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.LocalizationLoss.weighted_l2)
}
void LocalizationLoss::set_allocated_weighted_smooth_l1(::object_detection::protos::WeightedSmoothL1LocalizationLoss* weighted_smooth_l1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_localization_loss();
  if (weighted_smooth_l1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weighted_smooth_l1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weighted_smooth_l1, submessage_arena);
    }
    set_has_weighted_smooth_l1();
    localization_loss_.weighted_smooth_l1_ = weighted_smooth_l1;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.LocalizationLoss.weighted_smooth_l1)
}
void LocalizationLoss::set_allocated_weighted_iou(::object_detection::protos::WeightedIOULocalizationLoss* weighted_iou) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_localization_loss();
  if (weighted_iou) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weighted_iou = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weighted_iou, submessage_arena);
    }
    set_has_weighted_iou();
    localization_loss_.weighted_iou_ = weighted_iou;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.LocalizationLoss.weighted_iou)
}
LocalizationLoss::LocalizationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.LocalizationLoss)
}
LocalizationLoss::LocalizationLoss(const LocalizationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_localization_loss();
  switch (from.localization_loss_case()) {
    case kWeightedL2: {
      mutable_weighted_l2()->::object_detection::protos::WeightedL2LocalizationLoss::MergeFrom(from.weighted_l2());
      break;
    }
    case kWeightedSmoothL1: {
      mutable_weighted_smooth_l1()->::object_detection::protos::WeightedSmoothL1LocalizationLoss::MergeFrom(from.weighted_smooth_l1());
      break;
    }
    case kWeightedIou: {
      mutable_weighted_iou()->::object_detection::protos::WeightedIOULocalizationLoss::MergeFrom(from.weighted_iou());
      break;
    }
    case LOCALIZATION_LOSS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.LocalizationLoss)
}

void LocalizationLoss::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base);
  clear_has_localization_loss();
}

LocalizationLoss::~LocalizationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.LocalizationLoss)
  SharedDtor();
}

void LocalizationLoss::SharedDtor() {
  if (has_localization_loss()) {
    clear_localization_loss();
  }
}

void LocalizationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalizationLoss& LocalizationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void LocalizationLoss::clear_localization_loss() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.LocalizationLoss)
  switch (localization_loss_case()) {
    case kWeightedL2: {
      delete localization_loss_.weighted_l2_;
      break;
    }
    case kWeightedSmoothL1: {
      delete localization_loss_.weighted_smooth_l1_;
      break;
    }
    case kWeightedIou: {
      delete localization_loss_.weighted_iou_;
      break;
    }
    case LOCALIZATION_LOSS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOCALIZATION_LOSS_NOT_SET;
}


void LocalizationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.LocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_localization_loss();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocalizationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.WeightedL2LocalizationLoss weighted_l2 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_weighted_l2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.WeightedSmoothL1LocalizationLoss weighted_smooth_l1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_weighted_smooth_l1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.WeightedIOULocalizationLoss weighted_iou = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_weighted_iou(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocalizationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.LocalizationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.WeightedL2LocalizationLoss weighted_l2 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_weighted_l2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.WeightedSmoothL1LocalizationLoss weighted_smooth_l1 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_weighted_smooth_l1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.WeightedIOULocalizationLoss weighted_iou = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_weighted_iou()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.LocalizationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.LocalizationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocalizationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.LocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (localization_loss_case()) {
    case kWeightedL2:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::weighted_l2(this), output);
      break;
    case kWeightedSmoothL1:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::weighted_smooth_l1(this), output);
      break;
    case kWeightedIou:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, _Internal::weighted_iou(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.LocalizationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalizationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.LocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (localization_loss_case()) {
    case kWeightedL2:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, _Internal::weighted_l2(this), target);
      break;
    case kWeightedSmoothL1:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::weighted_smooth_l1(this), target);
      break;
    case kWeightedIou:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, _Internal::weighted_iou(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.LocalizationLoss)
  return target;
}

size_t LocalizationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.LocalizationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (localization_loss_case()) {
    // optional .object_detection.protos.WeightedL2LocalizationLoss weighted_l2 = 1;
    case kWeightedL2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *localization_loss_.weighted_l2_);
      break;
    }
    // optional .object_detection.protos.WeightedSmoothL1LocalizationLoss weighted_smooth_l1 = 2;
    case kWeightedSmoothL1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *localization_loss_.weighted_smooth_l1_);
      break;
    }
    // optional .object_detection.protos.WeightedIOULocalizationLoss weighted_iou = 3;
    case kWeightedIou: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *localization_loss_.weighted_iou_);
      break;
    }
    case LOCALIZATION_LOSS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalizationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalizationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.LocalizationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.LocalizationLoss)
    MergeFrom(*source);
  }
}

void LocalizationLoss::MergeFrom(const LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.localization_loss_case()) {
    case kWeightedL2: {
      mutable_weighted_l2()->::object_detection::protos::WeightedL2LocalizationLoss::MergeFrom(from.weighted_l2());
      break;
    }
    case kWeightedSmoothL1: {
      mutable_weighted_smooth_l1()->::object_detection::protos::WeightedSmoothL1LocalizationLoss::MergeFrom(from.weighted_smooth_l1());
      break;
    }
    case kWeightedIou: {
      mutable_weighted_iou()->::object_detection::protos::WeightedIOULocalizationLoss::MergeFrom(from.weighted_iou());
      break;
    }
    case LOCALIZATION_LOSS_NOT_SET: {
      break;
    }
  }
}

void LocalizationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationLoss::CopyFrom(const LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationLoss::IsInitialized() const {
  return true;
}

void LocalizationLoss::InternalSwap(LocalizationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(localization_loss_, other->localization_loss_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalizationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WeightedL2LocalizationLoss::InitAsDefaultInstance() {
}
class WeightedL2LocalizationLoss::_Internal {
 public:
  using HasBits = decltype(std::declval<WeightedL2LocalizationLoss>()._has_bits_);
  static void set_has_anchorwise_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WeightedL2LocalizationLoss::WeightedL2LocalizationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.WeightedL2LocalizationLoss)
}
WeightedL2LocalizationLoss::WeightedL2LocalizationLoss(const WeightedL2LocalizationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  anchorwise_output_ = from.anchorwise_output_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.WeightedL2LocalizationLoss)
}

void WeightedL2LocalizationLoss::SharedCtor() {
  anchorwise_output_ = false;
}

WeightedL2LocalizationLoss::~WeightedL2LocalizationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.WeightedL2LocalizationLoss)
  SharedDtor();
}

void WeightedL2LocalizationLoss::SharedDtor() {
}

void WeightedL2LocalizationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeightedL2LocalizationLoss& WeightedL2LocalizationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeightedL2LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void WeightedL2LocalizationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.WeightedL2LocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anchorwise_output_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WeightedL2LocalizationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool anchorwise_output = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_anchorwise_output(&has_bits);
          anchorwise_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WeightedL2LocalizationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.WeightedL2LocalizationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool anchorwise_output = 1 [default = false];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_anchorwise_output(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.WeightedL2LocalizationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.WeightedL2LocalizationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WeightedL2LocalizationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.WeightedL2LocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.WeightedL2LocalizationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* WeightedL2LocalizationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.WeightedL2LocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.WeightedL2LocalizationLoss)
  return target;
}

size_t WeightedL2LocalizationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.WeightedL2LocalizationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool anchorwise_output = 1 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeightedL2LocalizationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.WeightedL2LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedL2LocalizationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeightedL2LocalizationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.WeightedL2LocalizationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.WeightedL2LocalizationLoss)
    MergeFrom(*source);
  }
}

void WeightedL2LocalizationLoss::MergeFrom(const WeightedL2LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.WeightedL2LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_anchorwise_output()) {
    set_anchorwise_output(from.anchorwise_output());
  }
}

void WeightedL2LocalizationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.WeightedL2LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedL2LocalizationLoss::CopyFrom(const WeightedL2LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.WeightedL2LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedL2LocalizationLoss::IsInitialized() const {
  return true;
}

void WeightedL2LocalizationLoss::InternalSwap(WeightedL2LocalizationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(anchorwise_output_, other->anchorwise_output_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeightedL2LocalizationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WeightedSmoothL1LocalizationLoss::InitAsDefaultInstance() {
}
class WeightedSmoothL1LocalizationLoss::_Internal {
 public:
  using HasBits = decltype(std::declval<WeightedSmoothL1LocalizationLoss>()._has_bits_);
  static void set_has_anchorwise_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WeightedSmoothL1LocalizationLoss::WeightedSmoothL1LocalizationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.WeightedSmoothL1LocalizationLoss)
}
WeightedSmoothL1LocalizationLoss::WeightedSmoothL1LocalizationLoss(const WeightedSmoothL1LocalizationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anchorwise_output_, &from.anchorwise_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&delta_) -
    reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(delta_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.WeightedSmoothL1LocalizationLoss)
}

void WeightedSmoothL1LocalizationLoss::SharedCtor() {
  anchorwise_output_ = false;
  delta_ = 1;
}

WeightedSmoothL1LocalizationLoss::~WeightedSmoothL1LocalizationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  SharedDtor();
}

void WeightedSmoothL1LocalizationLoss::SharedDtor() {
}

void WeightedSmoothL1LocalizationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeightedSmoothL1LocalizationLoss& WeightedSmoothL1LocalizationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeightedSmoothL1LocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void WeightedSmoothL1LocalizationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    anchorwise_output_ = false;
    delta_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WeightedSmoothL1LocalizationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool anchorwise_output = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_anchorwise_output(&has_bits);
          anchorwise_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float delta = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_delta(&has_bits);
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WeightedSmoothL1LocalizationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool anchorwise_output = 1 [default = false];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_anchorwise_output(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delta = 2 [default = 1];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_delta(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WeightedSmoothL1LocalizationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  // optional float delta = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->delta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.WeightedSmoothL1LocalizationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* WeightedSmoothL1LocalizationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  // optional float delta = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->delta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  return target;
}

size_t WeightedSmoothL1LocalizationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool anchorwise_output = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float delta = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeightedSmoothL1LocalizationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedSmoothL1LocalizationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeightedSmoothL1LocalizationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.WeightedSmoothL1LocalizationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.WeightedSmoothL1LocalizationLoss)
    MergeFrom(*source);
  }
}

void WeightedSmoothL1LocalizationLoss::MergeFrom(const WeightedSmoothL1LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      anchorwise_output_ = from.anchorwise_output_;
    }
    if (cached_has_bits & 0x00000002u) {
      delta_ = from.delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WeightedSmoothL1LocalizationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedSmoothL1LocalizationLoss::CopyFrom(const WeightedSmoothL1LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedSmoothL1LocalizationLoss::IsInitialized() const {
  return true;
}

void WeightedSmoothL1LocalizationLoss::InternalSwap(WeightedSmoothL1LocalizationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(delta_, other->delta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeightedSmoothL1LocalizationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WeightedIOULocalizationLoss::InitAsDefaultInstance() {
}
class WeightedIOULocalizationLoss::_Internal {
 public:
  using HasBits = decltype(std::declval<WeightedIOULocalizationLoss>()._has_bits_);
};

WeightedIOULocalizationLoss::WeightedIOULocalizationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.WeightedIOULocalizationLoss)
}
WeightedIOULocalizationLoss::WeightedIOULocalizationLoss(const WeightedIOULocalizationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.WeightedIOULocalizationLoss)
}

void WeightedIOULocalizationLoss::SharedCtor() {
}

WeightedIOULocalizationLoss::~WeightedIOULocalizationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.WeightedIOULocalizationLoss)
  SharedDtor();
}

void WeightedIOULocalizationLoss::SharedDtor() {
}

void WeightedIOULocalizationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeightedIOULocalizationLoss& WeightedIOULocalizationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeightedIOULocalizationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void WeightedIOULocalizationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.WeightedIOULocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WeightedIOULocalizationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WeightedIOULocalizationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.WeightedIOULocalizationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.WeightedIOULocalizationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.WeightedIOULocalizationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WeightedIOULocalizationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.WeightedIOULocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.WeightedIOULocalizationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* WeightedIOULocalizationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.WeightedIOULocalizationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.WeightedIOULocalizationLoss)
  return target;
}

size_t WeightedIOULocalizationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.WeightedIOULocalizationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeightedIOULocalizationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.WeightedIOULocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedIOULocalizationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeightedIOULocalizationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.WeightedIOULocalizationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.WeightedIOULocalizationLoss)
    MergeFrom(*source);
  }
}

void WeightedIOULocalizationLoss::MergeFrom(const WeightedIOULocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.WeightedIOULocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WeightedIOULocalizationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.WeightedIOULocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedIOULocalizationLoss::CopyFrom(const WeightedIOULocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.WeightedIOULocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedIOULocalizationLoss::IsInitialized() const {
  return true;
}

void WeightedIOULocalizationLoss::InternalSwap(WeightedIOULocalizationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeightedIOULocalizationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClassificationLoss::InitAsDefaultInstance() {
  ::object_detection::protos::_ClassificationLoss_default_instance_.weighted_sigmoid_ = const_cast< ::object_detection::protos::WeightedSigmoidClassificationLoss*>(
      ::object_detection::protos::WeightedSigmoidClassificationLoss::internal_default_instance());
  ::object_detection::protos::_ClassificationLoss_default_instance_.weighted_softmax_ = const_cast< ::object_detection::protos::WeightedSoftmaxClassificationLoss*>(
      ::object_detection::protos::WeightedSoftmaxClassificationLoss::internal_default_instance());
  ::object_detection::protos::_ClassificationLoss_default_instance_.weighted_logits_softmax_ = const_cast< ::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss*>(
      ::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss::internal_default_instance());
  ::object_detection::protos::_ClassificationLoss_default_instance_.bootstrapped_sigmoid_ = const_cast< ::object_detection::protos::BootstrappedSigmoidClassificationLoss*>(
      ::object_detection::protos::BootstrappedSigmoidClassificationLoss::internal_default_instance());
  ::object_detection::protos::_ClassificationLoss_default_instance_.weighted_sigmoid_focal_ = const_cast< ::object_detection::protos::SigmoidFocalClassificationLoss*>(
      ::object_detection::protos::SigmoidFocalClassificationLoss::internal_default_instance());
}
class ClassificationLoss::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassificationLoss>()._has_bits_);
  static const ::object_detection::protos::WeightedSigmoidClassificationLoss& weighted_sigmoid(const ClassificationLoss* msg);
  static const ::object_detection::protos::WeightedSoftmaxClassificationLoss& weighted_softmax(const ClassificationLoss* msg);
  static const ::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss& weighted_logits_softmax(const ClassificationLoss* msg);
  static const ::object_detection::protos::BootstrappedSigmoidClassificationLoss& bootstrapped_sigmoid(const ClassificationLoss* msg);
  static const ::object_detection::protos::SigmoidFocalClassificationLoss& weighted_sigmoid_focal(const ClassificationLoss* msg);
};

const ::object_detection::protos::WeightedSigmoidClassificationLoss&
ClassificationLoss::_Internal::weighted_sigmoid(const ClassificationLoss* msg) {
  return *msg->classification_loss_.weighted_sigmoid_;
}
const ::object_detection::protos::WeightedSoftmaxClassificationLoss&
ClassificationLoss::_Internal::weighted_softmax(const ClassificationLoss* msg) {
  return *msg->classification_loss_.weighted_softmax_;
}
const ::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss&
ClassificationLoss::_Internal::weighted_logits_softmax(const ClassificationLoss* msg) {
  return *msg->classification_loss_.weighted_logits_softmax_;
}
const ::object_detection::protos::BootstrappedSigmoidClassificationLoss&
ClassificationLoss::_Internal::bootstrapped_sigmoid(const ClassificationLoss* msg) {
  return *msg->classification_loss_.bootstrapped_sigmoid_;
}
const ::object_detection::protos::SigmoidFocalClassificationLoss&
ClassificationLoss::_Internal::weighted_sigmoid_focal(const ClassificationLoss* msg) {
  return *msg->classification_loss_.weighted_sigmoid_focal_;
}
void ClassificationLoss::set_allocated_weighted_sigmoid(::object_detection::protos::WeightedSigmoidClassificationLoss* weighted_sigmoid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_classification_loss();
  if (weighted_sigmoid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weighted_sigmoid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weighted_sigmoid, submessage_arena);
    }
    set_has_weighted_sigmoid();
    classification_loss_.weighted_sigmoid_ = weighted_sigmoid;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ClassificationLoss.weighted_sigmoid)
}
void ClassificationLoss::set_allocated_weighted_softmax(::object_detection::protos::WeightedSoftmaxClassificationLoss* weighted_softmax) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_classification_loss();
  if (weighted_softmax) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weighted_softmax = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weighted_softmax, submessage_arena);
    }
    set_has_weighted_softmax();
    classification_loss_.weighted_softmax_ = weighted_softmax;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ClassificationLoss.weighted_softmax)
}
void ClassificationLoss::set_allocated_weighted_logits_softmax(::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss* weighted_logits_softmax) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_classification_loss();
  if (weighted_logits_softmax) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weighted_logits_softmax = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weighted_logits_softmax, submessage_arena);
    }
    set_has_weighted_logits_softmax();
    classification_loss_.weighted_logits_softmax_ = weighted_logits_softmax;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ClassificationLoss.weighted_logits_softmax)
}
void ClassificationLoss::set_allocated_bootstrapped_sigmoid(::object_detection::protos::BootstrappedSigmoidClassificationLoss* bootstrapped_sigmoid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_classification_loss();
  if (bootstrapped_sigmoid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bootstrapped_sigmoid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bootstrapped_sigmoid, submessage_arena);
    }
    set_has_bootstrapped_sigmoid();
    classification_loss_.bootstrapped_sigmoid_ = bootstrapped_sigmoid;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ClassificationLoss.bootstrapped_sigmoid)
}
void ClassificationLoss::set_allocated_weighted_sigmoid_focal(::object_detection::protos::SigmoidFocalClassificationLoss* weighted_sigmoid_focal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_classification_loss();
  if (weighted_sigmoid_focal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weighted_sigmoid_focal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weighted_sigmoid_focal, submessage_arena);
    }
    set_has_weighted_sigmoid_focal();
    classification_loss_.weighted_sigmoid_focal_ = weighted_sigmoid_focal;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ClassificationLoss.weighted_sigmoid_focal)
}
ClassificationLoss::ClassificationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ClassificationLoss)
}
ClassificationLoss::ClassificationLoss(const ClassificationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_classification_loss();
  switch (from.classification_loss_case()) {
    case kWeightedSigmoid: {
      mutable_weighted_sigmoid()->::object_detection::protos::WeightedSigmoidClassificationLoss::MergeFrom(from.weighted_sigmoid());
      break;
    }
    case kWeightedSoftmax: {
      mutable_weighted_softmax()->::object_detection::protos::WeightedSoftmaxClassificationLoss::MergeFrom(from.weighted_softmax());
      break;
    }
    case kWeightedLogitsSoftmax: {
      mutable_weighted_logits_softmax()->::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss::MergeFrom(from.weighted_logits_softmax());
      break;
    }
    case kBootstrappedSigmoid: {
      mutable_bootstrapped_sigmoid()->::object_detection::protos::BootstrappedSigmoidClassificationLoss::MergeFrom(from.bootstrapped_sigmoid());
      break;
    }
    case kWeightedSigmoidFocal: {
      mutable_weighted_sigmoid_focal()->::object_detection::protos::SigmoidFocalClassificationLoss::MergeFrom(from.weighted_sigmoid_focal());
      break;
    }
    case CLASSIFICATION_LOSS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ClassificationLoss)
}

void ClassificationLoss::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base);
  clear_has_classification_loss();
}

ClassificationLoss::~ClassificationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ClassificationLoss)
  SharedDtor();
}

void ClassificationLoss::SharedDtor() {
  if (has_classification_loss()) {
    clear_classification_loss();
  }
}

void ClassificationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassificationLoss& ClassificationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void ClassificationLoss::clear_classification_loss() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.ClassificationLoss)
  switch (classification_loss_case()) {
    case kWeightedSigmoid: {
      delete classification_loss_.weighted_sigmoid_;
      break;
    }
    case kWeightedSoftmax: {
      delete classification_loss_.weighted_softmax_;
      break;
    }
    case kWeightedLogitsSoftmax: {
      delete classification_loss_.weighted_logits_softmax_;
      break;
    }
    case kBootstrappedSigmoid: {
      delete classification_loss_.bootstrapped_sigmoid_;
      break;
    }
    case kWeightedSigmoidFocal: {
      delete classification_loss_.weighted_sigmoid_focal_;
      break;
    }
    case CLASSIFICATION_LOSS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CLASSIFICATION_LOSS_NOT_SET;
}


void ClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_classification_loss();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClassificationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.WeightedSigmoidClassificationLoss weighted_sigmoid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_weighted_sigmoid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.WeightedSoftmaxClassificationLoss weighted_softmax = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_weighted_softmax(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.BootstrappedSigmoidClassificationLoss bootstrapped_sigmoid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_bootstrapped_sigmoid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.SigmoidFocalClassificationLoss weighted_sigmoid_focal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_weighted_sigmoid_focal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss weighted_logits_softmax = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_weighted_logits_softmax(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClassificationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ClassificationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.WeightedSigmoidClassificationLoss weighted_sigmoid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_weighted_sigmoid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.WeightedSoftmaxClassificationLoss weighted_softmax = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_weighted_softmax()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.BootstrappedSigmoidClassificationLoss bootstrapped_sigmoid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bootstrapped_sigmoid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.SigmoidFocalClassificationLoss weighted_sigmoid_focal = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_weighted_sigmoid_focal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss weighted_logits_softmax = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_weighted_logits_softmax()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ClassificationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClassificationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (classification_loss_case()) {
    case kWeightedSigmoid:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::weighted_sigmoid(this), output);
      break;
    case kWeightedSoftmax:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::weighted_softmax(this), output);
      break;
    case kBootstrappedSigmoid:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, _Internal::bootstrapped_sigmoid(this), output);
      break;
    case kWeightedSigmoidFocal:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, _Internal::weighted_sigmoid_focal(this), output);
      break;
    case kWeightedLogitsSoftmax:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, _Internal::weighted_logits_softmax(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ClassificationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassificationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (classification_loss_case()) {
    case kWeightedSigmoid:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, _Internal::weighted_sigmoid(this), target);
      break;
    case kWeightedSoftmax:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::weighted_softmax(this), target);
      break;
    case kBootstrappedSigmoid:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, _Internal::bootstrapped_sigmoid(this), target);
      break;
    case kWeightedSigmoidFocal:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, _Internal::weighted_sigmoid_focal(this), target);
      break;
    case kWeightedLogitsSoftmax:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, _Internal::weighted_logits_softmax(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ClassificationLoss)
  return target;
}

size_t ClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ClassificationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (classification_loss_case()) {
    // optional .object_detection.protos.WeightedSigmoidClassificationLoss weighted_sigmoid = 1;
    case kWeightedSigmoid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_loss_.weighted_sigmoid_);
      break;
    }
    // optional .object_detection.protos.WeightedSoftmaxClassificationLoss weighted_softmax = 2;
    case kWeightedSoftmax: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_loss_.weighted_softmax_);
      break;
    }
    // optional .object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss weighted_logits_softmax = 5;
    case kWeightedLogitsSoftmax: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_loss_.weighted_logits_softmax_);
      break;
    }
    // optional .object_detection.protos.BootstrappedSigmoidClassificationLoss bootstrapped_sigmoid = 3;
    case kBootstrappedSigmoid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_loss_.bootstrapped_sigmoid_);
      break;
    }
    // optional .object_detection.protos.SigmoidFocalClassificationLoss weighted_sigmoid_focal = 4;
    case kWeightedSigmoidFocal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classification_loss_.weighted_sigmoid_focal_);
      break;
    }
    case CLASSIFICATION_LOSS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassificationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassificationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassificationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ClassificationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ClassificationLoss)
    MergeFrom(*source);
  }
}

void ClassificationLoss::MergeFrom(const ClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.classification_loss_case()) {
    case kWeightedSigmoid: {
      mutable_weighted_sigmoid()->::object_detection::protos::WeightedSigmoidClassificationLoss::MergeFrom(from.weighted_sigmoid());
      break;
    }
    case kWeightedSoftmax: {
      mutable_weighted_softmax()->::object_detection::protos::WeightedSoftmaxClassificationLoss::MergeFrom(from.weighted_softmax());
      break;
    }
    case kWeightedLogitsSoftmax: {
      mutable_weighted_logits_softmax()->::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss::MergeFrom(from.weighted_logits_softmax());
      break;
    }
    case kBootstrappedSigmoid: {
      mutable_bootstrapped_sigmoid()->::object_detection::protos::BootstrappedSigmoidClassificationLoss::MergeFrom(from.bootstrapped_sigmoid());
      break;
    }
    case kWeightedSigmoidFocal: {
      mutable_weighted_sigmoid_focal()->::object_detection::protos::SigmoidFocalClassificationLoss::MergeFrom(from.weighted_sigmoid_focal());
      break;
    }
    case CLASSIFICATION_LOSS_NOT_SET: {
      break;
    }
  }
}

void ClassificationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassificationLoss::CopyFrom(const ClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassificationLoss::IsInitialized() const {
  return true;
}

void ClassificationLoss::InternalSwap(ClassificationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(classification_loss_, other->classification_loss_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassificationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WeightedSigmoidClassificationLoss::InitAsDefaultInstance() {
}
class WeightedSigmoidClassificationLoss::_Internal {
 public:
  using HasBits = decltype(std::declval<WeightedSigmoidClassificationLoss>()._has_bits_);
  static void set_has_anchorwise_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WeightedSigmoidClassificationLoss::WeightedSigmoidClassificationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.WeightedSigmoidClassificationLoss)
}
WeightedSigmoidClassificationLoss::WeightedSigmoidClassificationLoss(const WeightedSigmoidClassificationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  anchorwise_output_ = from.anchorwise_output_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.WeightedSigmoidClassificationLoss)
}

void WeightedSigmoidClassificationLoss::SharedCtor() {
  anchorwise_output_ = false;
}

WeightedSigmoidClassificationLoss::~WeightedSigmoidClassificationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.WeightedSigmoidClassificationLoss)
  SharedDtor();
}

void WeightedSigmoidClassificationLoss::SharedDtor() {
}

void WeightedSigmoidClassificationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeightedSigmoidClassificationLoss& WeightedSigmoidClassificationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeightedSigmoidClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void WeightedSigmoidClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.WeightedSigmoidClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anchorwise_output_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WeightedSigmoidClassificationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool anchorwise_output = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_anchorwise_output(&has_bits);
          anchorwise_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WeightedSigmoidClassificationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.WeightedSigmoidClassificationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool anchorwise_output = 1 [default = false];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_anchorwise_output(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.WeightedSigmoidClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.WeightedSigmoidClassificationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WeightedSigmoidClassificationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.WeightedSigmoidClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.WeightedSigmoidClassificationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* WeightedSigmoidClassificationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.WeightedSigmoidClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.WeightedSigmoidClassificationLoss)
  return target;
}

size_t WeightedSigmoidClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.WeightedSigmoidClassificationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool anchorwise_output = 1 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeightedSigmoidClassificationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.WeightedSigmoidClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedSigmoidClassificationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeightedSigmoidClassificationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.WeightedSigmoidClassificationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.WeightedSigmoidClassificationLoss)
    MergeFrom(*source);
  }
}

void WeightedSigmoidClassificationLoss::MergeFrom(const WeightedSigmoidClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.WeightedSigmoidClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_anchorwise_output()) {
    set_anchorwise_output(from.anchorwise_output());
  }
}

void WeightedSigmoidClassificationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.WeightedSigmoidClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedSigmoidClassificationLoss::CopyFrom(const WeightedSigmoidClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.WeightedSigmoidClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedSigmoidClassificationLoss::IsInitialized() const {
  return true;
}

void WeightedSigmoidClassificationLoss::InternalSwap(WeightedSigmoidClassificationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(anchorwise_output_, other->anchorwise_output_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeightedSigmoidClassificationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SigmoidFocalClassificationLoss::InitAsDefaultInstance() {
}
class SigmoidFocalClassificationLoss::_Internal {
 public:
  using HasBits = decltype(std::declval<SigmoidFocalClassificationLoss>()._has_bits_);
  static void set_has_anchorwise_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamma(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SigmoidFocalClassificationLoss::SigmoidFocalClassificationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SigmoidFocalClassificationLoss)
}
SigmoidFocalClassificationLoss::SigmoidFocalClassificationLoss(const SigmoidFocalClassificationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anchorwise_output_, &from.anchorwise_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamma_) -
    reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(gamma_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SigmoidFocalClassificationLoss)
}

void SigmoidFocalClassificationLoss::SharedCtor() {
  ::memset(&anchorwise_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_) -
      reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(alpha_));
  gamma_ = 2;
}

SigmoidFocalClassificationLoss::~SigmoidFocalClassificationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SigmoidFocalClassificationLoss)
  SharedDtor();
}

void SigmoidFocalClassificationLoss::SharedDtor() {
}

void SigmoidFocalClassificationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigmoidFocalClassificationLoss& SigmoidFocalClassificationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigmoidFocalClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void SigmoidFocalClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SigmoidFocalClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&anchorwise_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&alpha_) -
        reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(alpha_));
    gamma_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SigmoidFocalClassificationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool anchorwise_output = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_anchorwise_output(&has_bits);
          anchorwise_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float gamma = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_gamma(&has_bits);
          gamma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float alpha = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_alpha(&has_bits);
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SigmoidFocalClassificationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.SigmoidFocalClassificationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool anchorwise_output = 1 [default = false];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_anchorwise_output(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gamma = 2 [default = 2];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_gamma(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float alpha = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_alpha(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.SigmoidFocalClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.SigmoidFocalClassificationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SigmoidFocalClassificationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.SigmoidFocalClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  // optional float gamma = 2 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->gamma(), output);
  }

  // optional float alpha = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->alpha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.SigmoidFocalClassificationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* SigmoidFocalClassificationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SigmoidFocalClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  // optional float gamma = 2 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->gamma(), target);
  }

  // optional float alpha = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->alpha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SigmoidFocalClassificationLoss)
  return target;
}

size_t SigmoidFocalClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SigmoidFocalClassificationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool anchorwise_output = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float alpha = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float gamma = 2 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigmoidFocalClassificationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SigmoidFocalClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const SigmoidFocalClassificationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigmoidFocalClassificationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SigmoidFocalClassificationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SigmoidFocalClassificationLoss)
    MergeFrom(*source);
  }
}

void SigmoidFocalClassificationLoss::MergeFrom(const SigmoidFocalClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SigmoidFocalClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      anchorwise_output_ = from.anchorwise_output_;
    }
    if (cached_has_bits & 0x00000002u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00000004u) {
      gamma_ = from.gamma_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SigmoidFocalClassificationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SigmoidFocalClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigmoidFocalClassificationLoss::CopyFrom(const SigmoidFocalClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SigmoidFocalClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmoidFocalClassificationLoss::IsInitialized() const {
  return true;
}

void SigmoidFocalClassificationLoss::InternalSwap(SigmoidFocalClassificationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(alpha_, other->alpha_);
  swap(gamma_, other->gamma_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmoidFocalClassificationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WeightedSoftmaxClassificationLoss::InitAsDefaultInstance() {
}
class WeightedSoftmaxClassificationLoss::_Internal {
 public:
  using HasBits = decltype(std::declval<WeightedSoftmaxClassificationLoss>()._has_bits_);
  static void set_has_anchorwise_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_logit_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WeightedSoftmaxClassificationLoss::WeightedSoftmaxClassificationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.WeightedSoftmaxClassificationLoss)
}
WeightedSoftmaxClassificationLoss::WeightedSoftmaxClassificationLoss(const WeightedSoftmaxClassificationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anchorwise_output_, &from.anchorwise_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&logit_scale_) -
    reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(logit_scale_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.WeightedSoftmaxClassificationLoss)
}

void WeightedSoftmaxClassificationLoss::SharedCtor() {
  anchorwise_output_ = false;
  logit_scale_ = 1;
}

WeightedSoftmaxClassificationLoss::~WeightedSoftmaxClassificationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.WeightedSoftmaxClassificationLoss)
  SharedDtor();
}

void WeightedSoftmaxClassificationLoss::SharedDtor() {
}

void WeightedSoftmaxClassificationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeightedSoftmaxClassificationLoss& WeightedSoftmaxClassificationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeightedSoftmaxClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void WeightedSoftmaxClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.WeightedSoftmaxClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    anchorwise_output_ = false;
    logit_scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WeightedSoftmaxClassificationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool anchorwise_output = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_anchorwise_output(&has_bits);
          anchorwise_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float logit_scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_logit_scale(&has_bits);
          logit_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WeightedSoftmaxClassificationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.WeightedSoftmaxClassificationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool anchorwise_output = 1 [default = false];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_anchorwise_output(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float logit_scale = 2 [default = 1];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_logit_scale(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &logit_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.WeightedSoftmaxClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.WeightedSoftmaxClassificationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WeightedSoftmaxClassificationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.WeightedSoftmaxClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  // optional float logit_scale = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->logit_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.WeightedSoftmaxClassificationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* WeightedSoftmaxClassificationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.WeightedSoftmaxClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  // optional float logit_scale = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->logit_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.WeightedSoftmaxClassificationLoss)
  return target;
}

size_t WeightedSoftmaxClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.WeightedSoftmaxClassificationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool anchorwise_output = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float logit_scale = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeightedSoftmaxClassificationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.WeightedSoftmaxClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedSoftmaxClassificationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeightedSoftmaxClassificationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.WeightedSoftmaxClassificationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.WeightedSoftmaxClassificationLoss)
    MergeFrom(*source);
  }
}

void WeightedSoftmaxClassificationLoss::MergeFrom(const WeightedSoftmaxClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.WeightedSoftmaxClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      anchorwise_output_ = from.anchorwise_output_;
    }
    if (cached_has_bits & 0x00000002u) {
      logit_scale_ = from.logit_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WeightedSoftmaxClassificationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.WeightedSoftmaxClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedSoftmaxClassificationLoss::CopyFrom(const WeightedSoftmaxClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.WeightedSoftmaxClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedSoftmaxClassificationLoss::IsInitialized() const {
  return true;
}

void WeightedSoftmaxClassificationLoss::InternalSwap(WeightedSoftmaxClassificationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(logit_scale_, other->logit_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeightedSoftmaxClassificationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WeightedSoftmaxClassificationAgainstLogitsLoss::InitAsDefaultInstance() {
}
class WeightedSoftmaxClassificationAgainstLogitsLoss::_Internal {
 public:
  using HasBits = decltype(std::declval<WeightedSoftmaxClassificationAgainstLogitsLoss>()._has_bits_);
  static void set_has_anchorwise_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_logit_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WeightedSoftmaxClassificationAgainstLogitsLoss::WeightedSoftmaxClassificationAgainstLogitsLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
}
WeightedSoftmaxClassificationAgainstLogitsLoss::WeightedSoftmaxClassificationAgainstLogitsLoss(const WeightedSoftmaxClassificationAgainstLogitsLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anchorwise_output_, &from.anchorwise_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&logit_scale_) -
    reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(logit_scale_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
}

void WeightedSoftmaxClassificationAgainstLogitsLoss::SharedCtor() {
  anchorwise_output_ = false;
  logit_scale_ = 1;
}

WeightedSoftmaxClassificationAgainstLogitsLoss::~WeightedSoftmaxClassificationAgainstLogitsLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  SharedDtor();
}

void WeightedSoftmaxClassificationAgainstLogitsLoss::SharedDtor() {
}

void WeightedSoftmaxClassificationAgainstLogitsLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeightedSoftmaxClassificationAgainstLogitsLoss& WeightedSoftmaxClassificationAgainstLogitsLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeightedSoftmaxClassificationAgainstLogitsLoss_object_5fdetection_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void WeightedSoftmaxClassificationAgainstLogitsLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    anchorwise_output_ = false;
    logit_scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WeightedSoftmaxClassificationAgainstLogitsLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool anchorwise_output = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_anchorwise_output(&has_bits);
          anchorwise_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float logit_scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_logit_scale(&has_bits);
          logit_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WeightedSoftmaxClassificationAgainstLogitsLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool anchorwise_output = 1 [default = false];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_anchorwise_output(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float logit_scale = 2 [default = 1];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_logit_scale(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &logit_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WeightedSoftmaxClassificationAgainstLogitsLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  // optional float logit_scale = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->logit_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* WeightedSoftmaxClassificationAgainstLogitsLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  // optional float logit_scale = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->logit_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  return target;
}

size_t WeightedSoftmaxClassificationAgainstLogitsLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool anchorwise_output = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float logit_scale = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeightedSoftmaxClassificationAgainstLogitsLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedSoftmaxClassificationAgainstLogitsLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeightedSoftmaxClassificationAgainstLogitsLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
    MergeFrom(*source);
  }
}

void WeightedSoftmaxClassificationAgainstLogitsLoss::MergeFrom(const WeightedSoftmaxClassificationAgainstLogitsLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      anchorwise_output_ = from.anchorwise_output_;
    }
    if (cached_has_bits & 0x00000002u) {
      logit_scale_ = from.logit_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WeightedSoftmaxClassificationAgainstLogitsLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedSoftmaxClassificationAgainstLogitsLoss::CopyFrom(const WeightedSoftmaxClassificationAgainstLogitsLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedSoftmaxClassificationAgainstLogitsLoss::IsInitialized() const {
  return true;
}

void WeightedSoftmaxClassificationAgainstLogitsLoss::InternalSwap(WeightedSoftmaxClassificationAgainstLogitsLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(logit_scale_, other->logit_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeightedSoftmaxClassificationAgainstLogitsLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BootstrappedSigmoidClassificationLoss::InitAsDefaultInstance() {
}
class BootstrappedSigmoidClassificationLoss::_Internal {
 public:
  using HasBits = decltype(std::declval<BootstrappedSigmoidClassificationLoss>()._has_bits_);
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hard_bootstrap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_anchorwise_output(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BootstrappedSigmoidClassificationLoss::BootstrappedSigmoidClassificationLoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.BootstrappedSigmoidClassificationLoss)
}
BootstrappedSigmoidClassificationLoss::BootstrappedSigmoidClassificationLoss(const BootstrappedSigmoidClassificationLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&anchorwise_output_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(anchorwise_output_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.BootstrappedSigmoidClassificationLoss)
}

void BootstrappedSigmoidClassificationLoss::SharedCtor() {
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anchorwise_output_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(anchorwise_output_));
}

BootstrappedSigmoidClassificationLoss::~BootstrappedSigmoidClassificationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  SharedDtor();
}

void BootstrappedSigmoidClassificationLoss::SharedDtor() {
}

void BootstrappedSigmoidClassificationLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BootstrappedSigmoidClassificationLoss& BootstrappedSigmoidClassificationLoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BootstrappedSigmoidClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void BootstrappedSigmoidClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&alpha_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&anchorwise_output_) -
        reinterpret_cast<char*>(&alpha_)) + sizeof(anchorwise_output_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BootstrappedSigmoidClassificationLoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_alpha(&has_bits);
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool hard_bootstrap = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hard_bootstrap(&has_bits);
          hard_bootstrap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool anchorwise_output = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_anchorwise_output(&has_bits);
          anchorwise_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BootstrappedSigmoidClassificationLoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float alpha = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_alpha(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hard_bootstrap = 2 [default = false];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_hard_bootstrap(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hard_bootstrap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool anchorwise_output = 3 [default = false];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_anchorwise_output(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BootstrappedSigmoidClassificationLoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float alpha = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  // optional bool hard_bootstrap = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->hard_bootstrap(), output);
  }

  // optional bool anchorwise_output = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->anchorwise_output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.BootstrappedSigmoidClassificationLoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* BootstrappedSigmoidClassificationLoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float alpha = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  // optional bool hard_bootstrap = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->hard_bootstrap(), target);
  }

  // optional bool anchorwise_output = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->anchorwise_output(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  return target;
}

size_t BootstrappedSigmoidClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float alpha = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional bool hard_bootstrap = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool anchorwise_output = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BootstrappedSigmoidClassificationLoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const BootstrappedSigmoidClassificationLoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BootstrappedSigmoidClassificationLoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.BootstrappedSigmoidClassificationLoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.BootstrappedSigmoidClassificationLoss)
    MergeFrom(*source);
  }
}

void BootstrappedSigmoidClassificationLoss::MergeFrom(const BootstrappedSigmoidClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00000002u) {
      hard_bootstrap_ = from.hard_bootstrap_;
    }
    if (cached_has_bits & 0x00000004u) {
      anchorwise_output_ = from.anchorwise_output_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BootstrappedSigmoidClassificationLoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrappedSigmoidClassificationLoss::CopyFrom(const BootstrappedSigmoidClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BootstrappedSigmoidClassificationLoss::IsInitialized() const {
  return true;
}

void BootstrappedSigmoidClassificationLoss::InternalSwap(BootstrappedSigmoidClassificationLoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(alpha_, other->alpha_);
  swap(hard_bootstrap_, other->hard_bootstrap_);
  swap(anchorwise_output_, other->anchorwise_output_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BootstrappedSigmoidClassificationLoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HardExampleMiner::InitAsDefaultInstance() {
}
class HardExampleMiner::_Internal {
 public:
  using HasBits = decltype(std::declval<HardExampleMiner>()._has_bits_);
  static void set_has_num_hard_examples(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_iou_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_loss_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_negatives_per_positive(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_negatives_per_image(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

HardExampleMiner::HardExampleMiner()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.HardExampleMiner)
}
HardExampleMiner::HardExampleMiner(const HardExampleMiner& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&loss_type_, &from.loss_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&iou_threshold_) -
    reinterpret_cast<char*>(&loss_type_)) + sizeof(iou_threshold_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.HardExampleMiner)
}

void HardExampleMiner::SharedCtor() {
  ::memset(&loss_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_negatives_per_image_) -
      reinterpret_cast<char*>(&loss_type_)) + sizeof(min_negatives_per_image_));
  num_hard_examples_ = 64;
  iou_threshold_ = 0.7f;
}

HardExampleMiner::~HardExampleMiner() {
  // @@protoc_insertion_point(destructor:object_detection.protos.HardExampleMiner)
  SharedDtor();
}

void HardExampleMiner::SharedDtor() {
}

void HardExampleMiner::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HardExampleMiner& HardExampleMiner::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HardExampleMiner_object_5fdetection_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void HardExampleMiner::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.HardExampleMiner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&loss_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_negatives_per_image_) -
        reinterpret_cast<char*>(&loss_type_)) + sizeof(min_negatives_per_image_));
    num_hard_examples_ = 64;
    iou_threshold_ = 0.7f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HardExampleMiner::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num_hard_examples = 1 [default = 64];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_hard_examples(&has_bits);
          num_hard_examples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float iou_threshold = 2 [default = 0.7];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_iou_threshold(&has_bits);
          iou_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.HardExampleMiner.LossType loss_type = 3 [default = BOTH];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::object_detection::protos::HardExampleMiner_LossType_IsValid(val))) {
            set_loss_type(static_cast<::object_detection::protos::HardExampleMiner_LossType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 max_negatives_per_positive = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_negatives_per_positive(&has_bits);
          max_negatives_per_positive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_negatives_per_image = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_min_negatives_per_image(&has_bits);
          min_negatives_per_image_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HardExampleMiner::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.HardExampleMiner)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_hard_examples = 1 [default = 64];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num_hard_examples(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_hard_examples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float iou_threshold = 2 [default = 0.7];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_iou_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &iou_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.HardExampleMiner.LossType loss_type = 3 [default = BOTH];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::HardExampleMiner_LossType_IsValid(value)) {
            set_loss_type(static_cast< ::object_detection::protos::HardExampleMiner_LossType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_negatives_per_positive = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_max_negatives_per_positive(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_negatives_per_positive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_negatives_per_image = 5 [default = 0];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_min_negatives_per_image(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_negatives_per_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.HardExampleMiner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.HardExampleMiner)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HardExampleMiner::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.HardExampleMiner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_hard_examples = 1 [default = 64];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_hard_examples(), output);
  }

  // optional float iou_threshold = 2 [default = 0.7];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->iou_threshold(), output);
  }

  // optional .object_detection.protos.HardExampleMiner.LossType loss_type = 3 [default = BOTH];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->loss_type(), output);
  }

  // optional int32 max_negatives_per_positive = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->max_negatives_per_positive(), output);
  }

  // optional int32 min_negatives_per_image = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->min_negatives_per_image(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.HardExampleMiner)
}

::PROTOBUF_NAMESPACE_ID::uint8* HardExampleMiner::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.HardExampleMiner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_hard_examples = 1 [default = 64];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->num_hard_examples(), target);
  }

  // optional float iou_threshold = 2 [default = 0.7];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->iou_threshold(), target);
  }

  // optional .object_detection.protos.HardExampleMiner.LossType loss_type = 3 [default = BOTH];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->loss_type(), target);
  }

  // optional int32 max_negatives_per_positive = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->max_negatives_per_positive(), target);
  }

  // optional int32 min_negatives_per_image = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->min_negatives_per_image(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.HardExampleMiner)
  return target;
}

size_t HardExampleMiner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.HardExampleMiner)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .object_detection.protos.HardExampleMiner.LossType loss_type = 3 [default = BOTH];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->loss_type());
    }

    // optional int32 max_negatives_per_positive = 4 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_negatives_per_positive());
    }

    // optional int32 min_negatives_per_image = 5 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->min_negatives_per_image());
    }

    // optional int32 num_hard_examples = 1 [default = 64];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_hard_examples());
    }

    // optional float iou_threshold = 2 [default = 0.7];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HardExampleMiner::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.HardExampleMiner)
  GOOGLE_DCHECK_NE(&from, this);
  const HardExampleMiner* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HardExampleMiner>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.HardExampleMiner)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.HardExampleMiner)
    MergeFrom(*source);
  }
}

void HardExampleMiner::MergeFrom(const HardExampleMiner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.HardExampleMiner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      loss_type_ = from.loss_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_negatives_per_positive_ = from.max_negatives_per_positive_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_negatives_per_image_ = from.min_negatives_per_image_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_hard_examples_ = from.num_hard_examples_;
    }
    if (cached_has_bits & 0x00000010u) {
      iou_threshold_ = from.iou_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HardExampleMiner::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.HardExampleMiner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardExampleMiner::CopyFrom(const HardExampleMiner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.HardExampleMiner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardExampleMiner::IsInitialized() const {
  return true;
}

void HardExampleMiner::InternalSwap(HardExampleMiner* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(loss_type_, other->loss_type_);
  swap(max_negatives_per_positive_, other->max_negatives_per_positive_);
  swap(min_negatives_per_image_, other->min_negatives_per_image_);
  swap(num_hard_examples_, other->num_hard_examples_);
  swap(iou_threshold_, other->iou_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HardExampleMiner::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomExampleSampler::InitAsDefaultInstance() {
}
class RandomExampleSampler::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomExampleSampler>()._has_bits_);
  static void set_has_positive_sample_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RandomExampleSampler::RandomExampleSampler()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomExampleSampler)
}
RandomExampleSampler::RandomExampleSampler(const RandomExampleSampler& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  positive_sample_fraction_ = from.positive_sample_fraction_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomExampleSampler)
}

void RandomExampleSampler::SharedCtor() {
  positive_sample_fraction_ = 0.01f;
}

RandomExampleSampler::~RandomExampleSampler() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomExampleSampler)
  SharedDtor();
}

void RandomExampleSampler::SharedDtor() {
}

void RandomExampleSampler::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomExampleSampler& RandomExampleSampler::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomExampleSampler_object_5fdetection_2fprotos_2flosses_2eproto.base);
  return *internal_default_instance();
}


void RandomExampleSampler::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomExampleSampler)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positive_sample_fraction_ = 0.01f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RandomExampleSampler::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float positive_sample_fraction = 1 [default = 0.01];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_positive_sample_fraction(&has_bits);
          positive_sample_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RandomExampleSampler::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomExampleSampler)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float positive_sample_fraction = 1 [default = 0.01];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_positive_sample_fraction(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_sample_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomExampleSampler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomExampleSampler)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RandomExampleSampler::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomExampleSampler)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float positive_sample_fraction = 1 [default = 0.01];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->positive_sample_fraction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomExampleSampler)
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomExampleSampler::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomExampleSampler)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float positive_sample_fraction = 1 [default = 0.01];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->positive_sample_fraction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomExampleSampler)
  return target;
}

size_t RandomExampleSampler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomExampleSampler)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float positive_sample_fraction = 1 [default = 0.01];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomExampleSampler::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomExampleSampler)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomExampleSampler* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomExampleSampler>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomExampleSampler)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomExampleSampler)
    MergeFrom(*source);
  }
}

void RandomExampleSampler::MergeFrom(const RandomExampleSampler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomExampleSampler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_positive_sample_fraction()) {
    set_positive_sample_fraction(from.positive_sample_fraction());
  }
}

void RandomExampleSampler::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomExampleSampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomExampleSampler::CopyFrom(const RandomExampleSampler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomExampleSampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomExampleSampler::IsInitialized() const {
  return true;
}

void RandomExampleSampler::InternalSwap(RandomExampleSampler* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(positive_sample_fraction_, other->positive_sample_fraction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomExampleSampler::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::object_detection::protos::Loss_EqualizationLoss* Arena::CreateMaybeMessage< ::object_detection::protos::Loss_EqualizationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::Loss_EqualizationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::Loss* Arena::CreateMaybeMessage< ::object_detection::protos::Loss >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::Loss >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::LocalizationLoss* Arena::CreateMaybeMessage< ::object_detection::protos::LocalizationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::LocalizationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::WeightedL2LocalizationLoss* Arena::CreateMaybeMessage< ::object_detection::protos::WeightedL2LocalizationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::WeightedL2LocalizationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::WeightedSmoothL1LocalizationLoss* Arena::CreateMaybeMessage< ::object_detection::protos::WeightedSmoothL1LocalizationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::WeightedSmoothL1LocalizationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::WeightedIOULocalizationLoss* Arena::CreateMaybeMessage< ::object_detection::protos::WeightedIOULocalizationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::WeightedIOULocalizationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::ClassificationLoss* Arena::CreateMaybeMessage< ::object_detection::protos::ClassificationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::ClassificationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::WeightedSigmoidClassificationLoss* Arena::CreateMaybeMessage< ::object_detection::protos::WeightedSigmoidClassificationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::WeightedSigmoidClassificationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::SigmoidFocalClassificationLoss* Arena::CreateMaybeMessage< ::object_detection::protos::SigmoidFocalClassificationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::SigmoidFocalClassificationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::WeightedSoftmaxClassificationLoss* Arena::CreateMaybeMessage< ::object_detection::protos::WeightedSoftmaxClassificationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::WeightedSoftmaxClassificationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss* Arena::CreateMaybeMessage< ::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::BootstrappedSigmoidClassificationLoss* Arena::CreateMaybeMessage< ::object_detection::protos::BootstrappedSigmoidClassificationLoss >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::BootstrappedSigmoidClassificationLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::HardExampleMiner* Arena::CreateMaybeMessage< ::object_detection::protos::HardExampleMiner >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::HardExampleMiner >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomExampleSampler* Arena::CreateMaybeMessage< ::object_detection::protos::RandomExampleSampler >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomExampleSampler >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
