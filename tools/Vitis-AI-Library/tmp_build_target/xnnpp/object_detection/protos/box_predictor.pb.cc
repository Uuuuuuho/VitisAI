// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/box_predictor.proto

#include "object_detection/protos/box_predictor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConvolutionalBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConvolutionalBoxPredictor_BoxEncodingsClipRange_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fhyperparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Hyperparams_object_5fdetection_2fprotos_2fhyperparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MaskRCNNBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RfcnBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WeightSharedConvolutionalBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto;
namespace object_detection {
namespace protos {
class BoxPredictorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoxPredictor> _instance;
  const ::object_detection::protos::ConvolutionalBoxPredictor* convolutional_box_predictor_;
  const ::object_detection::protos::MaskRCNNBoxPredictor* mask_rcnn_box_predictor_;
  const ::object_detection::protos::RfcnBoxPredictor* rfcn_box_predictor_;
  const ::object_detection::protos::WeightSharedConvolutionalBoxPredictor* weight_shared_convolutional_box_predictor_;
} _BoxPredictor_default_instance_;
class ConvolutionalBoxPredictor_BoxEncodingsClipRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConvolutionalBoxPredictor_BoxEncodingsClipRange> _instance;
} _ConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_;
class ConvolutionalBoxPredictorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConvolutionalBoxPredictor> _instance;
} _ConvolutionalBoxPredictor_default_instance_;
class WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange> _instance;
} _WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_;
class WeightSharedConvolutionalBoxPredictorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeightSharedConvolutionalBoxPredictor> _instance;
} _WeightSharedConvolutionalBoxPredictor_default_instance_;
class MaskRCNNBoxPredictorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MaskRCNNBoxPredictor> _instance;
} _MaskRCNNBoxPredictor_default_instance_;
class RfcnBoxPredictorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RfcnBoxPredictor> _instance;
} _RfcnBoxPredictor_default_instance_;
}  // namespace protos
}  // namespace object_detection
static void InitDefaultsscc_info_BoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_BoxPredictor_default_instance_;
    new (ptr) ::object_detection::protos::BoxPredictor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::BoxPredictor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_BoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto}, {
      &scc_info_ConvolutionalBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base,
      &scc_info_MaskRCNNBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base,
      &scc_info_RfcnBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base,
      &scc_info_WeightSharedConvolutionalBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base,}};

static void InitDefaultsscc_info_ConvolutionalBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_ConvolutionalBoxPredictor_default_instance_;
    new (ptr) ::object_detection::protos::ConvolutionalBoxPredictor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::ConvolutionalBoxPredictor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConvolutionalBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ConvolutionalBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto}, {
      &scc_info_Hyperparams_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
      &scc_info_ConvolutionalBoxPredictor_BoxEncodingsClipRange_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base,}};

static void InitDefaultsscc_info_ConvolutionalBoxPredictor_BoxEncodingsClipRange_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_ConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_;
    new (ptr) ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConvolutionalBoxPredictor_BoxEncodingsClipRange_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConvolutionalBoxPredictor_BoxEncodingsClipRange_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto}, {}};

static void InitDefaultsscc_info_MaskRCNNBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_MaskRCNNBoxPredictor_default_instance_;
    new (ptr) ::object_detection::protos::MaskRCNNBoxPredictor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::MaskRCNNBoxPredictor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MaskRCNNBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MaskRCNNBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto}, {
      &scc_info_Hyperparams_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,}};

static void InitDefaultsscc_info_RfcnBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RfcnBoxPredictor_default_instance_;
    new (ptr) ::object_detection::protos::RfcnBoxPredictor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RfcnBoxPredictor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RfcnBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RfcnBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto}, {
      &scc_info_Hyperparams_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,}};

static void InitDefaultsscc_info_WeightSharedConvolutionalBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_WeightSharedConvolutionalBoxPredictor_default_instance_;
    new (ptr) ::object_detection::protos::WeightSharedConvolutionalBoxPredictor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::WeightSharedConvolutionalBoxPredictor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WeightSharedConvolutionalBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_WeightSharedConvolutionalBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto}, {
      &scc_info_Hyperparams_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
      &scc_info_WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base,}};

static void InitDefaultsscc_info_WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_;
    new (ptr) ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BoxPredictor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BoxPredictor, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BoxPredictor, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::object_detection::protos::BoxPredictorDefaultTypeInternal, convolutional_box_predictor_),
  offsetof(::object_detection::protos::BoxPredictorDefaultTypeInternal, mask_rcnn_box_predictor_),
  offsetof(::object_detection::protos::BoxPredictorDefaultTypeInternal, rfcn_box_predictor_),
  offsetof(::object_detection::protos::BoxPredictorDefaultTypeInternal, weight_shared_convolutional_box_predictor_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BoxPredictor, box_predictor_oneof_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange, min_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange, max_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvolutionalBoxPredictor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvolutionalBoxPredictor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvolutionalBoxPredictor, conv_hyperparams_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvolutionalBoxPredictor, min_depth_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvolutionalBoxPredictor, max_depth_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvolutionalBoxPredictor, num_layers_before_predictor_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvolutionalBoxPredictor, use_dropout_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvolutionalBoxPredictor, dropout_keep_probability_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvolutionalBoxPredictor, kernel_size_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvolutionalBoxPredictor, box_code_size_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvolutionalBoxPredictor, apply_sigmoid_to_scores_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvolutionalBoxPredictor, class_prediction_bias_init_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvolutionalBoxPredictor, use_depthwise_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvolutionalBoxPredictor, box_encodings_clip_range_),
  0,
  2,
  3,
  4,
  8,
  9,
  10,
  11,
  6,
  5,
  7,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange, min_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange, max_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightSharedConvolutionalBoxPredictor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightSharedConvolutionalBoxPredictor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightSharedConvolutionalBoxPredictor, conv_hyperparams_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightSharedConvolutionalBoxPredictor, num_layers_before_predictor_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightSharedConvolutionalBoxPredictor, depth_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightSharedConvolutionalBoxPredictor, kernel_size_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightSharedConvolutionalBoxPredictor, box_code_size_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightSharedConvolutionalBoxPredictor, class_prediction_bias_init_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightSharedConvolutionalBoxPredictor, use_dropout_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightSharedConvolutionalBoxPredictor, dropout_keep_probability_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightSharedConvolutionalBoxPredictor, share_prediction_tower_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightSharedConvolutionalBoxPredictor, use_depthwise_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightSharedConvolutionalBoxPredictor, score_converter_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::WeightSharedConvolutionalBoxPredictor, box_encodings_clip_range_),
  0,
  3,
  2,
  10,
  11,
  4,
  5,
  9,
  6,
  7,
  8,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MaskRCNNBoxPredictor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MaskRCNNBoxPredictor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MaskRCNNBoxPredictor, fc_hyperparams_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MaskRCNNBoxPredictor, use_dropout_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MaskRCNNBoxPredictor, dropout_keep_probability_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MaskRCNNBoxPredictor, box_code_size_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MaskRCNNBoxPredictor, conv_hyperparams_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MaskRCNNBoxPredictor, predict_instance_masks_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MaskRCNNBoxPredictor, mask_prediction_conv_depth_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MaskRCNNBoxPredictor, predict_keypoints_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MaskRCNNBoxPredictor, mask_height_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MaskRCNNBoxPredictor, mask_width_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MaskRCNNBoxPredictor, mask_prediction_num_conv_layers_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MaskRCNNBoxPredictor, masks_are_class_agnostic_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MaskRCNNBoxPredictor, share_box_across_classes_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MaskRCNNBoxPredictor, convolve_then_upsample_masks_),
  0,
  2,
  8,
  9,
  1,
  3,
  10,
  4,
  11,
  12,
  13,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RfcnBoxPredictor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RfcnBoxPredictor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RfcnBoxPredictor, conv_hyperparams_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RfcnBoxPredictor, num_spatial_bins_height_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RfcnBoxPredictor, num_spatial_bins_width_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RfcnBoxPredictor, depth_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RfcnBoxPredictor, box_code_size_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RfcnBoxPredictor, crop_height_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RfcnBoxPredictor, crop_width_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::object_detection::protos::BoxPredictor)},
  { 14, 21, sizeof(::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange)},
  { 23, 40, sizeof(::object_detection::protos::ConvolutionalBoxPredictor)},
  { 52, 59, sizeof(::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange)},
  { 61, 78, sizeof(::object_detection::protos::WeightSharedConvolutionalBoxPredictor)},
  { 90, 109, sizeof(::object_detection::protos::MaskRCNNBoxPredictor)},
  { 123, 135, sizeof(::object_detection::protos::RfcnBoxPredictor)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_BoxPredictor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_ConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_ConvolutionalBoxPredictor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_WeightSharedConvolutionalBoxPredictor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_MaskRCNNBoxPredictor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RfcnBoxPredictor_default_instance_),
};

const char descriptor_table_protodef_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+object_detection/protos/box_predictor."
  "proto\022\027object_detection.protos\032)object_d"
  "etection/protos/hyperparams.proto\"\220\003\n\014Bo"
  "xPredictor\022Y\n\033convolutional_box_predicto"
  "r\030\001 \001(\01322.object_detection.protos.Convol"
  "utionalBoxPredictorH\000\022P\n\027mask_rcnn_box_p"
  "redictor\030\002 \001(\0132-.object_detection.protos"
  ".MaskRCNNBoxPredictorH\000\022G\n\022rfcn_box_pred"
  "ictor\030\003 \001(\0132).object_detection.protos.Rf"
  "cnBoxPredictorH\000\022s\n)weight_shared_convol"
  "utional_box_predictor\030\004 \001(\0132>.object_det"
  "ection.protos.WeightSharedConvolutionalB"
  "oxPredictorH\000B\025\n\023box_predictor_oneof\"\257\004\n"
  "\031ConvolutionalBoxPredictor\022>\n\020conv_hyper"
  "params\030\001 \001(\0132$.object_detection.protos.H"
  "yperparams\022\024\n\tmin_depth\030\002 \001(\005:\0010\022\024\n\tmax_"
  "depth\030\003 \001(\005:\0010\022&\n\033num_layers_before_pred"
  "ictor\030\004 \001(\005:\0010\022\031\n\013use_dropout\030\005 \001(\010:\004tru"
  "e\022%\n\030dropout_keep_probability\030\006 \001(\002:\0030.8"
  "\022\026\n\013kernel_size\030\007 \001(\005:\0011\022\030\n\rbox_code_siz"
  "e\030\010 \001(\005:\0014\022&\n\027apply_sigmoid_to_scores\030\t "
  "\001(\010:\005false\022%\n\032class_prediction_bias_init"
  "\030\n \001(\002:\0010\022\034\n\ruse_depthwise\030\013 \001(\010:\005false\022"
  "j\n\030box_encodings_clip_range\030\014 \001(\0132H.obje"
  "ct_detection.protos.ConvolutionalBoxPred"
  "ictor.BoxEncodingsClipRange\0321\n\025BoxEncodi"
  "ngsClipRange\022\013\n\003min\030\001 \001(\002\022\013\n\003max\030\002 \001(\002\"\314"
  "\005\n%WeightSharedConvolutionalBoxPredictor"
  "\022>\n\020conv_hyperparams\030\001 \001(\0132$.object_dete"
  "ction.protos.Hyperparams\022&\n\033num_layers_b"
  "efore_predictor\030\004 \001(\005:\0010\022\020\n\005depth\030\002 \001(\005:"
  "\0010\022\026\n\013kernel_size\030\007 \001(\005:\0013\022\030\n\rbox_code_s"
  "ize\030\010 \001(\005:\0014\022%\n\032class_prediction_bias_in"
  "it\030\n \001(\002:\0010\022\032\n\013use_dropout\030\013 \001(\010:\005false\022"
  "%\n\030dropout_keep_probability\030\014 \001(\002:\0030.8\022%"
  "\n\026share_prediction_tower\030\r \001(\010:\005false\022\034\n"
  "\ruse_depthwise\030\016 \001(\010:\005false\022p\n\017score_con"
  "verter\030\020 \001(\0162M.object_detection.protos.W"
  "eightSharedConvolutionalBoxPredictor.Sco"
  "reConverter:\010IDENTITY\022v\n\030box_encodings_c"
  "lip_range\030\021 \001(\0132T.object_detection.proto"
  "s.WeightSharedConvolutionalBoxPredictor."
  "BoxEncodingsClipRange\0321\n\025BoxEncodingsCli"
  "pRange\022\013\n\003min\030\001 \001(\002\022\013\n\003max\030\002 \001(\002\"+\n\016Scor"
  "eConverter\022\014\n\010IDENTITY\020\000\022\013\n\007SIGMOID\020\001\"\277\004"
  "\n\024MaskRCNNBoxPredictor\022<\n\016fc_hyperparams"
  "\030\001 \001(\0132$.object_detection.protos.Hyperpa"
  "rams\022\032\n\013use_dropout\030\002 \001(\010:\005false\022%\n\030drop"
  "out_keep_probability\030\003 \001(\002:\0030.5\022\030\n\rbox_c"
  "ode_size\030\004 \001(\005:\0014\022>\n\020conv_hyperparams\030\005 "
  "\001(\0132$.object_detection.protos.Hyperparam"
  "s\022%\n\026predict_instance_masks\030\006 \001(\010:\005false"
  "\022\'\n\032mask_prediction_conv_depth\030\007 \001(\005:\00325"
  "6\022 \n\021predict_keypoints\030\010 \001(\010:\005false\022\027\n\013m"
  "ask_height\030\t \001(\005:\00215\022\026\n\nmask_width\030\n \001(\005"
  ":\00215\022*\n\037mask_prediction_num_conv_layers\030"
  "\013 \001(\005:\0012\022\'\n\030masks_are_class_agnostic\030\014 \001"
  "(\010:\005false\022\'\n\030share_box_across_classes\030\r "
  "\001(\010:\005false\022+\n\034convolve_then_upsample_mas"
  "ks\030\016 \001(\010:\005false\"\371\001\n\020RfcnBoxPredictor\022>\n\020"
  "conv_hyperparams\030\001 \001(\0132$.object_detectio"
  "n.protos.Hyperparams\022\"\n\027num_spatial_bins"
  "_height\030\002 \001(\005:\0013\022!\n\026num_spatial_bins_wid"
  "th\030\003 \001(\005:\0013\022\023\n\005depth\030\004 \001(\005:\0041024\022\030\n\rbox_"
  "code_size\030\005 \001(\005:\0014\022\027\n\013crop_height\030\006 \001(\005:"
  "\00212\022\026\n\ncrop_width\030\007 \001(\005:\00212"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto_deps[1] = {
  &::descriptor_table_object_5fdetection_2fprotos_2fhyperparams_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto_sccs[7] = {
  &scc_info_BoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base,
  &scc_info_ConvolutionalBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base,
  &scc_info_ConvolutionalBoxPredictor_BoxEncodingsClipRange_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base,
  &scc_info_MaskRCNNBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base,
  &scc_info_RfcnBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base,
  &scc_info_WeightSharedConvolutionalBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base,
  &scc_info_WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto_once;
static bool descriptor_table_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto = {
  &descriptor_table_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto_initialized, descriptor_table_protodef_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto, "object_detection/protos/box_predictor.proto", 2627,
  &descriptor_table_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto_once, descriptor_table_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto_sccs, descriptor_table_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::offsets,
  file_level_metadata_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto, 7, file_level_enum_descriptors_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto, file_level_service_descriptors_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto), true);
namespace object_detection {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WeightSharedConvolutionalBoxPredictor_ScoreConverter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto);
  return file_level_enum_descriptors_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto[0];
}
bool WeightSharedConvolutionalBoxPredictor_ScoreConverter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WeightSharedConvolutionalBoxPredictor_ScoreConverter WeightSharedConvolutionalBoxPredictor::IDENTITY;
constexpr WeightSharedConvolutionalBoxPredictor_ScoreConverter WeightSharedConvolutionalBoxPredictor::SIGMOID;
constexpr WeightSharedConvolutionalBoxPredictor_ScoreConverter WeightSharedConvolutionalBoxPredictor::ScoreConverter_MIN;
constexpr WeightSharedConvolutionalBoxPredictor_ScoreConverter WeightSharedConvolutionalBoxPredictor::ScoreConverter_MAX;
constexpr int WeightSharedConvolutionalBoxPredictor::ScoreConverter_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void BoxPredictor::InitAsDefaultInstance() {
  ::object_detection::protos::_BoxPredictor_default_instance_.convolutional_box_predictor_ = const_cast< ::object_detection::protos::ConvolutionalBoxPredictor*>(
      ::object_detection::protos::ConvolutionalBoxPredictor::internal_default_instance());
  ::object_detection::protos::_BoxPredictor_default_instance_.mask_rcnn_box_predictor_ = const_cast< ::object_detection::protos::MaskRCNNBoxPredictor*>(
      ::object_detection::protos::MaskRCNNBoxPredictor::internal_default_instance());
  ::object_detection::protos::_BoxPredictor_default_instance_.rfcn_box_predictor_ = const_cast< ::object_detection::protos::RfcnBoxPredictor*>(
      ::object_detection::protos::RfcnBoxPredictor::internal_default_instance());
  ::object_detection::protos::_BoxPredictor_default_instance_.weight_shared_convolutional_box_predictor_ = const_cast< ::object_detection::protos::WeightSharedConvolutionalBoxPredictor*>(
      ::object_detection::protos::WeightSharedConvolutionalBoxPredictor::internal_default_instance());
}
class BoxPredictor::_Internal {
 public:
  using HasBits = decltype(std::declval<BoxPredictor>()._has_bits_);
  static const ::object_detection::protos::ConvolutionalBoxPredictor& convolutional_box_predictor(const BoxPredictor* msg);
  static const ::object_detection::protos::MaskRCNNBoxPredictor& mask_rcnn_box_predictor(const BoxPredictor* msg);
  static const ::object_detection::protos::RfcnBoxPredictor& rfcn_box_predictor(const BoxPredictor* msg);
  static const ::object_detection::protos::WeightSharedConvolutionalBoxPredictor& weight_shared_convolutional_box_predictor(const BoxPredictor* msg);
};

const ::object_detection::protos::ConvolutionalBoxPredictor&
BoxPredictor::_Internal::convolutional_box_predictor(const BoxPredictor* msg) {
  return *msg->box_predictor_oneof_.convolutional_box_predictor_;
}
const ::object_detection::protos::MaskRCNNBoxPredictor&
BoxPredictor::_Internal::mask_rcnn_box_predictor(const BoxPredictor* msg) {
  return *msg->box_predictor_oneof_.mask_rcnn_box_predictor_;
}
const ::object_detection::protos::RfcnBoxPredictor&
BoxPredictor::_Internal::rfcn_box_predictor(const BoxPredictor* msg) {
  return *msg->box_predictor_oneof_.rfcn_box_predictor_;
}
const ::object_detection::protos::WeightSharedConvolutionalBoxPredictor&
BoxPredictor::_Internal::weight_shared_convolutional_box_predictor(const BoxPredictor* msg) {
  return *msg->box_predictor_oneof_.weight_shared_convolutional_box_predictor_;
}
void BoxPredictor::set_allocated_convolutional_box_predictor(::object_detection::protos::ConvolutionalBoxPredictor* convolutional_box_predictor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_box_predictor_oneof();
  if (convolutional_box_predictor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      convolutional_box_predictor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convolutional_box_predictor, submessage_arena);
    }
    set_has_convolutional_box_predictor();
    box_predictor_oneof_.convolutional_box_predictor_ = convolutional_box_predictor;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.BoxPredictor.convolutional_box_predictor)
}
void BoxPredictor::set_allocated_mask_rcnn_box_predictor(::object_detection::protos::MaskRCNNBoxPredictor* mask_rcnn_box_predictor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_box_predictor_oneof();
  if (mask_rcnn_box_predictor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mask_rcnn_box_predictor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask_rcnn_box_predictor, submessage_arena);
    }
    set_has_mask_rcnn_box_predictor();
    box_predictor_oneof_.mask_rcnn_box_predictor_ = mask_rcnn_box_predictor;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.BoxPredictor.mask_rcnn_box_predictor)
}
void BoxPredictor::set_allocated_rfcn_box_predictor(::object_detection::protos::RfcnBoxPredictor* rfcn_box_predictor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_box_predictor_oneof();
  if (rfcn_box_predictor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rfcn_box_predictor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rfcn_box_predictor, submessage_arena);
    }
    set_has_rfcn_box_predictor();
    box_predictor_oneof_.rfcn_box_predictor_ = rfcn_box_predictor;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.BoxPredictor.rfcn_box_predictor)
}
void BoxPredictor::set_allocated_weight_shared_convolutional_box_predictor(::object_detection::protos::WeightSharedConvolutionalBoxPredictor* weight_shared_convolutional_box_predictor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_box_predictor_oneof();
  if (weight_shared_convolutional_box_predictor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weight_shared_convolutional_box_predictor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight_shared_convolutional_box_predictor, submessage_arena);
    }
    set_has_weight_shared_convolutional_box_predictor();
    box_predictor_oneof_.weight_shared_convolutional_box_predictor_ = weight_shared_convolutional_box_predictor;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.BoxPredictor.weight_shared_convolutional_box_predictor)
}
BoxPredictor::BoxPredictor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.BoxPredictor)
}
BoxPredictor::BoxPredictor(const BoxPredictor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_box_predictor_oneof();
  switch (from.box_predictor_oneof_case()) {
    case kConvolutionalBoxPredictor: {
      mutable_convolutional_box_predictor()->::object_detection::protos::ConvolutionalBoxPredictor::MergeFrom(from.convolutional_box_predictor());
      break;
    }
    case kMaskRcnnBoxPredictor: {
      mutable_mask_rcnn_box_predictor()->::object_detection::protos::MaskRCNNBoxPredictor::MergeFrom(from.mask_rcnn_box_predictor());
      break;
    }
    case kRfcnBoxPredictor: {
      mutable_rfcn_box_predictor()->::object_detection::protos::RfcnBoxPredictor::MergeFrom(from.rfcn_box_predictor());
      break;
    }
    case kWeightSharedConvolutionalBoxPredictor: {
      mutable_weight_shared_convolutional_box_predictor()->::object_detection::protos::WeightSharedConvolutionalBoxPredictor::MergeFrom(from.weight_shared_convolutional_box_predictor());
      break;
    }
    case BOX_PREDICTOR_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.BoxPredictor)
}

void BoxPredictor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base);
  clear_has_box_predictor_oneof();
}

BoxPredictor::~BoxPredictor() {
  // @@protoc_insertion_point(destructor:object_detection.protos.BoxPredictor)
  SharedDtor();
}

void BoxPredictor::SharedDtor() {
  if (has_box_predictor_oneof()) {
    clear_box_predictor_oneof();
  }
}

void BoxPredictor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoxPredictor& BoxPredictor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base);
  return *internal_default_instance();
}


void BoxPredictor::clear_box_predictor_oneof() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.BoxPredictor)
  switch (box_predictor_oneof_case()) {
    case kConvolutionalBoxPredictor: {
      delete box_predictor_oneof_.convolutional_box_predictor_;
      break;
    }
    case kMaskRcnnBoxPredictor: {
      delete box_predictor_oneof_.mask_rcnn_box_predictor_;
      break;
    }
    case kRfcnBoxPredictor: {
      delete box_predictor_oneof_.rfcn_box_predictor_;
      break;
    }
    case kWeightSharedConvolutionalBoxPredictor: {
      delete box_predictor_oneof_.weight_shared_convolutional_box_predictor_;
      break;
    }
    case BOX_PREDICTOR_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BOX_PREDICTOR_ONEOF_NOT_SET;
}


void BoxPredictor::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.BoxPredictor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_box_predictor_oneof();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoxPredictor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.ConvolutionalBoxPredictor convolutional_box_predictor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_convolutional_box_predictor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.MaskRCNNBoxPredictor mask_rcnn_box_predictor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_mask_rcnn_box_predictor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RfcnBoxPredictor rfcn_box_predictor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_rfcn_box_predictor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor weight_shared_convolutional_box_predictor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_weight_shared_convolutional_box_predictor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoxPredictor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.BoxPredictor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.ConvolutionalBoxPredictor convolutional_box_predictor = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_convolutional_box_predictor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.MaskRCNNBoxPredictor mask_rcnn_box_predictor = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mask_rcnn_box_predictor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RfcnBoxPredictor rfcn_box_predictor = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rfcn_box_predictor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor weight_shared_convolutional_box_predictor = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_weight_shared_convolutional_box_predictor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.BoxPredictor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.BoxPredictor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoxPredictor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.BoxPredictor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (box_predictor_oneof_case()) {
    case kConvolutionalBoxPredictor:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::convolutional_box_predictor(this), output);
      break;
    case kMaskRcnnBoxPredictor:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::mask_rcnn_box_predictor(this), output);
      break;
    case kRfcnBoxPredictor:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, _Internal::rfcn_box_predictor(this), output);
      break;
    case kWeightSharedConvolutionalBoxPredictor:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, _Internal::weight_shared_convolutional_box_predictor(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.BoxPredictor)
}

::PROTOBUF_NAMESPACE_ID::uint8* BoxPredictor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.BoxPredictor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (box_predictor_oneof_case()) {
    case kConvolutionalBoxPredictor:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, _Internal::convolutional_box_predictor(this), target);
      break;
    case kMaskRcnnBoxPredictor:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::mask_rcnn_box_predictor(this), target);
      break;
    case kRfcnBoxPredictor:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, _Internal::rfcn_box_predictor(this), target);
      break;
    case kWeightSharedConvolutionalBoxPredictor:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, _Internal::weight_shared_convolutional_box_predictor(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.BoxPredictor)
  return target;
}

size_t BoxPredictor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.BoxPredictor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (box_predictor_oneof_case()) {
    // optional .object_detection.protos.ConvolutionalBoxPredictor convolutional_box_predictor = 1;
    case kConvolutionalBoxPredictor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *box_predictor_oneof_.convolutional_box_predictor_);
      break;
    }
    // optional .object_detection.protos.MaskRCNNBoxPredictor mask_rcnn_box_predictor = 2;
    case kMaskRcnnBoxPredictor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *box_predictor_oneof_.mask_rcnn_box_predictor_);
      break;
    }
    // optional .object_detection.protos.RfcnBoxPredictor rfcn_box_predictor = 3;
    case kRfcnBoxPredictor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *box_predictor_oneof_.rfcn_box_predictor_);
      break;
    }
    // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor weight_shared_convolutional_box_predictor = 4;
    case kWeightSharedConvolutionalBoxPredictor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *box_predictor_oneof_.weight_shared_convolutional_box_predictor_);
      break;
    }
    case BOX_PREDICTOR_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoxPredictor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.BoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  const BoxPredictor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoxPredictor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.BoxPredictor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.BoxPredictor)
    MergeFrom(*source);
  }
}

void BoxPredictor::MergeFrom(const BoxPredictor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.BoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.box_predictor_oneof_case()) {
    case kConvolutionalBoxPredictor: {
      mutable_convolutional_box_predictor()->::object_detection::protos::ConvolutionalBoxPredictor::MergeFrom(from.convolutional_box_predictor());
      break;
    }
    case kMaskRcnnBoxPredictor: {
      mutable_mask_rcnn_box_predictor()->::object_detection::protos::MaskRCNNBoxPredictor::MergeFrom(from.mask_rcnn_box_predictor());
      break;
    }
    case kRfcnBoxPredictor: {
      mutable_rfcn_box_predictor()->::object_detection::protos::RfcnBoxPredictor::MergeFrom(from.rfcn_box_predictor());
      break;
    }
    case kWeightSharedConvolutionalBoxPredictor: {
      mutable_weight_shared_convolutional_box_predictor()->::object_detection::protos::WeightSharedConvolutionalBoxPredictor::MergeFrom(from.weight_shared_convolutional_box_predictor());
      break;
    }
    case BOX_PREDICTOR_ONEOF_NOT_SET: {
      break;
    }
  }
}

void BoxPredictor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.BoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxPredictor::CopyFrom(const BoxPredictor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.BoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxPredictor::IsInitialized() const {
  return true;
}

void BoxPredictor::InternalSwap(BoxPredictor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(box_predictor_oneof_, other->box_predictor_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoxPredictor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::InitAsDefaultInstance() {
}
class ConvolutionalBoxPredictor_BoxEncodingsClipRange::_Internal {
 public:
  using HasBits = decltype(std::declval<ConvolutionalBoxPredictor_BoxEncodingsClipRange>()._has_bits_);
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ConvolutionalBoxPredictor_BoxEncodingsClipRange::ConvolutionalBoxPredictor_BoxEncodingsClipRange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
}
ConvolutionalBoxPredictor_BoxEncodingsClipRange::ConvolutionalBoxPredictor_BoxEncodingsClipRange(const ConvolutionalBoxPredictor_BoxEncodingsClipRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
}

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

ConvolutionalBoxPredictor_BoxEncodingsClipRange::~ConvolutionalBoxPredictor_BoxEncodingsClipRange() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  SharedDtor();
}

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::SharedDtor() {
}

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConvolutionalBoxPredictor_BoxEncodingsClipRange& ConvolutionalBoxPredictor_BoxEncodingsClipRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConvolutionalBoxPredictor_BoxEncodingsClipRange_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base);
  return *internal_default_instance();
}


void ConvolutionalBoxPredictor_BoxEncodingsClipRange::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConvolutionalBoxPredictor_BoxEncodingsClipRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min(&has_bits);
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_max(&has_bits);
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConvolutionalBoxPredictor_BoxEncodingsClipRange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_min(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_max(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->min(), output);
  }

  // optional float max = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConvolutionalBoxPredictor_BoxEncodingsClipRange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->min(), target);
  }

  // optional float max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  return target;
}

size_t ConvolutionalBoxPredictor_BoxEncodingsClipRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float min = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvolutionalBoxPredictor_BoxEncodingsClipRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConvolutionalBoxPredictor_BoxEncodingsClipRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
    MergeFrom(*source);
  }
}

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::MergeFrom(const ConvolutionalBoxPredictor_BoxEncodingsClipRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::CopyFrom(const ConvolutionalBoxPredictor_BoxEncodingsClipRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionalBoxPredictor_BoxEncodingsClipRange::IsInitialized() const {
  return true;
}

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::InternalSwap(ConvolutionalBoxPredictor_BoxEncodingsClipRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_, other->min_);
  swap(max_, other->max_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvolutionalBoxPredictor_BoxEncodingsClipRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConvolutionalBoxPredictor::InitAsDefaultInstance() {
  ::object_detection::protos::_ConvolutionalBoxPredictor_default_instance_._instance.get_mutable()->conv_hyperparams_ = const_cast< ::object_detection::protos::Hyperparams*>(
      ::object_detection::protos::Hyperparams::internal_default_instance());
  ::object_detection::protos::_ConvolutionalBoxPredictor_default_instance_._instance.get_mutable()->box_encodings_clip_range_ = const_cast< ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange*>(
      ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange::internal_default_instance());
}
class ConvolutionalBoxPredictor::_Internal {
 public:
  using HasBits = decltype(std::declval<ConvolutionalBoxPredictor>()._has_bits_);
  static const ::object_detection::protos::Hyperparams& conv_hyperparams(const ConvolutionalBoxPredictor* msg);
  static void set_has_conv_hyperparams(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_layers_before_predictor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_dropout(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_dropout_keep_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_kernel_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_box_code_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_apply_sigmoid_to_scores(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_class_prediction_bias_init(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_use_depthwise(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange& box_encodings_clip_range(const ConvolutionalBoxPredictor* msg);
  static void set_has_box_encodings_clip_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::object_detection::protos::Hyperparams&
ConvolutionalBoxPredictor::_Internal::conv_hyperparams(const ConvolutionalBoxPredictor* msg) {
  return *msg->conv_hyperparams_;
}
const ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange&
ConvolutionalBoxPredictor::_Internal::box_encodings_clip_range(const ConvolutionalBoxPredictor* msg) {
  return *msg->box_encodings_clip_range_;
}
void ConvolutionalBoxPredictor::clear_conv_hyperparams() {
  if (conv_hyperparams_ != nullptr) conv_hyperparams_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ConvolutionalBoxPredictor::ConvolutionalBoxPredictor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ConvolutionalBoxPredictor)
}
ConvolutionalBoxPredictor::ConvolutionalBoxPredictor(const ConvolutionalBoxPredictor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_conv_hyperparams()) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams(*from.conv_hyperparams_);
  } else {
    conv_hyperparams_ = nullptr;
  }
  if (from.has_box_encodings_clip_range()) {
    box_encodings_clip_range_ = new ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange(*from.box_encodings_clip_range_);
  } else {
    box_encodings_clip_range_ = nullptr;
  }
  ::memcpy(&min_depth_, &from.min_depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&box_code_size_) -
    reinterpret_cast<char*>(&min_depth_)) + sizeof(box_code_size_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ConvolutionalBoxPredictor)
}

void ConvolutionalBoxPredictor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConvolutionalBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base);
  ::memset(&conv_hyperparams_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_depthwise_) -
      reinterpret_cast<char*>(&conv_hyperparams_)) + sizeof(use_depthwise_));
  use_dropout_ = true;
  dropout_keep_probability_ = 0.8f;
  kernel_size_ = 1;
  box_code_size_ = 4;
}

ConvolutionalBoxPredictor::~ConvolutionalBoxPredictor() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ConvolutionalBoxPredictor)
  SharedDtor();
}

void ConvolutionalBoxPredictor::SharedDtor() {
  if (this != internal_default_instance()) delete conv_hyperparams_;
  if (this != internal_default_instance()) delete box_encodings_clip_range_;
}

void ConvolutionalBoxPredictor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConvolutionalBoxPredictor& ConvolutionalBoxPredictor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConvolutionalBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base);
  return *internal_default_instance();
}


void ConvolutionalBoxPredictor::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ConvolutionalBoxPredictor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(conv_hyperparams_ != nullptr);
      conv_hyperparams_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(box_encodings_clip_range_ != nullptr);
      box_encodings_clip_range_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&min_depth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_depthwise_) -
        reinterpret_cast<char*>(&min_depth_)) + sizeof(use_depthwise_));
  }
  if (cached_has_bits & 0x00000f00u) {
    use_dropout_ = true;
    dropout_keep_probability_ = 0.8f;
    kernel_size_ = 1;
    box_code_size_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConvolutionalBoxPredictor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_conv_hyperparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_depth = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min_depth(&has_bits);
          min_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_depth = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_depth(&has_bits);
          max_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_layers_before_predictor = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_layers_before_predictor(&has_bits);
          num_layers_before_predictor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_dropout = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_use_dropout(&has_bits);
          use_dropout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float dropout_keep_probability = 6 [default = 0.8];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_dropout_keep_probability(&has_bits);
          dropout_keep_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 kernel_size = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_kernel_size(&has_bits);
          kernel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 box_code_size = 8 [default = 4];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_box_code_size(&has_bits);
          box_code_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool apply_sigmoid_to_scores = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_apply_sigmoid_to_scores(&has_bits);
          apply_sigmoid_to_scores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float class_prediction_bias_init = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_class_prediction_bias_init(&has_bits);
          class_prediction_bias_init_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool use_depthwise = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_use_depthwise(&has_bits);
          use_depthwise_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_box_encodings_clip_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConvolutionalBoxPredictor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ConvolutionalBoxPredictor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_conv_hyperparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_depth = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_min_depth(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_depth = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_max_depth(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_layers_before_predictor = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_num_layers_before_predictor(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_layers_before_predictor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_dropout = 5 [default = true];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_use_dropout(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_dropout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dropout_keep_probability = 6 [default = 0.8];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_dropout_keep_probability(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_keep_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kernel_size = 7 [default = 1];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_kernel_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 box_code_size = 8 [default = 4];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_box_code_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &box_code_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool apply_sigmoid_to_scores = 9 [default = false];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_apply_sigmoid_to_scores(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_sigmoid_to_scores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float class_prediction_bias_init = 10 [default = 0];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          _Internal::set_has_class_prediction_bias_init(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &class_prediction_bias_init_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_depthwise = 11 [default = false];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_use_depthwise(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_depthwise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_box_encodings_clip_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ConvolutionalBoxPredictor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ConvolutionalBoxPredictor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConvolutionalBoxPredictor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ConvolutionalBoxPredictor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::conv_hyperparams(this), output);
  }

  // optional int32 min_depth = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->min_depth(), output);
  }

  // optional int32 max_depth = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->max_depth(), output);
  }

  // optional int32 num_layers_before_predictor = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->num_layers_before_predictor(), output);
  }

  // optional bool use_dropout = 5 [default = true];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->use_dropout(), output);
  }

  // optional float dropout_keep_probability = 6 [default = 0.8];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->dropout_keep_probability(), output);
  }

  // optional int32 kernel_size = 7 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->kernel_size(), output);
  }

  // optional int32 box_code_size = 8 [default = 4];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->box_code_size(), output);
  }

  // optional bool apply_sigmoid_to_scores = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->apply_sigmoid_to_scores(), output);
  }

  // optional float class_prediction_bias_init = 10 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->class_prediction_bias_init(), output);
  }

  // optional bool use_depthwise = 11 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->use_depthwise(), output);
  }

  // optional .object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 12;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::box_encodings_clip_range(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ConvolutionalBoxPredictor)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConvolutionalBoxPredictor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ConvolutionalBoxPredictor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::conv_hyperparams(this), target);
  }

  // optional int32 min_depth = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->min_depth(), target);
  }

  // optional int32 max_depth = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->max_depth(), target);
  }

  // optional int32 num_layers_before_predictor = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->num_layers_before_predictor(), target);
  }

  // optional bool use_dropout = 5 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->use_dropout(), target);
  }

  // optional float dropout_keep_probability = 6 [default = 0.8];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->dropout_keep_probability(), target);
  }

  // optional int32 kernel_size = 7 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->kernel_size(), target);
  }

  // optional int32 box_code_size = 8 [default = 4];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->box_code_size(), target);
  }

  // optional bool apply_sigmoid_to_scores = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->apply_sigmoid_to_scores(), target);
  }

  // optional float class_prediction_bias_init = 10 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->class_prediction_bias_init(), target);
  }

  // optional bool use_depthwise = 11 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->use_depthwise(), target);
  }

  // optional .object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::box_encodings_clip_range(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ConvolutionalBoxPredictor)
  return target;
}

size_t ConvolutionalBoxPredictor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ConvolutionalBoxPredictor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *conv_hyperparams_);
    }

    // optional .object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *box_encodings_clip_range_);
    }

    // optional int32 min_depth = 2 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->min_depth());
    }

    // optional int32 max_depth = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_depth());
    }

    // optional int32 num_layers_before_predictor = 4 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_layers_before_predictor());
    }

    // optional float class_prediction_bias_init = 10 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional bool apply_sigmoid_to_scores = 9 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool use_depthwise = 11 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool use_dropout = 5 [default = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional float dropout_keep_probability = 6 [default = 0.8];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional int32 kernel_size = 7 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->kernel_size());
    }

    // optional int32 box_code_size = 8 [default = 4];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->box_code_size());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConvolutionalBoxPredictor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ConvolutionalBoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvolutionalBoxPredictor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConvolutionalBoxPredictor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ConvolutionalBoxPredictor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ConvolutionalBoxPredictor)
    MergeFrom(*source);
  }
}

void ConvolutionalBoxPredictor::MergeFrom(const ConvolutionalBoxPredictor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ConvolutionalBoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_conv_hyperparams()->::object_detection::protos::Hyperparams::MergeFrom(from.conv_hyperparams());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_box_encodings_clip_range()->::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange::MergeFrom(from.box_encodings_clip_range());
    }
    if (cached_has_bits & 0x00000004u) {
      min_depth_ = from.min_depth_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_depth_ = from.max_depth_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_layers_before_predictor_ = from.num_layers_before_predictor_;
    }
    if (cached_has_bits & 0x00000020u) {
      class_prediction_bias_init_ = from.class_prediction_bias_init_;
    }
    if (cached_has_bits & 0x00000040u) {
      apply_sigmoid_to_scores_ = from.apply_sigmoid_to_scores_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_depthwise_ = from.use_depthwise_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      use_dropout_ = from.use_dropout_;
    }
    if (cached_has_bits & 0x00000200u) {
      dropout_keep_probability_ = from.dropout_keep_probability_;
    }
    if (cached_has_bits & 0x00000400u) {
      kernel_size_ = from.kernel_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      box_code_size_ = from.box_code_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConvolutionalBoxPredictor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ConvolutionalBoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionalBoxPredictor::CopyFrom(const ConvolutionalBoxPredictor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ConvolutionalBoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionalBoxPredictor::IsInitialized() const {
  return true;
}

void ConvolutionalBoxPredictor::InternalSwap(ConvolutionalBoxPredictor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(conv_hyperparams_, other->conv_hyperparams_);
  swap(box_encodings_clip_range_, other->box_encodings_clip_range_);
  swap(min_depth_, other->min_depth_);
  swap(max_depth_, other->max_depth_);
  swap(num_layers_before_predictor_, other->num_layers_before_predictor_);
  swap(class_prediction_bias_init_, other->class_prediction_bias_init_);
  swap(apply_sigmoid_to_scores_, other->apply_sigmoid_to_scores_);
  swap(use_depthwise_, other->use_depthwise_);
  swap(use_dropout_, other->use_dropout_);
  swap(dropout_keep_probability_, other->dropout_keep_probability_);
  swap(kernel_size_, other->kernel_size_);
  swap(box_code_size_, other->box_code_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvolutionalBoxPredictor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::InitAsDefaultInstance() {
}
class WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::_Internal {
 public:
  using HasBits = decltype(std::declval<WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange>()._has_bits_);
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
}
WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange(const WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
}

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::~WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange() {
  // @@protoc_insertion_point(destructor:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  SharedDtor();
}

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::SharedDtor() {
}

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base);
  return *internal_default_instance();
}


void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min(&has_bits);
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_max(&has_bits);
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_min(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_max(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->min(), output);
  }

  // optional float max = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
}

::PROTOBUF_NAMESPACE_ID::uint8* WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->min(), target);
  }

  // optional float max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  return target;
}

size_t WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float min = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
    MergeFrom(*source);
  }
}

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::MergeFrom(const WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::CopyFrom(const WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::IsInitialized() const {
  return true;
}

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::InternalSwap(WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_, other->min_);
  swap(max_, other->max_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WeightSharedConvolutionalBoxPredictor::InitAsDefaultInstance() {
  ::object_detection::protos::_WeightSharedConvolutionalBoxPredictor_default_instance_._instance.get_mutable()->conv_hyperparams_ = const_cast< ::object_detection::protos::Hyperparams*>(
      ::object_detection::protos::Hyperparams::internal_default_instance());
  ::object_detection::protos::_WeightSharedConvolutionalBoxPredictor_default_instance_._instance.get_mutable()->box_encodings_clip_range_ = const_cast< ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange*>(
      ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::internal_default_instance());
}
class WeightSharedConvolutionalBoxPredictor::_Internal {
 public:
  using HasBits = decltype(std::declval<WeightSharedConvolutionalBoxPredictor>()._has_bits_);
  static const ::object_detection::protos::Hyperparams& conv_hyperparams(const WeightSharedConvolutionalBoxPredictor* msg);
  static void set_has_conv_hyperparams(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_layers_before_predictor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kernel_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_box_code_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_class_prediction_bias_init(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_dropout(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dropout_keep_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_share_prediction_tower(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_use_depthwise(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_score_converter(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& box_encodings_clip_range(const WeightSharedConvolutionalBoxPredictor* msg);
  static void set_has_box_encodings_clip_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::object_detection::protos::Hyperparams&
WeightSharedConvolutionalBoxPredictor::_Internal::conv_hyperparams(const WeightSharedConvolutionalBoxPredictor* msg) {
  return *msg->conv_hyperparams_;
}
const ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange&
WeightSharedConvolutionalBoxPredictor::_Internal::box_encodings_clip_range(const WeightSharedConvolutionalBoxPredictor* msg) {
  return *msg->box_encodings_clip_range_;
}
void WeightSharedConvolutionalBoxPredictor::clear_conv_hyperparams() {
  if (conv_hyperparams_ != nullptr) conv_hyperparams_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
WeightSharedConvolutionalBoxPredictor::WeightSharedConvolutionalBoxPredictor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
}
WeightSharedConvolutionalBoxPredictor::WeightSharedConvolutionalBoxPredictor(const WeightSharedConvolutionalBoxPredictor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_conv_hyperparams()) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams(*from.conv_hyperparams_);
  } else {
    conv_hyperparams_ = nullptr;
  }
  if (from.has_box_encodings_clip_range()) {
    box_encodings_clip_range_ = new ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange(*from.box_encodings_clip_range_);
  } else {
    box_encodings_clip_range_ = nullptr;
  }
  ::memcpy(&depth_, &from.depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&box_code_size_) -
    reinterpret_cast<char*>(&depth_)) + sizeof(box_code_size_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
}

void WeightSharedConvolutionalBoxPredictor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WeightSharedConvolutionalBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base);
  ::memset(&conv_hyperparams_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_converter_) -
      reinterpret_cast<char*>(&conv_hyperparams_)) + sizeof(score_converter_));
  dropout_keep_probability_ = 0.8f;
  kernel_size_ = 3;
  box_code_size_ = 4;
}

WeightSharedConvolutionalBoxPredictor::~WeightSharedConvolutionalBoxPredictor() {
  // @@protoc_insertion_point(destructor:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  SharedDtor();
}

void WeightSharedConvolutionalBoxPredictor::SharedDtor() {
  if (this != internal_default_instance()) delete conv_hyperparams_;
  if (this != internal_default_instance()) delete box_encodings_clip_range_;
}

void WeightSharedConvolutionalBoxPredictor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeightSharedConvolutionalBoxPredictor& WeightSharedConvolutionalBoxPredictor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeightSharedConvolutionalBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base);
  return *internal_default_instance();
}


void WeightSharedConvolutionalBoxPredictor::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(conv_hyperparams_ != nullptr);
      conv_hyperparams_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(box_encodings_clip_range_ != nullptr);
      box_encodings_clip_range_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&depth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_depthwise_) -
        reinterpret_cast<char*>(&depth_)) + sizeof(use_depthwise_));
  }
  if (cached_has_bits & 0x00000f00u) {
    score_converter_ = 0;
    dropout_keep_probability_ = 0.8f;
    kernel_size_ = 3;
    box_code_size_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WeightSharedConvolutionalBoxPredictor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_conv_hyperparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 depth = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_depth(&has_bits);
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_layers_before_predictor = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_layers_before_predictor(&has_bits);
          num_layers_before_predictor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 kernel_size = 7 [default = 3];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_kernel_size(&has_bits);
          kernel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 box_code_size = 8 [default = 4];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_box_code_size(&has_bits);
          box_code_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float class_prediction_bias_init = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_class_prediction_bias_init(&has_bits);
          class_prediction_bias_init_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool use_dropout = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_use_dropout(&has_bits);
          use_dropout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float dropout_keep_probability = 12 [default = 0.8];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_dropout_keep_probability(&has_bits);
          dropout_keep_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool share_prediction_tower = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_share_prediction_tower(&has_bits);
          share_prediction_tower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_depthwise = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_use_depthwise(&has_bits);
          use_depthwise_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.ScoreConverter score_converter = 16 [default = IDENTITY];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter_IsValid(val))) {
            set_score_converter(static_cast<::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_box_encodings_clip_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WeightSharedConvolutionalBoxPredictor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_conv_hyperparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 depth = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_depth(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_layers_before_predictor = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_num_layers_before_predictor(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_layers_before_predictor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kernel_size = 7 [default = 3];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_kernel_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 box_code_size = 8 [default = 4];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_box_code_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &box_code_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float class_prediction_bias_init = 10 [default = 0];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          _Internal::set_has_class_prediction_bias_init(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &class_prediction_bias_init_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_dropout = 11 [default = false];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_use_dropout(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_dropout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dropout_keep_probability = 12 [default = 0.8];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          _Internal::set_has_dropout_keep_probability(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_keep_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool share_prediction_tower = 13 [default = false];
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_share_prediction_tower(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &share_prediction_tower_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_depthwise = 14 [default = false];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_use_depthwise(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_depthwise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.ScoreConverter score_converter = 16 [default = IDENTITY];
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter_IsValid(value)) {
            set_score_converter(static_cast< ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                16, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_box_encodings_clip_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WeightSharedConvolutionalBoxPredictor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::conv_hyperparams(this), output);
  }

  // optional int32 depth = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->depth(), output);
  }

  // optional int32 num_layers_before_predictor = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->num_layers_before_predictor(), output);
  }

  // optional int32 kernel_size = 7 [default = 3];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->kernel_size(), output);
  }

  // optional int32 box_code_size = 8 [default = 4];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->box_code_size(), output);
  }

  // optional float class_prediction_bias_init = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->class_prediction_bias_init(), output);
  }

  // optional bool use_dropout = 11 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->use_dropout(), output);
  }

  // optional float dropout_keep_probability = 12 [default = 0.8];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->dropout_keep_probability(), output);
  }

  // optional bool share_prediction_tower = 13 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->share_prediction_tower(), output);
  }

  // optional bool use_depthwise = 14 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->use_depthwise(), output);
  }

  // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.ScoreConverter score_converter = 16 [default = IDENTITY];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      16, this->score_converter(), output);
  }

  // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 17;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, _Internal::box_encodings_clip_range(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
}

::PROTOBUF_NAMESPACE_ID::uint8* WeightSharedConvolutionalBoxPredictor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::conv_hyperparams(this), target);
  }

  // optional int32 depth = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->depth(), target);
  }

  // optional int32 num_layers_before_predictor = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->num_layers_before_predictor(), target);
  }

  // optional int32 kernel_size = 7 [default = 3];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->kernel_size(), target);
  }

  // optional int32 box_code_size = 8 [default = 4];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->box_code_size(), target);
  }

  // optional float class_prediction_bias_init = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->class_prediction_bias_init(), target);
  }

  // optional bool use_dropout = 11 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->use_dropout(), target);
  }

  // optional float dropout_keep_probability = 12 [default = 0.8];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->dropout_keep_probability(), target);
  }

  // optional bool share_prediction_tower = 13 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->share_prediction_tower(), target);
  }

  // optional bool use_depthwise = 14 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->use_depthwise(), target);
  }

  // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.ScoreConverter score_converter = 16 [default = IDENTITY];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->score_converter(), target);
  }

  // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 17;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, _Internal::box_encodings_clip_range(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  return target;
}

size_t WeightSharedConvolutionalBoxPredictor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *conv_hyperparams_);
    }

    // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *box_encodings_clip_range_);
    }

    // optional int32 depth = 2 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->depth());
    }

    // optional int32 num_layers_before_predictor = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_layers_before_predictor());
    }

    // optional float class_prediction_bias_init = 10 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool use_dropout = 11 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool share_prediction_tower = 13 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool use_depthwise = 14 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.ScoreConverter score_converter = 16 [default = IDENTITY];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->score_converter());
    }

    // optional float dropout_keep_probability = 12 [default = 0.8];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional int32 kernel_size = 7 [default = 3];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->kernel_size());
    }

    // optional int32 box_code_size = 8 [default = 4];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->box_code_size());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeightSharedConvolutionalBoxPredictor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightSharedConvolutionalBoxPredictor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeightSharedConvolutionalBoxPredictor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
    MergeFrom(*source);
  }
}

void WeightSharedConvolutionalBoxPredictor::MergeFrom(const WeightSharedConvolutionalBoxPredictor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_conv_hyperparams()->::object_detection::protos::Hyperparams::MergeFrom(from.conv_hyperparams());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_box_encodings_clip_range()->::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::MergeFrom(from.box_encodings_clip_range());
    }
    if (cached_has_bits & 0x00000004u) {
      depth_ = from.depth_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_layers_before_predictor_ = from.num_layers_before_predictor_;
    }
    if (cached_has_bits & 0x00000010u) {
      class_prediction_bias_init_ = from.class_prediction_bias_init_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_dropout_ = from.use_dropout_;
    }
    if (cached_has_bits & 0x00000040u) {
      share_prediction_tower_ = from.share_prediction_tower_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_depthwise_ = from.use_depthwise_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      score_converter_ = from.score_converter_;
    }
    if (cached_has_bits & 0x00000200u) {
      dropout_keep_probability_ = from.dropout_keep_probability_;
    }
    if (cached_has_bits & 0x00000400u) {
      kernel_size_ = from.kernel_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      box_code_size_ = from.box_code_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WeightSharedConvolutionalBoxPredictor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightSharedConvolutionalBoxPredictor::CopyFrom(const WeightSharedConvolutionalBoxPredictor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightSharedConvolutionalBoxPredictor::IsInitialized() const {
  return true;
}

void WeightSharedConvolutionalBoxPredictor::InternalSwap(WeightSharedConvolutionalBoxPredictor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(conv_hyperparams_, other->conv_hyperparams_);
  swap(box_encodings_clip_range_, other->box_encodings_clip_range_);
  swap(depth_, other->depth_);
  swap(num_layers_before_predictor_, other->num_layers_before_predictor_);
  swap(class_prediction_bias_init_, other->class_prediction_bias_init_);
  swap(use_dropout_, other->use_dropout_);
  swap(share_prediction_tower_, other->share_prediction_tower_);
  swap(use_depthwise_, other->use_depthwise_);
  swap(score_converter_, other->score_converter_);
  swap(dropout_keep_probability_, other->dropout_keep_probability_);
  swap(kernel_size_, other->kernel_size_);
  swap(box_code_size_, other->box_code_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeightSharedConvolutionalBoxPredictor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MaskRCNNBoxPredictor::InitAsDefaultInstance() {
  ::object_detection::protos::_MaskRCNNBoxPredictor_default_instance_._instance.get_mutable()->fc_hyperparams_ = const_cast< ::object_detection::protos::Hyperparams*>(
      ::object_detection::protos::Hyperparams::internal_default_instance());
  ::object_detection::protos::_MaskRCNNBoxPredictor_default_instance_._instance.get_mutable()->conv_hyperparams_ = const_cast< ::object_detection::protos::Hyperparams*>(
      ::object_detection::protos::Hyperparams::internal_default_instance());
}
class MaskRCNNBoxPredictor::_Internal {
 public:
  using HasBits = decltype(std::declval<MaskRCNNBoxPredictor>()._has_bits_);
  static const ::object_detection::protos::Hyperparams& fc_hyperparams(const MaskRCNNBoxPredictor* msg);
  static void set_has_fc_hyperparams(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_dropout(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dropout_keep_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_box_code_size(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::object_detection::protos::Hyperparams& conv_hyperparams(const MaskRCNNBoxPredictor* msg);
  static void set_has_conv_hyperparams(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_predict_instance_masks(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mask_prediction_conv_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_predict_keypoints(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mask_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_mask_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_mask_prediction_num_conv_layers(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_masks_are_class_agnostic(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_share_box_across_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_convolve_then_upsample_masks(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::object_detection::protos::Hyperparams&
MaskRCNNBoxPredictor::_Internal::fc_hyperparams(const MaskRCNNBoxPredictor* msg) {
  return *msg->fc_hyperparams_;
}
const ::object_detection::protos::Hyperparams&
MaskRCNNBoxPredictor::_Internal::conv_hyperparams(const MaskRCNNBoxPredictor* msg) {
  return *msg->conv_hyperparams_;
}
void MaskRCNNBoxPredictor::clear_fc_hyperparams() {
  if (fc_hyperparams_ != nullptr) fc_hyperparams_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MaskRCNNBoxPredictor::clear_conv_hyperparams() {
  if (conv_hyperparams_ != nullptr) conv_hyperparams_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
MaskRCNNBoxPredictor::MaskRCNNBoxPredictor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.MaskRCNNBoxPredictor)
}
MaskRCNNBoxPredictor::MaskRCNNBoxPredictor(const MaskRCNNBoxPredictor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fc_hyperparams()) {
    fc_hyperparams_ = new ::object_detection::protos::Hyperparams(*from.fc_hyperparams_);
  } else {
    fc_hyperparams_ = nullptr;
  }
  if (from.has_conv_hyperparams()) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams(*from.conv_hyperparams_);
  } else {
    conv_hyperparams_ = nullptr;
  }
  ::memcpy(&use_dropout_, &from.use_dropout_,
    static_cast<size_t>(reinterpret_cast<char*>(&mask_prediction_num_conv_layers_) -
    reinterpret_cast<char*>(&use_dropout_)) + sizeof(mask_prediction_num_conv_layers_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.MaskRCNNBoxPredictor)
}

void MaskRCNNBoxPredictor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MaskRCNNBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base);
  ::memset(&fc_hyperparams_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&convolve_then_upsample_masks_) -
      reinterpret_cast<char*>(&fc_hyperparams_)) + sizeof(convolve_then_upsample_masks_));
  dropout_keep_probability_ = 0.5f;
  box_code_size_ = 4;
  mask_prediction_conv_depth_ = 256;
  mask_height_ = 15;
  mask_width_ = 15;
  mask_prediction_num_conv_layers_ = 2;
}

MaskRCNNBoxPredictor::~MaskRCNNBoxPredictor() {
  // @@protoc_insertion_point(destructor:object_detection.protos.MaskRCNNBoxPredictor)
  SharedDtor();
}

void MaskRCNNBoxPredictor::SharedDtor() {
  if (this != internal_default_instance()) delete fc_hyperparams_;
  if (this != internal_default_instance()) delete conv_hyperparams_;
}

void MaskRCNNBoxPredictor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MaskRCNNBoxPredictor& MaskRCNNBoxPredictor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MaskRCNNBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base);
  return *internal_default_instance();
}


void MaskRCNNBoxPredictor::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.MaskRCNNBoxPredictor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fc_hyperparams_ != nullptr);
      fc_hyperparams_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(conv_hyperparams_ != nullptr);
      conv_hyperparams_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&use_dropout_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&convolve_then_upsample_masks_) -
        reinterpret_cast<char*>(&use_dropout_)) + sizeof(convolve_then_upsample_masks_));
  }
  if (cached_has_bits & 0x00003f00u) {
    dropout_keep_probability_ = 0.5f;
    box_code_size_ = 4;
    mask_prediction_conv_depth_ = 256;
    mask_height_ = 15;
    mask_width_ = 15;
    mask_prediction_num_conv_layers_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MaskRCNNBoxPredictor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.Hyperparams fc_hyperparams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_fc_hyperparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_dropout = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_dropout(&has_bits);
          use_dropout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float dropout_keep_probability = 3 [default = 0.5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_dropout_keep_probability(&has_bits);
          dropout_keep_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 box_code_size = 4 [default = 4];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_box_code_size(&has_bits);
          box_code_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.Hyperparams conv_hyperparams = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_conv_hyperparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool predict_instance_masks = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_predict_instance_masks(&has_bits);
          predict_instance_masks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mask_prediction_conv_depth = 7 [default = 256];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_mask_prediction_conv_depth(&has_bits);
          mask_prediction_conv_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool predict_keypoints = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_predict_keypoints(&has_bits);
          predict_keypoints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mask_height = 9 [default = 15];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_mask_height(&has_bits);
          mask_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mask_width = 10 [default = 15];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_mask_width(&has_bits);
          mask_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mask_prediction_num_conv_layers = 11 [default = 2];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_mask_prediction_num_conv_layers(&has_bits);
          mask_prediction_num_conv_layers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool masks_are_class_agnostic = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_masks_are_class_agnostic(&has_bits);
          masks_are_class_agnostic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool share_box_across_classes = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_share_box_across_classes(&has_bits);
          share_box_across_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool convolve_then_upsample_masks = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_convolve_then_upsample_masks(&has_bits);
          convolve_then_upsample_masks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MaskRCNNBoxPredictor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.MaskRCNNBoxPredictor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.Hyperparams fc_hyperparams = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fc_hyperparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_dropout = 2 [default = false];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_use_dropout(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_dropout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dropout_keep_probability = 3 [default = 0.5];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_dropout_keep_probability(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_keep_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 box_code_size = 4 [default = 4];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_box_code_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &box_code_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.Hyperparams conv_hyperparams = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_conv_hyperparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool predict_instance_masks = 6 [default = false];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_predict_instance_masks(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &predict_instance_masks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mask_prediction_conv_depth = 7 [default = 256];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_mask_prediction_conv_depth(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_prediction_conv_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool predict_keypoints = 8 [default = false];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_predict_keypoints(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &predict_keypoints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mask_height = 9 [default = 15];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_mask_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mask_width = 10 [default = 15];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_mask_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mask_prediction_num_conv_layers = 11 [default = 2];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_mask_prediction_num_conv_layers(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_prediction_num_conv_layers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool masks_are_class_agnostic = 12 [default = false];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_masks_are_class_agnostic(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &masks_are_class_agnostic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool share_box_across_classes = 13 [default = false];
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_share_box_across_classes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &share_box_across_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool convolve_then_upsample_masks = 14 [default = false];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_convolve_then_upsample_masks(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &convolve_then_upsample_masks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.MaskRCNNBoxPredictor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.MaskRCNNBoxPredictor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MaskRCNNBoxPredictor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.MaskRCNNBoxPredictor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Hyperparams fc_hyperparams = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::fc_hyperparams(this), output);
  }

  // optional bool use_dropout = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->use_dropout(), output);
  }

  // optional float dropout_keep_probability = 3 [default = 0.5];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->dropout_keep_probability(), output);
  }

  // optional int32 box_code_size = 4 [default = 4];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->box_code_size(), output);
  }

  // optional .object_detection.protos.Hyperparams conv_hyperparams = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::conv_hyperparams(this), output);
  }

  // optional bool predict_instance_masks = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->predict_instance_masks(), output);
  }

  // optional int32 mask_prediction_conv_depth = 7 [default = 256];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->mask_prediction_conv_depth(), output);
  }

  // optional bool predict_keypoints = 8 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->predict_keypoints(), output);
  }

  // optional int32 mask_height = 9 [default = 15];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->mask_height(), output);
  }

  // optional int32 mask_width = 10 [default = 15];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->mask_width(), output);
  }

  // optional int32 mask_prediction_num_conv_layers = 11 [default = 2];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->mask_prediction_num_conv_layers(), output);
  }

  // optional bool masks_are_class_agnostic = 12 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->masks_are_class_agnostic(), output);
  }

  // optional bool share_box_across_classes = 13 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->share_box_across_classes(), output);
  }

  // optional bool convolve_then_upsample_masks = 14 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->convolve_then_upsample_masks(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.MaskRCNNBoxPredictor)
}

::PROTOBUF_NAMESPACE_ID::uint8* MaskRCNNBoxPredictor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.MaskRCNNBoxPredictor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Hyperparams fc_hyperparams = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::fc_hyperparams(this), target);
  }

  // optional bool use_dropout = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->use_dropout(), target);
  }

  // optional float dropout_keep_probability = 3 [default = 0.5];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->dropout_keep_probability(), target);
  }

  // optional int32 box_code_size = 4 [default = 4];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->box_code_size(), target);
  }

  // optional .object_detection.protos.Hyperparams conv_hyperparams = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::conv_hyperparams(this), target);
  }

  // optional bool predict_instance_masks = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->predict_instance_masks(), target);
  }

  // optional int32 mask_prediction_conv_depth = 7 [default = 256];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->mask_prediction_conv_depth(), target);
  }

  // optional bool predict_keypoints = 8 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->predict_keypoints(), target);
  }

  // optional int32 mask_height = 9 [default = 15];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->mask_height(), target);
  }

  // optional int32 mask_width = 10 [default = 15];
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->mask_width(), target);
  }

  // optional int32 mask_prediction_num_conv_layers = 11 [default = 2];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->mask_prediction_num_conv_layers(), target);
  }

  // optional bool masks_are_class_agnostic = 12 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->masks_are_class_agnostic(), target);
  }

  // optional bool share_box_across_classes = 13 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->share_box_across_classes(), target);
  }

  // optional bool convolve_then_upsample_masks = 14 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->convolve_then_upsample_masks(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.MaskRCNNBoxPredictor)
  return target;
}

size_t MaskRCNNBoxPredictor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.MaskRCNNBoxPredictor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .object_detection.protos.Hyperparams fc_hyperparams = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fc_hyperparams_);
    }

    // optional .object_detection.protos.Hyperparams conv_hyperparams = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *conv_hyperparams_);
    }

    // optional bool use_dropout = 2 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool predict_instance_masks = 6 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool predict_keypoints = 8 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool masks_are_class_agnostic = 12 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool share_box_across_classes = 13 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool convolve_then_upsample_masks = 14 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional float dropout_keep_probability = 3 [default = 0.5];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int32 box_code_size = 4 [default = 4];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->box_code_size());
    }

    // optional int32 mask_prediction_conv_depth = 7 [default = 256];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mask_prediction_conv_depth());
    }

    // optional int32 mask_height = 9 [default = 15];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mask_height());
    }

    // optional int32 mask_width = 10 [default = 15];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mask_width());
    }

    // optional int32 mask_prediction_num_conv_layers = 11 [default = 2];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mask_prediction_num_conv_layers());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaskRCNNBoxPredictor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.MaskRCNNBoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  const MaskRCNNBoxPredictor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaskRCNNBoxPredictor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.MaskRCNNBoxPredictor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.MaskRCNNBoxPredictor)
    MergeFrom(*source);
  }
}

void MaskRCNNBoxPredictor::MergeFrom(const MaskRCNNBoxPredictor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.MaskRCNNBoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fc_hyperparams()->::object_detection::protos::Hyperparams::MergeFrom(from.fc_hyperparams());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_conv_hyperparams()->::object_detection::protos::Hyperparams::MergeFrom(from.conv_hyperparams());
    }
    if (cached_has_bits & 0x00000004u) {
      use_dropout_ = from.use_dropout_;
    }
    if (cached_has_bits & 0x00000008u) {
      predict_instance_masks_ = from.predict_instance_masks_;
    }
    if (cached_has_bits & 0x00000010u) {
      predict_keypoints_ = from.predict_keypoints_;
    }
    if (cached_has_bits & 0x00000020u) {
      masks_are_class_agnostic_ = from.masks_are_class_agnostic_;
    }
    if (cached_has_bits & 0x00000040u) {
      share_box_across_classes_ = from.share_box_across_classes_;
    }
    if (cached_has_bits & 0x00000080u) {
      convolve_then_upsample_masks_ = from.convolve_then_upsample_masks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      dropout_keep_probability_ = from.dropout_keep_probability_;
    }
    if (cached_has_bits & 0x00000200u) {
      box_code_size_ = from.box_code_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      mask_prediction_conv_depth_ = from.mask_prediction_conv_depth_;
    }
    if (cached_has_bits & 0x00000800u) {
      mask_height_ = from.mask_height_;
    }
    if (cached_has_bits & 0x00001000u) {
      mask_width_ = from.mask_width_;
    }
    if (cached_has_bits & 0x00002000u) {
      mask_prediction_num_conv_layers_ = from.mask_prediction_num_conv_layers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MaskRCNNBoxPredictor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.MaskRCNNBoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaskRCNNBoxPredictor::CopyFrom(const MaskRCNNBoxPredictor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.MaskRCNNBoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaskRCNNBoxPredictor::IsInitialized() const {
  return true;
}

void MaskRCNNBoxPredictor::InternalSwap(MaskRCNNBoxPredictor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fc_hyperparams_, other->fc_hyperparams_);
  swap(conv_hyperparams_, other->conv_hyperparams_);
  swap(use_dropout_, other->use_dropout_);
  swap(predict_instance_masks_, other->predict_instance_masks_);
  swap(predict_keypoints_, other->predict_keypoints_);
  swap(masks_are_class_agnostic_, other->masks_are_class_agnostic_);
  swap(share_box_across_classes_, other->share_box_across_classes_);
  swap(convolve_then_upsample_masks_, other->convolve_then_upsample_masks_);
  swap(dropout_keep_probability_, other->dropout_keep_probability_);
  swap(box_code_size_, other->box_code_size_);
  swap(mask_prediction_conv_depth_, other->mask_prediction_conv_depth_);
  swap(mask_height_, other->mask_height_);
  swap(mask_width_, other->mask_width_);
  swap(mask_prediction_num_conv_layers_, other->mask_prediction_num_conv_layers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaskRCNNBoxPredictor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RfcnBoxPredictor::InitAsDefaultInstance() {
  ::object_detection::protos::_RfcnBoxPredictor_default_instance_._instance.get_mutable()->conv_hyperparams_ = const_cast< ::object_detection::protos::Hyperparams*>(
      ::object_detection::protos::Hyperparams::internal_default_instance());
}
class RfcnBoxPredictor::_Internal {
 public:
  using HasBits = decltype(std::declval<RfcnBoxPredictor>()._has_bits_);
  static const ::object_detection::protos::Hyperparams& conv_hyperparams(const RfcnBoxPredictor* msg);
  static void set_has_conv_hyperparams(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_spatial_bins_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_spatial_bins_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_box_code_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_crop_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_crop_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::object_detection::protos::Hyperparams&
RfcnBoxPredictor::_Internal::conv_hyperparams(const RfcnBoxPredictor* msg) {
  return *msg->conv_hyperparams_;
}
void RfcnBoxPredictor::clear_conv_hyperparams() {
  if (conv_hyperparams_ != nullptr) conv_hyperparams_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RfcnBoxPredictor::RfcnBoxPredictor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RfcnBoxPredictor)
}
RfcnBoxPredictor::RfcnBoxPredictor(const RfcnBoxPredictor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_conv_hyperparams()) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams(*from.conv_hyperparams_);
  } else {
    conv_hyperparams_ = nullptr;
  }
  ::memcpy(&num_spatial_bins_height_, &from.num_spatial_bins_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&crop_width_) -
    reinterpret_cast<char*>(&num_spatial_bins_height_)) + sizeof(crop_width_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RfcnBoxPredictor)
}

void RfcnBoxPredictor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RfcnBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base);
  conv_hyperparams_ = nullptr;
  num_spatial_bins_height_ = 3;
  num_spatial_bins_width_ = 3;
  depth_ = 1024;
  box_code_size_ = 4;
  crop_height_ = 12;
  crop_width_ = 12;
}

RfcnBoxPredictor::~RfcnBoxPredictor() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RfcnBoxPredictor)
  SharedDtor();
}

void RfcnBoxPredictor::SharedDtor() {
  if (this != internal_default_instance()) delete conv_hyperparams_;
}

void RfcnBoxPredictor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RfcnBoxPredictor& RfcnBoxPredictor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RfcnBoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base);
  return *internal_default_instance();
}


void RfcnBoxPredictor::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RfcnBoxPredictor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(conv_hyperparams_ != nullptr);
      conv_hyperparams_->Clear();
    }
    num_spatial_bins_height_ = 3;
    num_spatial_bins_width_ = 3;
    depth_ = 1024;
    box_code_size_ = 4;
    crop_height_ = 12;
    crop_width_ = 12;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RfcnBoxPredictor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_conv_hyperparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_spatial_bins_height = 2 [default = 3];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_spatial_bins_height(&has_bits);
          num_spatial_bins_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_spatial_bins_width = 3 [default = 3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_spatial_bins_width(&has_bits);
          num_spatial_bins_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 depth = 4 [default = 1024];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_depth(&has_bits);
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 box_code_size = 5 [default = 4];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_box_code_size(&has_bits);
          box_code_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 crop_height = 6 [default = 12];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_crop_height(&has_bits);
          crop_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 crop_width = 7 [default = 12];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_crop_width(&has_bits);
          crop_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RfcnBoxPredictor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RfcnBoxPredictor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_conv_hyperparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_spatial_bins_height = 2 [default = 3];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_spatial_bins_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_spatial_bins_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_spatial_bins_width = 3 [default = 3];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_spatial_bins_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_spatial_bins_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 depth = 4 [default = 1024];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_depth(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 box_code_size = 5 [default = 4];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_box_code_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &box_code_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 crop_height = 6 [default = 12];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_crop_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &crop_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 crop_width = 7 [default = 12];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_crop_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &crop_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RfcnBoxPredictor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RfcnBoxPredictor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RfcnBoxPredictor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RfcnBoxPredictor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::conv_hyperparams(this), output);
  }

  // optional int32 num_spatial_bins_height = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_spatial_bins_height(), output);
  }

  // optional int32 num_spatial_bins_width = 3 [default = 3];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_spatial_bins_width(), output);
  }

  // optional int32 depth = 4 [default = 1024];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->depth(), output);
  }

  // optional int32 box_code_size = 5 [default = 4];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->box_code_size(), output);
  }

  // optional int32 crop_height = 6 [default = 12];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->crop_height(), output);
  }

  // optional int32 crop_width = 7 [default = 12];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->crop_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RfcnBoxPredictor)
}

::PROTOBUF_NAMESPACE_ID::uint8* RfcnBoxPredictor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RfcnBoxPredictor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::conv_hyperparams(this), target);
  }

  // optional int32 num_spatial_bins_height = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_spatial_bins_height(), target);
  }

  // optional int32 num_spatial_bins_width = 3 [default = 3];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->num_spatial_bins_width(), target);
  }

  // optional int32 depth = 4 [default = 1024];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->depth(), target);
  }

  // optional int32 box_code_size = 5 [default = 4];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->box_code_size(), target);
  }

  // optional int32 crop_height = 6 [default = 12];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->crop_height(), target);
  }

  // optional int32 crop_width = 7 [default = 12];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->crop_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RfcnBoxPredictor)
  return target;
}

size_t RfcnBoxPredictor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RfcnBoxPredictor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *conv_hyperparams_);
    }

    // optional int32 num_spatial_bins_height = 2 [default = 3];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_spatial_bins_height());
    }

    // optional int32 num_spatial_bins_width = 3 [default = 3];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_spatial_bins_width());
    }

    // optional int32 depth = 4 [default = 1024];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->depth());
    }

    // optional int32 box_code_size = 5 [default = 4];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->box_code_size());
    }

    // optional int32 crop_height = 6 [default = 12];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->crop_height());
    }

    // optional int32 crop_width = 7 [default = 12];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->crop_width());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RfcnBoxPredictor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RfcnBoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  const RfcnBoxPredictor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RfcnBoxPredictor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RfcnBoxPredictor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RfcnBoxPredictor)
    MergeFrom(*source);
  }
}

void RfcnBoxPredictor::MergeFrom(const RfcnBoxPredictor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RfcnBoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_conv_hyperparams()->::object_detection::protos::Hyperparams::MergeFrom(from.conv_hyperparams());
    }
    if (cached_has_bits & 0x00000002u) {
      num_spatial_bins_height_ = from.num_spatial_bins_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_spatial_bins_width_ = from.num_spatial_bins_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      depth_ = from.depth_;
    }
    if (cached_has_bits & 0x00000010u) {
      box_code_size_ = from.box_code_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      crop_height_ = from.crop_height_;
    }
    if (cached_has_bits & 0x00000040u) {
      crop_width_ = from.crop_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RfcnBoxPredictor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RfcnBoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RfcnBoxPredictor::CopyFrom(const RfcnBoxPredictor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RfcnBoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RfcnBoxPredictor::IsInitialized() const {
  return true;
}

void RfcnBoxPredictor::InternalSwap(RfcnBoxPredictor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(conv_hyperparams_, other->conv_hyperparams_);
  swap(num_spatial_bins_height_, other->num_spatial_bins_height_);
  swap(num_spatial_bins_width_, other->num_spatial_bins_width_);
  swap(depth_, other->depth_);
  swap(box_code_size_, other->box_code_size_);
  swap(crop_height_, other->crop_height_);
  swap(crop_width_, other->crop_width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RfcnBoxPredictor::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::object_detection::protos::BoxPredictor* Arena::CreateMaybeMessage< ::object_detection::protos::BoxPredictor >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::BoxPredictor >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange* Arena::CreateMaybeMessage< ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::ConvolutionalBoxPredictor* Arena::CreateMaybeMessage< ::object_detection::protos::ConvolutionalBoxPredictor >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::ConvolutionalBoxPredictor >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* Arena::CreateMaybeMessage< ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::WeightSharedConvolutionalBoxPredictor* Arena::CreateMaybeMessage< ::object_detection::protos::WeightSharedConvolutionalBoxPredictor >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::WeightSharedConvolutionalBoxPredictor >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::MaskRCNNBoxPredictor* Arena::CreateMaybeMessage< ::object_detection::protos::MaskRCNNBoxPredictor >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::MaskRCNNBoxPredictor >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RfcnBoxPredictor* Arena::CreateMaybeMessage< ::object_detection::protos::RfcnBoxPredictor >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RfcnBoxPredictor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
