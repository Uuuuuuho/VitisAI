// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/optimizer.proto

#include "object_detection/protos/optimizer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdamOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConstantLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CosineDecayLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExponentialDecayLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_LearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ManualStepLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManualStepLearningRate_LearningRateSchedule_object_5fdetection_2fprotos_2foptimizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MomentumOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RMSPropOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto;
namespace object_detection {
namespace protos {
class OptimizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Optimizer> _instance;
  const ::object_detection::protos::RMSPropOptimizer* rms_prop_optimizer_;
  const ::object_detection::protos::MomentumOptimizer* momentum_optimizer_;
  const ::object_detection::protos::AdamOptimizer* adam_optimizer_;
} _Optimizer_default_instance_;
class RMSPropOptimizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RMSPropOptimizer> _instance;
} _RMSPropOptimizer_default_instance_;
class MomentumOptimizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MomentumOptimizer> _instance;
} _MomentumOptimizer_default_instance_;
class AdamOptimizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdamOptimizer> _instance;
} _AdamOptimizer_default_instance_;
class LearningRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LearningRate> _instance;
  const ::object_detection::protos::ConstantLearningRate* constant_learning_rate_;
  const ::object_detection::protos::ExponentialDecayLearningRate* exponential_decay_learning_rate_;
  const ::object_detection::protos::ManualStepLearningRate* manual_step_learning_rate_;
  const ::object_detection::protos::CosineDecayLearningRate* cosine_decay_learning_rate_;
} _LearningRate_default_instance_;
class ConstantLearningRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConstantLearningRate> _instance;
} _ConstantLearningRate_default_instance_;
class ExponentialDecayLearningRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExponentialDecayLearningRate> _instance;
} _ExponentialDecayLearningRate_default_instance_;
class ManualStepLearningRate_LearningRateScheduleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManualStepLearningRate_LearningRateSchedule> _instance;
} _ManualStepLearningRate_LearningRateSchedule_default_instance_;
class ManualStepLearningRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManualStepLearningRate> _instance;
} _ManualStepLearningRate_default_instance_;
class CosineDecayLearningRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CosineDecayLearningRate> _instance;
} _CosineDecayLearningRate_default_instance_;
}  // namespace protos
}  // namespace object_detection
static void InitDefaultsscc_info_AdamOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_AdamOptimizer_default_instance_;
    new (ptr) ::object_detection::protos::AdamOptimizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::AdamOptimizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdamOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AdamOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto}, {
      &scc_info_LearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base,}};

static void InitDefaultsscc_info_ConstantLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_ConstantLearningRate_default_instance_;
    new (ptr) ::object_detection::protos::ConstantLearningRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::ConstantLearningRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConstantLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConstantLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto}, {}};

static void InitDefaultsscc_info_CosineDecayLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_CosineDecayLearningRate_default_instance_;
    new (ptr) ::object_detection::protos::CosineDecayLearningRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::CosineDecayLearningRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CosineDecayLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CosineDecayLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto}, {}};

static void InitDefaultsscc_info_ExponentialDecayLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_ExponentialDecayLearningRate_default_instance_;
    new (ptr) ::object_detection::protos::ExponentialDecayLearningRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::ExponentialDecayLearningRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExponentialDecayLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ExponentialDecayLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto}, {}};

static void InitDefaultsscc_info_LearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_LearningRate_default_instance_;
    new (ptr) ::object_detection::protos::LearningRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::LearningRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_LearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_LearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto}, {
      &scc_info_ConstantLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base,
      &scc_info_ExponentialDecayLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base,
      &scc_info_ManualStepLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base,
      &scc_info_CosineDecayLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base,}};

static void InitDefaultsscc_info_ManualStepLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_ManualStepLearningRate_default_instance_;
    new (ptr) ::object_detection::protos::ManualStepLearningRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::ManualStepLearningRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ManualStepLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ManualStepLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto}, {
      &scc_info_ManualStepLearningRate_LearningRateSchedule_object_5fdetection_2fprotos_2foptimizer_2eproto.base,}};

static void InitDefaultsscc_info_ManualStepLearningRate_LearningRateSchedule_object_5fdetection_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_ManualStepLearningRate_LearningRateSchedule_default_instance_;
    new (ptr) ::object_detection::protos::ManualStepLearningRate_LearningRateSchedule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::ManualStepLearningRate_LearningRateSchedule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManualStepLearningRate_LearningRateSchedule_object_5fdetection_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ManualStepLearningRate_LearningRateSchedule_object_5fdetection_2fprotos_2foptimizer_2eproto}, {}};

static void InitDefaultsscc_info_MomentumOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_MomentumOptimizer_default_instance_;
    new (ptr) ::object_detection::protos::MomentumOptimizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::MomentumOptimizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MomentumOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MomentumOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto}, {
      &scc_info_LearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base,}};

static void InitDefaultsscc_info_Optimizer_object_5fdetection_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_Optimizer_default_instance_;
    new (ptr) ::object_detection::protos::Optimizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::Optimizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Optimizer_object_5fdetection_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Optimizer_object_5fdetection_2fprotos_2foptimizer_2eproto}, {
      &scc_info_RMSPropOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto.base,
      &scc_info_MomentumOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto.base,
      &scc_info_AdamOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto.base,}};

static void InitDefaultsscc_info_RMSPropOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RMSPropOptimizer_default_instance_;
    new (ptr) ::object_detection::protos::RMSPropOptimizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RMSPropOptimizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RMSPropOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RMSPropOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto}, {
      &scc_info_LearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_object_5fdetection_2fprotos_2foptimizer_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_object_5fdetection_2fprotos_2foptimizer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_object_5fdetection_2fprotos_2foptimizer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_object_5fdetection_2fprotos_2foptimizer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Optimizer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Optimizer, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Optimizer, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::object_detection::protos::OptimizerDefaultTypeInternal, rms_prop_optimizer_),
  offsetof(::object_detection::protos::OptimizerDefaultTypeInternal, momentum_optimizer_),
  offsetof(::object_detection::protos::OptimizerDefaultTypeInternal, adam_optimizer_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Optimizer, use_moving_average_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Optimizer, moving_average_decay_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Optimizer, optimizer_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RMSPropOptimizer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RMSPropOptimizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RMSPropOptimizer, learning_rate_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RMSPropOptimizer, momentum_optimizer_value_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RMSPropOptimizer, decay_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RMSPropOptimizer, epsilon_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MomentumOptimizer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MomentumOptimizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MomentumOptimizer, learning_rate_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::MomentumOptimizer, momentum_optimizer_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::AdamOptimizer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::AdamOptimizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::AdamOptimizer, learning_rate_),
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::LearningRate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::LearningRate, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::LearningRate, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::object_detection::protos::LearningRateDefaultTypeInternal, constant_learning_rate_),
  offsetof(::object_detection::protos::LearningRateDefaultTypeInternal, exponential_decay_learning_rate_),
  offsetof(::object_detection::protos::LearningRateDefaultTypeInternal, manual_step_learning_rate_),
  offsetof(::object_detection::protos::LearningRateDefaultTypeInternal, cosine_decay_learning_rate_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::LearningRate, learning_rate_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConstantLearningRate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConstantLearningRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConstantLearningRate, learning_rate_),
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ExponentialDecayLearningRate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ExponentialDecayLearningRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ExponentialDecayLearningRate, initial_learning_rate_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ExponentialDecayLearningRate, decay_steps_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ExponentialDecayLearningRate, decay_factor_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ExponentialDecayLearningRate, staircase_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ExponentialDecayLearningRate, burnin_learning_rate_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ExponentialDecayLearningRate, burnin_steps_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ExponentialDecayLearningRate, min_learning_rate_),
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ManualStepLearningRate_LearningRateSchedule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ManualStepLearningRate_LearningRateSchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ManualStepLearningRate_LearningRateSchedule, step_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ManualStepLearningRate_LearningRateSchedule, learning_rate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ManualStepLearningRate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ManualStepLearningRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ManualStepLearningRate, initial_learning_rate_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ManualStepLearningRate, schedule_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ManualStepLearningRate, warmup_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::CosineDecayLearningRate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::CosineDecayLearningRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::CosineDecayLearningRate, learning_rate_base_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::CosineDecayLearningRate, total_steps_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::CosineDecayLearningRate, warmup_learning_rate_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::CosineDecayLearningRate, warmup_steps_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::CosineDecayLearningRate, hold_base_rate_steps_),
  1,
  2,
  3,
  4,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::object_detection::protos::Optimizer)},
  { 16, 25, sizeof(::object_detection::protos::RMSPropOptimizer)},
  { 29, 36, sizeof(::object_detection::protos::MomentumOptimizer)},
  { 38, 44, sizeof(::object_detection::protos::AdamOptimizer)},
  { 45, 55, sizeof(::object_detection::protos::LearningRate)},
  { 59, 65, sizeof(::object_detection::protos::ConstantLearningRate)},
  { 66, 78, sizeof(::object_detection::protos::ExponentialDecayLearningRate)},
  { 85, 92, sizeof(::object_detection::protos::ManualStepLearningRate_LearningRateSchedule)},
  { 94, 102, sizeof(::object_detection::protos::ManualStepLearningRate)},
  { 105, 115, sizeof(::object_detection::protos::CosineDecayLearningRate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_Optimizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RMSPropOptimizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_MomentumOptimizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_AdamOptimizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_LearningRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_ConstantLearningRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_ExponentialDecayLearningRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_ManualStepLearningRate_LearningRateSchedule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_ManualStepLearningRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_CosineDecayLearningRate_default_instance_),
};

const char descriptor_table_protodef_object_5fdetection_2fprotos_2foptimizer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'object_detection/protos/optimizer.prot"
  "o\022\027object_detection.protos\"\265\002\n\tOptimizer"
  "\022G\n\022rms_prop_optimizer\030\001 \001(\0132).object_de"
  "tection.protos.RMSPropOptimizerH\000\022H\n\022mom"
  "entum_optimizer\030\002 \001(\0132*.object_detection"
  ".protos.MomentumOptimizerH\000\022@\n\016adam_opti"
  "mizer\030\003 \001(\0132&.object_detection.protos.Ad"
  "amOptimizerH\000\022 \n\022use_moving_average\030\004 \001("
  "\010:\004true\022$\n\024moving_average_decay\030\005 \001(\002:\0060"
  ".9999B\013\n\toptimizer\"\237\001\n\020RMSPropOptimizer\022"
  "<\n\rlearning_rate\030\001 \001(\0132%.object_detectio"
  "n.protos.LearningRate\022%\n\030momentum_optimi"
  "zer_value\030\002 \001(\002:\0030.9\022\022\n\005decay\030\003 \001(\002:\0030.9"
  "\022\022\n\007epsilon\030\004 \001(\002:\0011\"x\n\021MomentumOptimize"
  "r\022<\n\rlearning_rate\030\001 \001(\0132%.object_detect"
  "ion.protos.LearningRate\022%\n\030momentum_opti"
  "mizer_value\030\002 \001(\002:\0030.9\"M\n\rAdamOptimizer\022"
  "<\n\rlearning_rate\030\001 \001(\0132%.object_detectio"
  "n.protos.LearningRate\"\200\003\n\014LearningRate\022O"
  "\n\026constant_learning_rate\030\001 \001(\0132-.object_"
  "detection.protos.ConstantLearningRateH\000\022"
  "`\n\037exponential_decay_learning_rate\030\002 \001(\013"
  "25.object_detection.protos.ExponentialDe"
  "cayLearningRateH\000\022T\n\031manual_step_learnin"
  "g_rate\030\003 \001(\0132/.object_detection.protos.M"
  "anualStepLearningRateH\000\022V\n\032cosine_decay_"
  "learning_rate\030\004 \001(\01320.object_detection.p"
  "rotos.CosineDecayLearningRateH\000B\017\n\rlearn"
  "ing_rate\"4\n\024ConstantLearningRate\022\034\n\rlear"
  "ning_rate\030\001 \001(\002:\0050.002\"\357\001\n\034ExponentialDe"
  "cayLearningRate\022$\n\025initial_learning_rate"
  "\030\001 \001(\002:\0050.002\022\034\n\013decay_steps\030\002 \001(\r:\0074000"
  "000\022\032\n\014decay_factor\030\003 \001(\002:\0040.95\022\027\n\tstair"
  "case\030\004 \001(\010:\004true\022\037\n\024burnin_learning_rate"
  "\030\005 \001(\002:\0010\022\027\n\014burnin_steps\030\006 \001(\r:\0010\022\034\n\021mi"
  "n_learning_rate\030\007 \001(\002:\0010\"\361\001\n\026ManualStepL"
  "earningRate\022$\n\025initial_learning_rate\030\001 \001"
  "(\002:\0050.002\022V\n\010schedule\030\002 \003(\0132D.object_det"
  "ection.protos.ManualStepLearningRate.Lea"
  "rningRateSchedule\022\025\n\006warmup\030\003 \001(\010:\005false"
  "\032B\n\024LearningRateSchedule\022\014\n\004step\030\001 \001(\r\022\034"
  "\n\rlearning_rate\030\002 \001(\002:\0050.002\"\276\001\n\027CosineD"
  "ecayLearningRate\022!\n\022learning_rate_base\030\001"
  " \001(\002:\0050.002\022\034\n\013total_steps\030\002 \001(\r:\007400000"
  "0\022$\n\024warmup_learning_rate\030\003 \001(\002:\0060.0002\022"
  "\033\n\014warmup_steps\030\004 \001(\r:\00510000\022\037\n\024hold_bas"
  "e_rate_steps\030\005 \001(\r:\0010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_object_5fdetection_2fprotos_2foptimizer_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_object_5fdetection_2fprotos_2foptimizer_2eproto_sccs[10] = {
  &scc_info_AdamOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto.base,
  &scc_info_ConstantLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base,
  &scc_info_CosineDecayLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base,
  &scc_info_ExponentialDecayLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base,
  &scc_info_LearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base,
  &scc_info_ManualStepLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base,
  &scc_info_ManualStepLearningRate_LearningRateSchedule_object_5fdetection_2fprotos_2foptimizer_2eproto.base,
  &scc_info_MomentumOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto.base,
  &scc_info_Optimizer_object_5fdetection_2fprotos_2foptimizer_2eproto.base,
  &scc_info_RMSPropOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_object_5fdetection_2fprotos_2foptimizer_2eproto_once;
static bool descriptor_table_object_5fdetection_2fprotos_2foptimizer_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2foptimizer_2eproto = {
  &descriptor_table_object_5fdetection_2fprotos_2foptimizer_2eproto_initialized, descriptor_table_protodef_object_5fdetection_2fprotos_2foptimizer_2eproto, "object_detection/protos/optimizer.proto", 1861,
  &descriptor_table_object_5fdetection_2fprotos_2foptimizer_2eproto_once, descriptor_table_object_5fdetection_2fprotos_2foptimizer_2eproto_sccs, descriptor_table_object_5fdetection_2fprotos_2foptimizer_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_object_5fdetection_2fprotos_2foptimizer_2eproto::offsets,
  file_level_metadata_object_5fdetection_2fprotos_2foptimizer_2eproto, 10, file_level_enum_descriptors_object_5fdetection_2fprotos_2foptimizer_2eproto, file_level_service_descriptors_object_5fdetection_2fprotos_2foptimizer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_object_5fdetection_2fprotos_2foptimizer_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_object_5fdetection_2fprotos_2foptimizer_2eproto), true);
namespace object_detection {
namespace protos {

// ===================================================================

void Optimizer::InitAsDefaultInstance() {
  ::object_detection::protos::_Optimizer_default_instance_.rms_prop_optimizer_ = const_cast< ::object_detection::protos::RMSPropOptimizer*>(
      ::object_detection::protos::RMSPropOptimizer::internal_default_instance());
  ::object_detection::protos::_Optimizer_default_instance_.momentum_optimizer_ = const_cast< ::object_detection::protos::MomentumOptimizer*>(
      ::object_detection::protos::MomentumOptimizer::internal_default_instance());
  ::object_detection::protos::_Optimizer_default_instance_.adam_optimizer_ = const_cast< ::object_detection::protos::AdamOptimizer*>(
      ::object_detection::protos::AdamOptimizer::internal_default_instance());
}
class Optimizer::_Internal {
 public:
  using HasBits = decltype(std::declval<Optimizer>()._has_bits_);
  static const ::object_detection::protos::RMSPropOptimizer& rms_prop_optimizer(const Optimizer* msg);
  static const ::object_detection::protos::MomentumOptimizer& momentum_optimizer(const Optimizer* msg);
  static const ::object_detection::protos::AdamOptimizer& adam_optimizer(const Optimizer* msg);
  static void set_has_use_moving_average(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_moving_average_decay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::object_detection::protos::RMSPropOptimizer&
Optimizer::_Internal::rms_prop_optimizer(const Optimizer* msg) {
  return *msg->optimizer_.rms_prop_optimizer_;
}
const ::object_detection::protos::MomentumOptimizer&
Optimizer::_Internal::momentum_optimizer(const Optimizer* msg) {
  return *msg->optimizer_.momentum_optimizer_;
}
const ::object_detection::protos::AdamOptimizer&
Optimizer::_Internal::adam_optimizer(const Optimizer* msg) {
  return *msg->optimizer_.adam_optimizer_;
}
void Optimizer::set_allocated_rms_prop_optimizer(::object_detection::protos::RMSPropOptimizer* rms_prop_optimizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_optimizer();
  if (rms_prop_optimizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rms_prop_optimizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rms_prop_optimizer, submessage_arena);
    }
    set_has_rms_prop_optimizer();
    optimizer_.rms_prop_optimizer_ = rms_prop_optimizer;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Optimizer.rms_prop_optimizer)
}
void Optimizer::set_allocated_momentum_optimizer(::object_detection::protos::MomentumOptimizer* momentum_optimizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_optimizer();
  if (momentum_optimizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      momentum_optimizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, momentum_optimizer, submessage_arena);
    }
    set_has_momentum_optimizer();
    optimizer_.momentum_optimizer_ = momentum_optimizer;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Optimizer.momentum_optimizer)
}
void Optimizer::set_allocated_adam_optimizer(::object_detection::protos::AdamOptimizer* adam_optimizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_optimizer();
  if (adam_optimizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      adam_optimizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adam_optimizer, submessage_arena);
    }
    set_has_adam_optimizer();
    optimizer_.adam_optimizer_ = adam_optimizer;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Optimizer.adam_optimizer)
}
Optimizer::Optimizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.Optimizer)
}
Optimizer::Optimizer(const Optimizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_moving_average_, &from.use_moving_average_,
    static_cast<size_t>(reinterpret_cast<char*>(&moving_average_decay_) -
    reinterpret_cast<char*>(&use_moving_average_)) + sizeof(moving_average_decay_));
  clear_has_optimizer();
  switch (from.optimizer_case()) {
    case kRmsPropOptimizer: {
      mutable_rms_prop_optimizer()->::object_detection::protos::RMSPropOptimizer::MergeFrom(from.rms_prop_optimizer());
      break;
    }
    case kMomentumOptimizer: {
      mutable_momentum_optimizer()->::object_detection::protos::MomentumOptimizer::MergeFrom(from.momentum_optimizer());
      break;
    }
    case kAdamOptimizer: {
      mutable_adam_optimizer()->::object_detection::protos::AdamOptimizer::MergeFrom(from.adam_optimizer());
      break;
    }
    case OPTIMIZER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.Optimizer)
}

void Optimizer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Optimizer_object_5fdetection_2fprotos_2foptimizer_2eproto.base);
  use_moving_average_ = true;
  moving_average_decay_ = 0.9999f;
  clear_has_optimizer();
}

Optimizer::~Optimizer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.Optimizer)
  SharedDtor();
}

void Optimizer::SharedDtor() {
  if (has_optimizer()) {
    clear_optimizer();
  }
}

void Optimizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Optimizer& Optimizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Optimizer_object_5fdetection_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void Optimizer::clear_optimizer() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.Optimizer)
  switch (optimizer_case()) {
    case kRmsPropOptimizer: {
      delete optimizer_.rms_prop_optimizer_;
      break;
    }
    case kMomentumOptimizer: {
      delete optimizer_.momentum_optimizer_;
      break;
    }
    case kAdamOptimizer: {
      delete optimizer_.adam_optimizer_;
      break;
    }
    case OPTIMIZER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIMIZER_NOT_SET;
}


void Optimizer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.Optimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    use_moving_average_ = true;
    moving_average_decay_ = 0.9999f;
  }
  clear_optimizer();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Optimizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.RMSPropOptimizer rms_prop_optimizer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_rms_prop_optimizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.MomentumOptimizer momentum_optimizer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_momentum_optimizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.AdamOptimizer adam_optimizer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_adam_optimizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_moving_average = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_use_moving_average(&has_bits);
          use_moving_average_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float moving_average_decay = 5 [default = 0.9999];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_moving_average_decay(&has_bits);
          moving_average_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Optimizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.Optimizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.RMSPropOptimizer rms_prop_optimizer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rms_prop_optimizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.MomentumOptimizer momentum_optimizer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_momentum_optimizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.AdamOptimizer adam_optimizer = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_adam_optimizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_moving_average = 4 [default = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_use_moving_average(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_moving_average_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float moving_average_decay = 5 [default = 0.9999];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_moving_average_decay(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &moving_average_decay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.Optimizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.Optimizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Optimizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.Optimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (optimizer_case()) {
    case kRmsPropOptimizer:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::rms_prop_optimizer(this), output);
      break;
    case kMomentumOptimizer:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::momentum_optimizer(this), output);
      break;
    case kAdamOptimizer:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, _Internal::adam_optimizer(this), output);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional bool use_moving_average = 4 [default = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->use_moving_average(), output);
  }

  // optional float moving_average_decay = 5 [default = 0.9999];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->moving_average_decay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.Optimizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* Optimizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.Optimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (optimizer_case()) {
    case kRmsPropOptimizer:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, _Internal::rms_prop_optimizer(this), target);
      break;
    case kMomentumOptimizer:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::momentum_optimizer(this), target);
      break;
    case kAdamOptimizer:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, _Internal::adam_optimizer(this), target);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional bool use_moving_average = 4 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->use_moving_average(), target);
  }

  // optional float moving_average_decay = 5 [default = 0.9999];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->moving_average_decay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.Optimizer)
  return target;
}

size_t Optimizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.Optimizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool use_moving_average = 4 [default = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float moving_average_decay = 5 [default = 0.9999];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  switch (optimizer_case()) {
    // optional .object_detection.protos.RMSPropOptimizer rms_prop_optimizer = 1;
    case kRmsPropOptimizer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optimizer_.rms_prop_optimizer_);
      break;
    }
    // optional .object_detection.protos.MomentumOptimizer momentum_optimizer = 2;
    case kMomentumOptimizer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optimizer_.momentum_optimizer_);
      break;
    }
    // optional .object_detection.protos.AdamOptimizer adam_optimizer = 3;
    case kAdamOptimizer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optimizer_.adam_optimizer_);
      break;
    }
    case OPTIMIZER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optimizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.Optimizer)
  GOOGLE_DCHECK_NE(&from, this);
  const Optimizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optimizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.Optimizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.Optimizer)
    MergeFrom(*source);
  }
}

void Optimizer::MergeFrom(const Optimizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.Optimizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      use_moving_average_ = from.use_moving_average_;
    }
    if (cached_has_bits & 0x00000002u) {
      moving_average_decay_ = from.moving_average_decay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.optimizer_case()) {
    case kRmsPropOptimizer: {
      mutable_rms_prop_optimizer()->::object_detection::protos::RMSPropOptimizer::MergeFrom(from.rms_prop_optimizer());
      break;
    }
    case kMomentumOptimizer: {
      mutable_momentum_optimizer()->::object_detection::protos::MomentumOptimizer::MergeFrom(from.momentum_optimizer());
      break;
    }
    case kAdamOptimizer: {
      mutable_adam_optimizer()->::object_detection::protos::AdamOptimizer::MergeFrom(from.adam_optimizer());
      break;
    }
    case OPTIMIZER_NOT_SET: {
      break;
    }
  }
}

void Optimizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.Optimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optimizer::CopyFrom(const Optimizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.Optimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optimizer::IsInitialized() const {
  return true;
}

void Optimizer::InternalSwap(Optimizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(use_moving_average_, other->use_moving_average_);
  swap(moving_average_decay_, other->moving_average_decay_);
  swap(optimizer_, other->optimizer_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Optimizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RMSPropOptimizer::InitAsDefaultInstance() {
  ::object_detection::protos::_RMSPropOptimizer_default_instance_._instance.get_mutable()->learning_rate_ = const_cast< ::object_detection::protos::LearningRate*>(
      ::object_detection::protos::LearningRate::internal_default_instance());
}
class RMSPropOptimizer::_Internal {
 public:
  using HasBits = decltype(std::declval<RMSPropOptimizer>()._has_bits_);
  static const ::object_detection::protos::LearningRate& learning_rate(const RMSPropOptimizer* msg);
  static void set_has_learning_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_momentum_optimizer_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_decay(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_epsilon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::object_detection::protos::LearningRate&
RMSPropOptimizer::_Internal::learning_rate(const RMSPropOptimizer* msg) {
  return *msg->learning_rate_;
}
RMSPropOptimizer::RMSPropOptimizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RMSPropOptimizer)
}
RMSPropOptimizer::RMSPropOptimizer(const RMSPropOptimizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_learning_rate()) {
    learning_rate_ = new ::object_detection::protos::LearningRate(*from.learning_rate_);
  } else {
    learning_rate_ = nullptr;
  }
  ::memcpy(&epsilon_, &from.epsilon_,
    static_cast<size_t>(reinterpret_cast<char*>(&decay_) -
    reinterpret_cast<char*>(&epsilon_)) + sizeof(decay_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RMSPropOptimizer)
}

void RMSPropOptimizer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RMSPropOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto.base);
  learning_rate_ = nullptr;
  epsilon_ = 1;
  momentum_optimizer_value_ = 0.9f;
  decay_ = 0.9f;
}

RMSPropOptimizer::~RMSPropOptimizer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RMSPropOptimizer)
  SharedDtor();
}

void RMSPropOptimizer::SharedDtor() {
  if (this != internal_default_instance()) delete learning_rate_;
}

void RMSPropOptimizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RMSPropOptimizer& RMSPropOptimizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RMSPropOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void RMSPropOptimizer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RMSPropOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(learning_rate_ != nullptr);
      learning_rate_->Clear();
    }
    epsilon_ = 1;
    momentum_optimizer_value_ = 0.9f;
    decay_ = 0.9f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RMSPropOptimizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.LearningRate learning_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_learning_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float momentum_optimizer_value = 2 [default = 0.9];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_momentum_optimizer_value(&has_bits);
          momentum_optimizer_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float decay = 3 [default = 0.9];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_decay(&has_bits);
          decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float epsilon = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_epsilon(&has_bits);
          epsilon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RMSPropOptimizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RMSPropOptimizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.LearningRate learning_rate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_learning_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float momentum_optimizer_value = 2 [default = 0.9];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_momentum_optimizer_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_optimizer_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float decay = 3 [default = 0.9];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_decay(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float epsilon = 4 [default = 1];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_epsilon(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &epsilon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RMSPropOptimizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RMSPropOptimizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RMSPropOptimizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RMSPropOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.LearningRate learning_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::learning_rate(this), output);
  }

  // optional float momentum_optimizer_value = 2 [default = 0.9];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->momentum_optimizer_value(), output);
  }

  // optional float decay = 3 [default = 0.9];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->decay(), output);
  }

  // optional float epsilon = 4 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->epsilon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RMSPropOptimizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* RMSPropOptimizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RMSPropOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.LearningRate learning_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::learning_rate(this), target);
  }

  // optional float momentum_optimizer_value = 2 [default = 0.9];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->momentum_optimizer_value(), target);
  }

  // optional float decay = 3 [default = 0.9];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->decay(), target);
  }

  // optional float epsilon = 4 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->epsilon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RMSPropOptimizer)
  return target;
}

size_t RMSPropOptimizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RMSPropOptimizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .object_detection.protos.LearningRate learning_rate = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *learning_rate_);
    }

    // optional float epsilon = 4 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float momentum_optimizer_value = 2 [default = 0.9];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float decay = 3 [default = 0.9];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RMSPropOptimizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RMSPropOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  const RMSPropOptimizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RMSPropOptimizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RMSPropOptimizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RMSPropOptimizer)
    MergeFrom(*source);
  }
}

void RMSPropOptimizer::MergeFrom(const RMSPropOptimizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RMSPropOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_learning_rate()->::object_detection::protos::LearningRate::MergeFrom(from.learning_rate());
    }
    if (cached_has_bits & 0x00000002u) {
      epsilon_ = from.epsilon_;
    }
    if (cached_has_bits & 0x00000004u) {
      momentum_optimizer_value_ = from.momentum_optimizer_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      decay_ = from.decay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RMSPropOptimizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RMSPropOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMSPropOptimizer::CopyFrom(const RMSPropOptimizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RMSPropOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMSPropOptimizer::IsInitialized() const {
  return true;
}

void RMSPropOptimizer::InternalSwap(RMSPropOptimizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(learning_rate_, other->learning_rate_);
  swap(epsilon_, other->epsilon_);
  swap(momentum_optimizer_value_, other->momentum_optimizer_value_);
  swap(decay_, other->decay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RMSPropOptimizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MomentumOptimizer::InitAsDefaultInstance() {
  ::object_detection::protos::_MomentumOptimizer_default_instance_._instance.get_mutable()->learning_rate_ = const_cast< ::object_detection::protos::LearningRate*>(
      ::object_detection::protos::LearningRate::internal_default_instance());
}
class MomentumOptimizer::_Internal {
 public:
  using HasBits = decltype(std::declval<MomentumOptimizer>()._has_bits_);
  static const ::object_detection::protos::LearningRate& learning_rate(const MomentumOptimizer* msg);
  static void set_has_learning_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_momentum_optimizer_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::object_detection::protos::LearningRate&
MomentumOptimizer::_Internal::learning_rate(const MomentumOptimizer* msg) {
  return *msg->learning_rate_;
}
MomentumOptimizer::MomentumOptimizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.MomentumOptimizer)
}
MomentumOptimizer::MomentumOptimizer(const MomentumOptimizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_learning_rate()) {
    learning_rate_ = new ::object_detection::protos::LearningRate(*from.learning_rate_);
  } else {
    learning_rate_ = nullptr;
  }
  momentum_optimizer_value_ = from.momentum_optimizer_value_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.MomentumOptimizer)
}

void MomentumOptimizer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MomentumOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto.base);
  learning_rate_ = nullptr;
  momentum_optimizer_value_ = 0.9f;
}

MomentumOptimizer::~MomentumOptimizer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.MomentumOptimizer)
  SharedDtor();
}

void MomentumOptimizer::SharedDtor() {
  if (this != internal_default_instance()) delete learning_rate_;
}

void MomentumOptimizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MomentumOptimizer& MomentumOptimizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MomentumOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void MomentumOptimizer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.MomentumOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(learning_rate_ != nullptr);
      learning_rate_->Clear();
    }
    momentum_optimizer_value_ = 0.9f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MomentumOptimizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.LearningRate learning_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_learning_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float momentum_optimizer_value = 2 [default = 0.9];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_momentum_optimizer_value(&has_bits);
          momentum_optimizer_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MomentumOptimizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.MomentumOptimizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.LearningRate learning_rate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_learning_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float momentum_optimizer_value = 2 [default = 0.9];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_momentum_optimizer_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_optimizer_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.MomentumOptimizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.MomentumOptimizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MomentumOptimizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.MomentumOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.LearningRate learning_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::learning_rate(this), output);
  }

  // optional float momentum_optimizer_value = 2 [default = 0.9];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->momentum_optimizer_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.MomentumOptimizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* MomentumOptimizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.MomentumOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.LearningRate learning_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::learning_rate(this), target);
  }

  // optional float momentum_optimizer_value = 2 [default = 0.9];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->momentum_optimizer_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.MomentumOptimizer)
  return target;
}

size_t MomentumOptimizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.MomentumOptimizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .object_detection.protos.LearningRate learning_rate = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *learning_rate_);
    }

    // optional float momentum_optimizer_value = 2 [default = 0.9];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MomentumOptimizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.MomentumOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  const MomentumOptimizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MomentumOptimizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.MomentumOptimizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.MomentumOptimizer)
    MergeFrom(*source);
  }
}

void MomentumOptimizer::MergeFrom(const MomentumOptimizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.MomentumOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_learning_rate()->::object_detection::protos::LearningRate::MergeFrom(from.learning_rate());
    }
    if (cached_has_bits & 0x00000002u) {
      momentum_optimizer_value_ = from.momentum_optimizer_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MomentumOptimizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.MomentumOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MomentumOptimizer::CopyFrom(const MomentumOptimizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.MomentumOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MomentumOptimizer::IsInitialized() const {
  return true;
}

void MomentumOptimizer::InternalSwap(MomentumOptimizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(learning_rate_, other->learning_rate_);
  swap(momentum_optimizer_value_, other->momentum_optimizer_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MomentumOptimizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdamOptimizer::InitAsDefaultInstance() {
  ::object_detection::protos::_AdamOptimizer_default_instance_._instance.get_mutable()->learning_rate_ = const_cast< ::object_detection::protos::LearningRate*>(
      ::object_detection::protos::LearningRate::internal_default_instance());
}
class AdamOptimizer::_Internal {
 public:
  using HasBits = decltype(std::declval<AdamOptimizer>()._has_bits_);
  static const ::object_detection::protos::LearningRate& learning_rate(const AdamOptimizer* msg);
  static void set_has_learning_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::object_detection::protos::LearningRate&
AdamOptimizer::_Internal::learning_rate(const AdamOptimizer* msg) {
  return *msg->learning_rate_;
}
AdamOptimizer::AdamOptimizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.AdamOptimizer)
}
AdamOptimizer::AdamOptimizer(const AdamOptimizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_learning_rate()) {
    learning_rate_ = new ::object_detection::protos::LearningRate(*from.learning_rate_);
  } else {
    learning_rate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.AdamOptimizer)
}

void AdamOptimizer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdamOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto.base);
  learning_rate_ = nullptr;
}

AdamOptimizer::~AdamOptimizer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.AdamOptimizer)
  SharedDtor();
}

void AdamOptimizer::SharedDtor() {
  if (this != internal_default_instance()) delete learning_rate_;
}

void AdamOptimizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdamOptimizer& AdamOptimizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdamOptimizer_object_5fdetection_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void AdamOptimizer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.AdamOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(learning_rate_ != nullptr);
    learning_rate_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdamOptimizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.LearningRate learning_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_learning_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdamOptimizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.AdamOptimizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.LearningRate learning_rate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_learning_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.AdamOptimizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.AdamOptimizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdamOptimizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.AdamOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.LearningRate learning_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::learning_rate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.AdamOptimizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* AdamOptimizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.AdamOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.LearningRate learning_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::learning_rate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.AdamOptimizer)
  return target;
}

size_t AdamOptimizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.AdamOptimizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .object_detection.protos.LearningRate learning_rate = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *learning_rate_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdamOptimizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.AdamOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  const AdamOptimizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdamOptimizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.AdamOptimizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.AdamOptimizer)
    MergeFrom(*source);
  }
}

void AdamOptimizer::MergeFrom(const AdamOptimizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.AdamOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_learning_rate()) {
    mutable_learning_rate()->::object_detection::protos::LearningRate::MergeFrom(from.learning_rate());
  }
}

void AdamOptimizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.AdamOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdamOptimizer::CopyFrom(const AdamOptimizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.AdamOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdamOptimizer::IsInitialized() const {
  return true;
}

void AdamOptimizer::InternalSwap(AdamOptimizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(learning_rate_, other->learning_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdamOptimizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LearningRate::InitAsDefaultInstance() {
  ::object_detection::protos::_LearningRate_default_instance_.constant_learning_rate_ = const_cast< ::object_detection::protos::ConstantLearningRate*>(
      ::object_detection::protos::ConstantLearningRate::internal_default_instance());
  ::object_detection::protos::_LearningRate_default_instance_.exponential_decay_learning_rate_ = const_cast< ::object_detection::protos::ExponentialDecayLearningRate*>(
      ::object_detection::protos::ExponentialDecayLearningRate::internal_default_instance());
  ::object_detection::protos::_LearningRate_default_instance_.manual_step_learning_rate_ = const_cast< ::object_detection::protos::ManualStepLearningRate*>(
      ::object_detection::protos::ManualStepLearningRate::internal_default_instance());
  ::object_detection::protos::_LearningRate_default_instance_.cosine_decay_learning_rate_ = const_cast< ::object_detection::protos::CosineDecayLearningRate*>(
      ::object_detection::protos::CosineDecayLearningRate::internal_default_instance());
}
class LearningRate::_Internal {
 public:
  using HasBits = decltype(std::declval<LearningRate>()._has_bits_);
  static const ::object_detection::protos::ConstantLearningRate& constant_learning_rate(const LearningRate* msg);
  static const ::object_detection::protos::ExponentialDecayLearningRate& exponential_decay_learning_rate(const LearningRate* msg);
  static const ::object_detection::protos::ManualStepLearningRate& manual_step_learning_rate(const LearningRate* msg);
  static const ::object_detection::protos::CosineDecayLearningRate& cosine_decay_learning_rate(const LearningRate* msg);
};

const ::object_detection::protos::ConstantLearningRate&
LearningRate::_Internal::constant_learning_rate(const LearningRate* msg) {
  return *msg->learning_rate_.constant_learning_rate_;
}
const ::object_detection::protos::ExponentialDecayLearningRate&
LearningRate::_Internal::exponential_decay_learning_rate(const LearningRate* msg) {
  return *msg->learning_rate_.exponential_decay_learning_rate_;
}
const ::object_detection::protos::ManualStepLearningRate&
LearningRate::_Internal::manual_step_learning_rate(const LearningRate* msg) {
  return *msg->learning_rate_.manual_step_learning_rate_;
}
const ::object_detection::protos::CosineDecayLearningRate&
LearningRate::_Internal::cosine_decay_learning_rate(const LearningRate* msg) {
  return *msg->learning_rate_.cosine_decay_learning_rate_;
}
void LearningRate::set_allocated_constant_learning_rate(::object_detection::protos::ConstantLearningRate* constant_learning_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_learning_rate();
  if (constant_learning_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      constant_learning_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constant_learning_rate, submessage_arena);
    }
    set_has_constant_learning_rate();
    learning_rate_.constant_learning_rate_ = constant_learning_rate;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.LearningRate.constant_learning_rate)
}
void LearningRate::set_allocated_exponential_decay_learning_rate(::object_detection::protos::ExponentialDecayLearningRate* exponential_decay_learning_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_learning_rate();
  if (exponential_decay_learning_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exponential_decay_learning_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exponential_decay_learning_rate, submessage_arena);
    }
    set_has_exponential_decay_learning_rate();
    learning_rate_.exponential_decay_learning_rate_ = exponential_decay_learning_rate;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.LearningRate.exponential_decay_learning_rate)
}
void LearningRate::set_allocated_manual_step_learning_rate(::object_detection::protos::ManualStepLearningRate* manual_step_learning_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_learning_rate();
  if (manual_step_learning_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      manual_step_learning_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, manual_step_learning_rate, submessage_arena);
    }
    set_has_manual_step_learning_rate();
    learning_rate_.manual_step_learning_rate_ = manual_step_learning_rate;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.LearningRate.manual_step_learning_rate)
}
void LearningRate::set_allocated_cosine_decay_learning_rate(::object_detection::protos::CosineDecayLearningRate* cosine_decay_learning_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_learning_rate();
  if (cosine_decay_learning_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cosine_decay_learning_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cosine_decay_learning_rate, submessage_arena);
    }
    set_has_cosine_decay_learning_rate();
    learning_rate_.cosine_decay_learning_rate_ = cosine_decay_learning_rate;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.LearningRate.cosine_decay_learning_rate)
}
LearningRate::LearningRate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.LearningRate)
}
LearningRate::LearningRate(const LearningRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_learning_rate();
  switch (from.learning_rate_case()) {
    case kConstantLearningRate: {
      mutable_constant_learning_rate()->::object_detection::protos::ConstantLearningRate::MergeFrom(from.constant_learning_rate());
      break;
    }
    case kExponentialDecayLearningRate: {
      mutable_exponential_decay_learning_rate()->::object_detection::protos::ExponentialDecayLearningRate::MergeFrom(from.exponential_decay_learning_rate());
      break;
    }
    case kManualStepLearningRate: {
      mutable_manual_step_learning_rate()->::object_detection::protos::ManualStepLearningRate::MergeFrom(from.manual_step_learning_rate());
      break;
    }
    case kCosineDecayLearningRate: {
      mutable_cosine_decay_learning_rate()->::object_detection::protos::CosineDecayLearningRate::MergeFrom(from.cosine_decay_learning_rate());
      break;
    }
    case LEARNING_RATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.LearningRate)
}

void LearningRate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base);
  clear_has_learning_rate();
}

LearningRate::~LearningRate() {
  // @@protoc_insertion_point(destructor:object_detection.protos.LearningRate)
  SharedDtor();
}

void LearningRate::SharedDtor() {
  if (has_learning_rate()) {
    clear_learning_rate();
  }
}

void LearningRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LearningRate& LearningRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void LearningRate::clear_learning_rate() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.LearningRate)
  switch (learning_rate_case()) {
    case kConstantLearningRate: {
      delete learning_rate_.constant_learning_rate_;
      break;
    }
    case kExponentialDecayLearningRate: {
      delete learning_rate_.exponential_decay_learning_rate_;
      break;
    }
    case kManualStepLearningRate: {
      delete learning_rate_.manual_step_learning_rate_;
      break;
    }
    case kCosineDecayLearningRate: {
      delete learning_rate_.cosine_decay_learning_rate_;
      break;
    }
    case LEARNING_RATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LEARNING_RATE_NOT_SET;
}


void LearningRate::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.LearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_learning_rate();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LearningRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.ConstantLearningRate constant_learning_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_constant_learning_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.ExponentialDecayLearningRate exponential_decay_learning_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_exponential_decay_learning_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.ManualStepLearningRate manual_step_learning_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_manual_step_learning_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.CosineDecayLearningRate cosine_decay_learning_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_cosine_decay_learning_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LearningRate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.LearningRate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.ConstantLearningRate constant_learning_rate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_constant_learning_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ExponentialDecayLearningRate exponential_decay_learning_rate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exponential_decay_learning_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ManualStepLearningRate manual_step_learning_rate = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_manual_step_learning_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.CosineDecayLearningRate cosine_decay_learning_rate = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cosine_decay_learning_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.LearningRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.LearningRate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LearningRate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.LearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (learning_rate_case()) {
    case kConstantLearningRate:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::constant_learning_rate(this), output);
      break;
    case kExponentialDecayLearningRate:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::exponential_decay_learning_rate(this), output);
      break;
    case kManualStepLearningRate:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, _Internal::manual_step_learning_rate(this), output);
      break;
    case kCosineDecayLearningRate:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, _Internal::cosine_decay_learning_rate(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.LearningRate)
}

::PROTOBUF_NAMESPACE_ID::uint8* LearningRate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.LearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (learning_rate_case()) {
    case kConstantLearningRate:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, _Internal::constant_learning_rate(this), target);
      break;
    case kExponentialDecayLearningRate:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::exponential_decay_learning_rate(this), target);
      break;
    case kManualStepLearningRate:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, _Internal::manual_step_learning_rate(this), target);
      break;
    case kCosineDecayLearningRate:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, _Internal::cosine_decay_learning_rate(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.LearningRate)
  return target;
}

size_t LearningRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.LearningRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (learning_rate_case()) {
    // optional .object_detection.protos.ConstantLearningRate constant_learning_rate = 1;
    case kConstantLearningRate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *learning_rate_.constant_learning_rate_);
      break;
    }
    // optional .object_detection.protos.ExponentialDecayLearningRate exponential_decay_learning_rate = 2;
    case kExponentialDecayLearningRate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *learning_rate_.exponential_decay_learning_rate_);
      break;
    }
    // optional .object_detection.protos.ManualStepLearningRate manual_step_learning_rate = 3;
    case kManualStepLearningRate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *learning_rate_.manual_step_learning_rate_);
      break;
    }
    // optional .object_detection.protos.CosineDecayLearningRate cosine_decay_learning_rate = 4;
    case kCosineDecayLearningRate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *learning_rate_.cosine_decay_learning_rate_);
      break;
    }
    case LEARNING_RATE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LearningRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.LearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  const LearningRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LearningRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.LearningRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.LearningRate)
    MergeFrom(*source);
  }
}

void LearningRate::MergeFrom(const LearningRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.LearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.learning_rate_case()) {
    case kConstantLearningRate: {
      mutable_constant_learning_rate()->::object_detection::protos::ConstantLearningRate::MergeFrom(from.constant_learning_rate());
      break;
    }
    case kExponentialDecayLearningRate: {
      mutable_exponential_decay_learning_rate()->::object_detection::protos::ExponentialDecayLearningRate::MergeFrom(from.exponential_decay_learning_rate());
      break;
    }
    case kManualStepLearningRate: {
      mutable_manual_step_learning_rate()->::object_detection::protos::ManualStepLearningRate::MergeFrom(from.manual_step_learning_rate());
      break;
    }
    case kCosineDecayLearningRate: {
      mutable_cosine_decay_learning_rate()->::object_detection::protos::CosineDecayLearningRate::MergeFrom(from.cosine_decay_learning_rate());
      break;
    }
    case LEARNING_RATE_NOT_SET: {
      break;
    }
  }
}

void LearningRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.LearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningRate::CopyFrom(const LearningRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.LearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningRate::IsInitialized() const {
  return true;
}

void LearningRate::InternalSwap(LearningRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(learning_rate_, other->learning_rate_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LearningRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConstantLearningRate::InitAsDefaultInstance() {
}
class ConstantLearningRate::_Internal {
 public:
  using HasBits = decltype(std::declval<ConstantLearningRate>()._has_bits_);
  static void set_has_learning_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ConstantLearningRate::ConstantLearningRate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ConstantLearningRate)
}
ConstantLearningRate::ConstantLearningRate(const ConstantLearningRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  learning_rate_ = from.learning_rate_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ConstantLearningRate)
}

void ConstantLearningRate::SharedCtor() {
  learning_rate_ = 0.002f;
}

ConstantLearningRate::~ConstantLearningRate() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ConstantLearningRate)
  SharedDtor();
}

void ConstantLearningRate::SharedDtor() {
}

void ConstantLearningRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConstantLearningRate& ConstantLearningRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConstantLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void ConstantLearningRate::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ConstantLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  learning_rate_ = 0.002f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConstantLearningRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float learning_rate = 1 [default = 0.002];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_learning_rate(&has_bits);
          learning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConstantLearningRate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ConstantLearningRate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float learning_rate = 1 [default = 0.002];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_learning_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ConstantLearningRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ConstantLearningRate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConstantLearningRate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ConstantLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float learning_rate = 1 [default = 0.002];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->learning_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ConstantLearningRate)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConstantLearningRate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ConstantLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float learning_rate = 1 [default = 0.002];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->learning_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ConstantLearningRate)
  return target;
}

size_t ConstantLearningRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ConstantLearningRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float learning_rate = 1 [default = 0.002];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstantLearningRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ConstantLearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstantLearningRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConstantLearningRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ConstantLearningRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ConstantLearningRate)
    MergeFrom(*source);
  }
}

void ConstantLearningRate::MergeFrom(const ConstantLearningRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ConstantLearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_learning_rate()) {
    set_learning_rate(from.learning_rate());
  }
}

void ConstantLearningRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ConstantLearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstantLearningRate::CopyFrom(const ConstantLearningRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ConstantLearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstantLearningRate::IsInitialized() const {
  return true;
}

void ConstantLearningRate::InternalSwap(ConstantLearningRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(learning_rate_, other->learning_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConstantLearningRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExponentialDecayLearningRate::InitAsDefaultInstance() {
}
class ExponentialDecayLearningRate::_Internal {
 public:
  using HasBits = decltype(std::declval<ExponentialDecayLearningRate>()._has_bits_);
  static void set_has_initial_learning_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_decay_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_decay_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_staircase(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_burnin_learning_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_burnin_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_learning_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ExponentialDecayLearningRate::ExponentialDecayLearningRate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ExponentialDecayLearningRate)
}
ExponentialDecayLearningRate::ExponentialDecayLearningRate(const ExponentialDecayLearningRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&burnin_learning_rate_, &from.burnin_learning_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&staircase_) -
    reinterpret_cast<char*>(&burnin_learning_rate_)) + sizeof(staircase_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ExponentialDecayLearningRate)
}

void ExponentialDecayLearningRate::SharedCtor() {
  ::memset(&burnin_learning_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_learning_rate_) -
      reinterpret_cast<char*>(&burnin_learning_rate_)) + sizeof(min_learning_rate_));
  initial_learning_rate_ = 0.002f;
  decay_steps_ = 4000000u;
  decay_factor_ = 0.95f;
  staircase_ = true;
}

ExponentialDecayLearningRate::~ExponentialDecayLearningRate() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ExponentialDecayLearningRate)
  SharedDtor();
}

void ExponentialDecayLearningRate::SharedDtor() {
}

void ExponentialDecayLearningRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExponentialDecayLearningRate& ExponentialDecayLearningRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExponentialDecayLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void ExponentialDecayLearningRate::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ExponentialDecayLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&burnin_learning_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_learning_rate_) -
        reinterpret_cast<char*>(&burnin_learning_rate_)) + sizeof(min_learning_rate_));
    initial_learning_rate_ = 0.002f;
    decay_steps_ = 4000000u;
    decay_factor_ = 0.95f;
    staircase_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExponentialDecayLearningRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float initial_learning_rate = 1 [default = 0.002];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_initial_learning_rate(&has_bits);
          initial_learning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 decay_steps = 2 [default = 4000000];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_decay_steps(&has_bits);
          decay_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float decay_factor = 3 [default = 0.95];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_decay_factor(&has_bits);
          decay_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool staircase = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_staircase(&has_bits);
          staircase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float burnin_learning_rate = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_burnin_learning_rate(&has_bits);
          burnin_learning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 burnin_steps = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_burnin_steps(&has_bits);
          burnin_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float min_learning_rate = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_min_learning_rate(&has_bits);
          min_learning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExponentialDecayLearningRate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ExponentialDecayLearningRate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float initial_learning_rate = 1 [default = 0.002];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_initial_learning_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initial_learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 decay_steps = 2 [default = 4000000];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_decay_steps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decay_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float decay_factor = 3 [default = 0.95];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_decay_factor(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decay_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool staircase = 4 [default = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_staircase(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &staircase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float burnin_learning_rate = 5 [default = 0];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_burnin_learning_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &burnin_learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 burnin_steps = 6 [default = 0];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_burnin_steps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &burnin_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_learning_rate = 7 [default = 0];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          _Internal::set_has_min_learning_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ExponentialDecayLearningRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ExponentialDecayLearningRate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExponentialDecayLearningRate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ExponentialDecayLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float initial_learning_rate = 1 [default = 0.002];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->initial_learning_rate(), output);
  }

  // optional uint32 decay_steps = 2 [default = 4000000];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->decay_steps(), output);
  }

  // optional float decay_factor = 3 [default = 0.95];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->decay_factor(), output);
  }

  // optional bool staircase = 4 [default = true];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->staircase(), output);
  }

  // optional float burnin_learning_rate = 5 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->burnin_learning_rate(), output);
  }

  // optional uint32 burnin_steps = 6 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->burnin_steps(), output);
  }

  // optional float min_learning_rate = 7 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->min_learning_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ExponentialDecayLearningRate)
}

::PROTOBUF_NAMESPACE_ID::uint8* ExponentialDecayLearningRate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ExponentialDecayLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float initial_learning_rate = 1 [default = 0.002];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->initial_learning_rate(), target);
  }

  // optional uint32 decay_steps = 2 [default = 4000000];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->decay_steps(), target);
  }

  // optional float decay_factor = 3 [default = 0.95];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->decay_factor(), target);
  }

  // optional bool staircase = 4 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->staircase(), target);
  }

  // optional float burnin_learning_rate = 5 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->burnin_learning_rate(), target);
  }

  // optional uint32 burnin_steps = 6 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->burnin_steps(), target);
  }

  // optional float min_learning_rate = 7 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->min_learning_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ExponentialDecayLearningRate)
  return target;
}

size_t ExponentialDecayLearningRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ExponentialDecayLearningRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional float burnin_learning_rate = 5 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 burnin_steps = 6 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->burnin_steps());
    }

    // optional float min_learning_rate = 7 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float initial_learning_rate = 1 [default = 0.002];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 decay_steps = 2 [default = 4000000];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->decay_steps());
    }

    // optional float decay_factor = 3 [default = 0.95];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional bool staircase = 4 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExponentialDecayLearningRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ExponentialDecayLearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  const ExponentialDecayLearningRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExponentialDecayLearningRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ExponentialDecayLearningRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ExponentialDecayLearningRate)
    MergeFrom(*source);
  }
}

void ExponentialDecayLearningRate::MergeFrom(const ExponentialDecayLearningRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ExponentialDecayLearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      burnin_learning_rate_ = from.burnin_learning_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      burnin_steps_ = from.burnin_steps_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_learning_rate_ = from.min_learning_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      initial_learning_rate_ = from.initial_learning_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      decay_steps_ = from.decay_steps_;
    }
    if (cached_has_bits & 0x00000020u) {
      decay_factor_ = from.decay_factor_;
    }
    if (cached_has_bits & 0x00000040u) {
      staircase_ = from.staircase_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExponentialDecayLearningRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ExponentialDecayLearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExponentialDecayLearningRate::CopyFrom(const ExponentialDecayLearningRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ExponentialDecayLearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExponentialDecayLearningRate::IsInitialized() const {
  return true;
}

void ExponentialDecayLearningRate::InternalSwap(ExponentialDecayLearningRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(burnin_learning_rate_, other->burnin_learning_rate_);
  swap(burnin_steps_, other->burnin_steps_);
  swap(min_learning_rate_, other->min_learning_rate_);
  swap(initial_learning_rate_, other->initial_learning_rate_);
  swap(decay_steps_, other->decay_steps_);
  swap(decay_factor_, other->decay_factor_);
  swap(staircase_, other->staircase_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExponentialDecayLearningRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManualStepLearningRate_LearningRateSchedule::InitAsDefaultInstance() {
}
class ManualStepLearningRate_LearningRateSchedule::_Internal {
 public:
  using HasBits = decltype(std::declval<ManualStepLearningRate_LearningRateSchedule>()._has_bits_);
  static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_learning_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ManualStepLearningRate_LearningRateSchedule::ManualStepLearningRate_LearningRateSchedule()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ManualStepLearningRate.LearningRateSchedule)
}
ManualStepLearningRate_LearningRateSchedule::ManualStepLearningRate_LearningRateSchedule(const ManualStepLearningRate_LearningRateSchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&step_, &from.step_,
    static_cast<size_t>(reinterpret_cast<char*>(&learning_rate_) -
    reinterpret_cast<char*>(&step_)) + sizeof(learning_rate_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ManualStepLearningRate.LearningRateSchedule)
}

void ManualStepLearningRate_LearningRateSchedule::SharedCtor() {
  step_ = 0u;
  learning_rate_ = 0.002f;
}

ManualStepLearningRate_LearningRateSchedule::~ManualStepLearningRate_LearningRateSchedule() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ManualStepLearningRate.LearningRateSchedule)
  SharedDtor();
}

void ManualStepLearningRate_LearningRateSchedule::SharedDtor() {
}

void ManualStepLearningRate_LearningRateSchedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManualStepLearningRate_LearningRateSchedule& ManualStepLearningRate_LearningRateSchedule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManualStepLearningRate_LearningRateSchedule_object_5fdetection_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void ManualStepLearningRate_LearningRateSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ManualStepLearningRate.LearningRateSchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    step_ = 0u;
    learning_rate_ = 0.002f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ManualStepLearningRate_LearningRateSchedule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 step = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_step(&has_bits);
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float learning_rate = 2 [default = 0.002];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_learning_rate(&has_bits);
          learning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ManualStepLearningRate_LearningRateSchedule::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ManualStepLearningRate.LearningRateSchedule)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 step = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_step(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float learning_rate = 2 [default = 0.002];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_learning_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ManualStepLearningRate.LearningRateSchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ManualStepLearningRate.LearningRateSchedule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ManualStepLearningRate_LearningRateSchedule::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ManualStepLearningRate.LearningRateSchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 step = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->step(), output);
  }

  // optional float learning_rate = 2 [default = 0.002];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->learning_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ManualStepLearningRate.LearningRateSchedule)
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualStepLearningRate_LearningRateSchedule::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ManualStepLearningRate.LearningRateSchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 step = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->step(), target);
  }

  // optional float learning_rate = 2 [default = 0.002];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->learning_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ManualStepLearningRate.LearningRateSchedule)
  return target;
}

size_t ManualStepLearningRate_LearningRateSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ManualStepLearningRate.LearningRateSchedule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 step = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->step());
    }

    // optional float learning_rate = 2 [default = 0.002];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManualStepLearningRate_LearningRateSchedule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ManualStepLearningRate.LearningRateSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualStepLearningRate_LearningRateSchedule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManualStepLearningRate_LearningRateSchedule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ManualStepLearningRate.LearningRateSchedule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ManualStepLearningRate.LearningRateSchedule)
    MergeFrom(*source);
  }
}

void ManualStepLearningRate_LearningRateSchedule::MergeFrom(const ManualStepLearningRate_LearningRateSchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ManualStepLearningRate.LearningRateSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      step_ = from.step_;
    }
    if (cached_has_bits & 0x00000002u) {
      learning_rate_ = from.learning_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ManualStepLearningRate_LearningRateSchedule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ManualStepLearningRate.LearningRateSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualStepLearningRate_LearningRateSchedule::CopyFrom(const ManualStepLearningRate_LearningRateSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ManualStepLearningRate.LearningRateSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualStepLearningRate_LearningRateSchedule::IsInitialized() const {
  return true;
}

void ManualStepLearningRate_LearningRateSchedule::InternalSwap(ManualStepLearningRate_LearningRateSchedule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(step_, other->step_);
  swap(learning_rate_, other->learning_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualStepLearningRate_LearningRateSchedule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManualStepLearningRate::InitAsDefaultInstance() {
}
class ManualStepLearningRate::_Internal {
 public:
  using HasBits = decltype(std::declval<ManualStepLearningRate>()._has_bits_);
  static void set_has_initial_learning_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_warmup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ManualStepLearningRate::ManualStepLearningRate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ManualStepLearningRate)
}
ManualStepLearningRate::ManualStepLearningRate(const ManualStepLearningRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      schedule_(from.schedule_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&warmup_, &from.warmup_,
    static_cast<size_t>(reinterpret_cast<char*>(&initial_learning_rate_) -
    reinterpret_cast<char*>(&warmup_)) + sizeof(initial_learning_rate_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ManualStepLearningRate)
}

void ManualStepLearningRate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ManualStepLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base);
  warmup_ = false;
  initial_learning_rate_ = 0.002f;
}

ManualStepLearningRate::~ManualStepLearningRate() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ManualStepLearningRate)
  SharedDtor();
}

void ManualStepLearningRate::SharedDtor() {
}

void ManualStepLearningRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManualStepLearningRate& ManualStepLearningRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManualStepLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void ManualStepLearningRate::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ManualStepLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schedule_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    warmup_ = false;
    initial_learning_rate_ = 0.002f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ManualStepLearningRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float initial_learning_rate = 1 [default = 0.002];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_initial_learning_rate(&has_bits);
          initial_learning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .object_detection.protos.ManualStepLearningRate.LearningRateSchedule schedule = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_schedule(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional bool warmup = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_warmup(&has_bits);
          warmup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ManualStepLearningRate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ManualStepLearningRate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float initial_learning_rate = 1 [default = 0.002];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_initial_learning_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initial_learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .object_detection.protos.ManualStepLearningRate.LearningRateSchedule schedule = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_schedule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool warmup = 3 [default = false];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_warmup(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &warmup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ManualStepLearningRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ManualStepLearningRate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ManualStepLearningRate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ManualStepLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float initial_learning_rate = 1 [default = 0.002];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->initial_learning_rate(), output);
  }

  // repeated .object_detection.protos.ManualStepLearningRate.LearningRateSchedule schedule = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->schedule_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->schedule(static_cast<int>(i)),
      output);
  }

  // optional bool warmup = 3 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->warmup(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ManualStepLearningRate)
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualStepLearningRate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ManualStepLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float initial_learning_rate = 1 [default = 0.002];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->initial_learning_rate(), target);
  }

  // repeated .object_detection.protos.ManualStepLearningRate.LearningRateSchedule schedule = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->schedule_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->schedule(static_cast<int>(i)), target);
  }

  // optional bool warmup = 3 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->warmup(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ManualStepLearningRate)
  return target;
}

size_t ManualStepLearningRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ManualStepLearningRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .object_detection.protos.ManualStepLearningRate.LearningRateSchedule schedule = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->schedule_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->schedule(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool warmup = 3 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float initial_learning_rate = 1 [default = 0.002];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManualStepLearningRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ManualStepLearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualStepLearningRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManualStepLearningRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ManualStepLearningRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ManualStepLearningRate)
    MergeFrom(*source);
  }
}

void ManualStepLearningRate::MergeFrom(const ManualStepLearningRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ManualStepLearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  schedule_.MergeFrom(from.schedule_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      warmup_ = from.warmup_;
    }
    if (cached_has_bits & 0x00000002u) {
      initial_learning_rate_ = from.initial_learning_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ManualStepLearningRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ManualStepLearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualStepLearningRate::CopyFrom(const ManualStepLearningRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ManualStepLearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualStepLearningRate::IsInitialized() const {
  return true;
}

void ManualStepLearningRate::InternalSwap(ManualStepLearningRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&schedule_)->InternalSwap(CastToBase(&other->schedule_));
  swap(warmup_, other->warmup_);
  swap(initial_learning_rate_, other->initial_learning_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualStepLearningRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CosineDecayLearningRate::InitAsDefaultInstance() {
}
class CosineDecayLearningRate::_Internal {
 public:
  using HasBits = decltype(std::declval<CosineDecayLearningRate>()._has_bits_);
  static void set_has_learning_rate_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_warmup_learning_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_warmup_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hold_base_rate_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CosineDecayLearningRate::CosineDecayLearningRate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.CosineDecayLearningRate)
}
CosineDecayLearningRate::CosineDecayLearningRate(const CosineDecayLearningRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hold_base_rate_steps_, &from.hold_base_rate_steps_,
    static_cast<size_t>(reinterpret_cast<char*>(&warmup_steps_) -
    reinterpret_cast<char*>(&hold_base_rate_steps_)) + sizeof(warmup_steps_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.CosineDecayLearningRate)
}

void CosineDecayLearningRate::SharedCtor() {
  hold_base_rate_steps_ = 0u;
  learning_rate_base_ = 0.002f;
  total_steps_ = 4000000u;
  warmup_learning_rate_ = 0.0002f;
  warmup_steps_ = 10000u;
}

CosineDecayLearningRate::~CosineDecayLearningRate() {
  // @@protoc_insertion_point(destructor:object_detection.protos.CosineDecayLearningRate)
  SharedDtor();
}

void CosineDecayLearningRate::SharedDtor() {
}

void CosineDecayLearningRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CosineDecayLearningRate& CosineDecayLearningRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CosineDecayLearningRate_object_5fdetection_2fprotos_2foptimizer_2eproto.base);
  return *internal_default_instance();
}


void CosineDecayLearningRate::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.CosineDecayLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    hold_base_rate_steps_ = 0u;
    learning_rate_base_ = 0.002f;
    total_steps_ = 4000000u;
    warmup_learning_rate_ = 0.0002f;
    warmup_steps_ = 10000u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CosineDecayLearningRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float learning_rate_base = 1 [default = 0.002];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_learning_rate_base(&has_bits);
          learning_rate_base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_steps = 2 [default = 4000000];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_total_steps(&has_bits);
          total_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float warmup_learning_rate = 3 [default = 0.0002];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_warmup_learning_rate(&has_bits);
          warmup_learning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 warmup_steps = 4 [default = 10000];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_warmup_steps(&has_bits);
          warmup_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hold_base_rate_steps = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hold_base_rate_steps(&has_bits);
          hold_base_rate_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CosineDecayLearningRate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.CosineDecayLearningRate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float learning_rate_base = 1 [default = 0.002];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_learning_rate_base(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_steps = 2 [default = 4000000];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_total_steps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float warmup_learning_rate = 3 [default = 0.0002];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_warmup_learning_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &warmup_learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 warmup_steps = 4 [default = 10000];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_warmup_steps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warmup_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hold_base_rate_steps = 5 [default = 0];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_hold_base_rate_steps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hold_base_rate_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.CosineDecayLearningRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.CosineDecayLearningRate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CosineDecayLearningRate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.CosineDecayLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float learning_rate_base = 1 [default = 0.002];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->learning_rate_base(), output);
  }

  // optional uint32 total_steps = 2 [default = 4000000];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->total_steps(), output);
  }

  // optional float warmup_learning_rate = 3 [default = 0.0002];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->warmup_learning_rate(), output);
  }

  // optional uint32 warmup_steps = 4 [default = 10000];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->warmup_steps(), output);
  }

  // optional uint32 hold_base_rate_steps = 5 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->hold_base_rate_steps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.CosineDecayLearningRate)
}

::PROTOBUF_NAMESPACE_ID::uint8* CosineDecayLearningRate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.CosineDecayLearningRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float learning_rate_base = 1 [default = 0.002];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->learning_rate_base(), target);
  }

  // optional uint32 total_steps = 2 [default = 4000000];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_steps(), target);
  }

  // optional float warmup_learning_rate = 3 [default = 0.0002];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->warmup_learning_rate(), target);
  }

  // optional uint32 warmup_steps = 4 [default = 10000];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->warmup_steps(), target);
  }

  // optional uint32 hold_base_rate_steps = 5 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->hold_base_rate_steps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.CosineDecayLearningRate)
  return target;
}

size_t CosineDecayLearningRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.CosineDecayLearningRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 hold_base_rate_steps = 5 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->hold_base_rate_steps());
    }

    // optional float learning_rate_base = 1 [default = 0.002];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 total_steps = 2 [default = 4000000];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->total_steps());
    }

    // optional float warmup_learning_rate = 3 [default = 0.0002];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 warmup_steps = 4 [default = 10000];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->warmup_steps());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CosineDecayLearningRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.CosineDecayLearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  const CosineDecayLearningRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CosineDecayLearningRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.CosineDecayLearningRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.CosineDecayLearningRate)
    MergeFrom(*source);
  }
}

void CosineDecayLearningRate::MergeFrom(const CosineDecayLearningRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.CosineDecayLearningRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      hold_base_rate_steps_ = from.hold_base_rate_steps_;
    }
    if (cached_has_bits & 0x00000002u) {
      learning_rate_base_ = from.learning_rate_base_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_steps_ = from.total_steps_;
    }
    if (cached_has_bits & 0x00000008u) {
      warmup_learning_rate_ = from.warmup_learning_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      warmup_steps_ = from.warmup_steps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CosineDecayLearningRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.CosineDecayLearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosineDecayLearningRate::CopyFrom(const CosineDecayLearningRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.CosineDecayLearningRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosineDecayLearningRate::IsInitialized() const {
  return true;
}

void CosineDecayLearningRate::InternalSwap(CosineDecayLearningRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hold_base_rate_steps_, other->hold_base_rate_steps_);
  swap(learning_rate_base_, other->learning_rate_base_);
  swap(total_steps_, other->total_steps_);
  swap(warmup_learning_rate_, other->warmup_learning_rate_);
  swap(warmup_steps_, other->warmup_steps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CosineDecayLearningRate::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::object_detection::protos::Optimizer* Arena::CreateMaybeMessage< ::object_detection::protos::Optimizer >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::Optimizer >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RMSPropOptimizer* Arena::CreateMaybeMessage< ::object_detection::protos::RMSPropOptimizer >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RMSPropOptimizer >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::MomentumOptimizer* Arena::CreateMaybeMessage< ::object_detection::protos::MomentumOptimizer >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::MomentumOptimizer >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::AdamOptimizer* Arena::CreateMaybeMessage< ::object_detection::protos::AdamOptimizer >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::AdamOptimizer >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::LearningRate* Arena::CreateMaybeMessage< ::object_detection::protos::LearningRate >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::LearningRate >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::ConstantLearningRate* Arena::CreateMaybeMessage< ::object_detection::protos::ConstantLearningRate >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::ConstantLearningRate >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::ExponentialDecayLearningRate* Arena::CreateMaybeMessage< ::object_detection::protos::ExponentialDecayLearningRate >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::ExponentialDecayLearningRate >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::ManualStepLearningRate_LearningRateSchedule* Arena::CreateMaybeMessage< ::object_detection::protos::ManualStepLearningRate_LearningRateSchedule >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::ManualStepLearningRate_LearningRateSchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::ManualStepLearningRate* Arena::CreateMaybeMessage< ::object_detection::protos::ManualStepLearningRate >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::ManualStepLearningRate >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::CosineDecayLearningRate* Arena::CreateMaybeMessage< ::object_detection::protos::CosineDecayLearningRate >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::CosineDecayLearningRate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
