// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/faster_rcnn.proto

#include "object_detection/protos/faster_rcnn.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fanchor_5fgenerator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AnchorGenerator_object_5fdetection_2fprotos_2fanchor_5fgenerator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FasterRcnnFeatureExtractor_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HardExampleMiner_object_5fdetection_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fhyperparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Hyperparams_object_5fdetection_2fprotos_2fhyperparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ImageResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostProcessing_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto;
namespace object_detection {
namespace protos {
class FasterRcnnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FasterRcnn> _instance;
} _FasterRcnn_default_instance_;
class FasterRcnnFeatureExtractorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FasterRcnnFeatureExtractor> _instance;
} _FasterRcnnFeatureExtractor_default_instance_;
}  // namespace protos
}  // namespace object_detection
static void InitDefaultsscc_info_FasterRcnn_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_FasterRcnn_default_instance_;
    new (ptr) ::object_detection::protos::FasterRcnn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::FasterRcnn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_FasterRcnn_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsscc_info_FasterRcnn_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto}, {
      &scc_info_ImageResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto.base,
      &scc_info_FasterRcnnFeatureExtractor_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto.base,
      &scc_info_AnchorGenerator_object_5fdetection_2fprotos_2fanchor_5fgenerator_2eproto.base,
      &scc_info_Hyperparams_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
      &scc_info_BoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base,
      &scc_info_PostProcessing_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto.base,
      &scc_info_HardExampleMiner_object_5fdetection_2fprotos_2flosses_2eproto.base,
      &scc_info_ClassificationLoss_object_5fdetection_2fprotos_2flosses_2eproto.base,}};

static void InitDefaultsscc_info_FasterRcnnFeatureExtractor_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_FasterRcnnFeatureExtractor_default_instance_;
    new (ptr) ::object_detection::protos::FasterRcnnFeatureExtractor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::FasterRcnnFeatureExtractor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FasterRcnnFeatureExtractor_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FasterRcnnFeatureExtractor_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, number_of_stages_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, num_classes_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, image_resizer_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, feature_extractor_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, first_stage_anchor_generator_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, first_stage_atrous_rate_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, first_stage_box_predictor_conv_hyperparams_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, first_stage_box_predictor_kernel_size_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, first_stage_box_predictor_depth_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, first_stage_minibatch_size_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, first_stage_positive_balance_fraction_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, first_stage_nms_score_threshold_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, first_stage_nms_iou_threshold_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, first_stage_max_proposals_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, first_stage_localization_loss_weight_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, first_stage_objectness_loss_weight_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, initial_crop_size_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, maxpool_kernel_size_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, maxpool_stride_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, second_stage_box_predictor_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, second_stage_batch_size_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, second_stage_balance_fraction_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, second_stage_post_processing_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, second_stage_localization_loss_weight_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, second_stage_classification_loss_weight_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, second_stage_mask_prediction_loss_weight_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, hard_example_miner_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, second_stage_classification_loss_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, inplace_batchnorm_update_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, use_matmul_crop_and_resize_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, clip_anchors_to_image_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, use_matmul_gather_in_matcher_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, use_static_balanced_label_sampler_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, use_static_shapes_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, resize_masks_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnn, use_static_shapes_for_eval_),
  20,
  8,
  0,
  1,
  2,
  21,
  3,
  22,
  23,
  24,
  25,
  9,
  26,
  27,
  28,
  29,
  10,
  11,
  12,
  4,
  30,
  31,
  5,
  32,
  33,
  34,
  6,
  7,
  13,
  14,
  15,
  16,
  17,
  18,
  35,
  19,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnnFeatureExtractor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnnFeatureExtractor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnnFeatureExtractor, type_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnnFeatureExtractor, first_stage_features_stride_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FasterRcnnFeatureExtractor, batch_norm_trainable_),
  0,
  2,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 41, sizeof(::object_detection::protos::FasterRcnn)},
  { 77, 85, sizeof(::object_detection::protos::FasterRcnnFeatureExtractor)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_FasterRcnn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_FasterRcnnFeatureExtractor_default_instance_),
};

const char descriptor_table_protodef_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)object_detection/protos/faster_rcnn.pr"
  "oto\022\027object_detection.protos\032.object_det"
  "ection/protos/anchor_generator.proto\032+ob"
  "ject_detection/protos/box_predictor.prot"
  "o\032)object_detection/protos/hyperparams.p"
  "roto\032+object_detection/protos/image_resi"
  "zer.proto\032$object_detection/protos/losse"
  "s.proto\032-object_detection/protos/post_pr"
  "ocessing.proto\"\356\r\n\nFasterRcnn\022\033\n\020number_"
  "of_stages\030\001 \001(\005:\0012\022\023\n\013num_classes\030\003 \001(\005\022"
  "<\n\rimage_resizer\030\004 \001(\0132%.object_detectio"
  "n.protos.ImageResizer\022N\n\021feature_extract"
  "or\030\005 \001(\01323.object_detection.protos.Faste"
  "rRcnnFeatureExtractor\022N\n\034first_stage_anc"
  "hor_generator\030\006 \001(\0132(.object_detection.p"
  "rotos.AnchorGenerator\022\"\n\027first_stage_atr"
  "ous_rate\030\007 \001(\005:\0011\022X\n*first_stage_box_pre"
  "dictor_conv_hyperparams\030\010 \001(\0132$.object_d"
  "etection.protos.Hyperparams\0220\n%first_sta"
  "ge_box_predictor_kernel_size\030\t \001(\005:\0013\022,\n"
  "\037first_stage_box_predictor_depth\030\n \001(\005:\003"
  "512\022\'\n\032first_stage_minibatch_size\030\013 \001(\005:"
  "\003256\0222\n%first_stage_positive_balance_fra"
  "ction\030\014 \001(\002:\0030.5\022*\n\037first_stage_nms_scor"
  "e_threshold\030\r \001(\002:\0010\022*\n\035first_stage_nms_"
  "iou_threshold\030\016 \001(\002:\0030.7\022&\n\031first_stage_"
  "max_proposals\030\017 \001(\005:\003300\022/\n$first_stage_"
  "localization_loss_weight\030\020 \001(\002:\0011\022-\n\"fir"
  "st_stage_objectness_loss_weight\030\021 \001(\002:\0011"
  "\022\031\n\021initial_crop_size\030\022 \001(\005\022\033\n\023maxpool_k"
  "ernel_size\030\023 \001(\005\022\026\n\016maxpool_stride\030\024 \001(\005"
  "\022I\n\032second_stage_box_predictor\030\025 \001(\0132%.o"
  "bject_detection.protos.BoxPredictor\022#\n\027s"
  "econd_stage_batch_size\030\026 \001(\005:\00264\022+\n\035seco"
  "nd_stage_balance_fraction\030\027 \001(\002:\0040.25\022M\n"
  "\034second_stage_post_processing\030\030 \001(\0132\'.ob"
  "ject_detection.protos.PostProcessing\0220\n%"
  "second_stage_localization_loss_weight\030\031 "
  "\001(\002:\0011\0222\n\'second_stage_classification_lo"
  "ss_weight\030\032 \001(\002:\0011\0223\n(second_stage_mask_"
  "prediction_loss_weight\030\033 \001(\002:\0011\022E\n\022hard_"
  "example_miner\030\034 \001(\0132).object_detection.p"
  "rotos.HardExampleMiner\022U\n second_stage_c"
  "lassification_loss\030\035 \001(\0132+.object_detect"
  "ion.protos.ClassificationLoss\022\'\n\030inplace"
  "_batchnorm_update\030\036 \001(\010:\005false\022)\n\032use_ma"
  "tmul_crop_and_resize\030\037 \001(\010:\005false\022$\n\025cli"
  "p_anchors_to_image\030  \001(\010:\005false\022+\n\034use_m"
  "atmul_gather_in_matcher\030! \001(\010:\005false\0220\n!"
  "use_static_balanced_label_sampler\030\" \001(\010:"
  "\005false\022 \n\021use_static_shapes\030# \001(\010:\005false"
  "\022\032\n\014resize_masks\030$ \001(\010:\004true\022)\n\032use_stat"
  "ic_shapes_for_eval\030% \001(\010:\005false\"x\n\032Faste"
  "rRcnnFeatureExtractor\022\014\n\004type\030\001 \001(\t\022\'\n\033f"
  "irst_stage_features_stride\030\002 \001(\005:\00216\022#\n\024"
  "batch_norm_trainable\030\003 \001(\010:\005false"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto_deps[6] = {
  &::descriptor_table_object_5fdetection_2fprotos_2fanchor_5fgenerator_2eproto,
  &::descriptor_table_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto,
  &::descriptor_table_object_5fdetection_2fprotos_2fhyperparams_2eproto,
  &::descriptor_table_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto,
  &::descriptor_table_object_5fdetection_2fprotos_2flosses_2eproto,
  &::descriptor_table_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto_sccs[2] = {
  &scc_info_FasterRcnn_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto.base,
  &scc_info_FasterRcnnFeatureExtractor_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto_once;
static bool descriptor_table_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto = {
  &descriptor_table_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto_initialized, descriptor_table_protodef_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto, "object_detection/protos/faster_rcnn.proto", 2233,
  &descriptor_table_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto_once, descriptor_table_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto_sccs, descriptor_table_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto_deps, 2, 6,
  schemas, file_default_instances, TableStruct_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto::offsets,
  file_level_metadata_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto, 2, file_level_enum_descriptors_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto, file_level_service_descriptors_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto), true);
namespace object_detection {
namespace protos {

// ===================================================================

void FasterRcnn::InitAsDefaultInstance() {
  ::object_detection::protos::_FasterRcnn_default_instance_._instance.get_mutable()->image_resizer_ = const_cast< ::object_detection::protos::ImageResizer*>(
      ::object_detection::protos::ImageResizer::internal_default_instance());
  ::object_detection::protos::_FasterRcnn_default_instance_._instance.get_mutable()->feature_extractor_ = const_cast< ::object_detection::protos::FasterRcnnFeatureExtractor*>(
      ::object_detection::protos::FasterRcnnFeatureExtractor::internal_default_instance());
  ::object_detection::protos::_FasterRcnn_default_instance_._instance.get_mutable()->first_stage_anchor_generator_ = const_cast< ::object_detection::protos::AnchorGenerator*>(
      ::object_detection::protos::AnchorGenerator::internal_default_instance());
  ::object_detection::protos::_FasterRcnn_default_instance_._instance.get_mutable()->first_stage_box_predictor_conv_hyperparams_ = const_cast< ::object_detection::protos::Hyperparams*>(
      ::object_detection::protos::Hyperparams::internal_default_instance());
  ::object_detection::protos::_FasterRcnn_default_instance_._instance.get_mutable()->second_stage_box_predictor_ = const_cast< ::object_detection::protos::BoxPredictor*>(
      ::object_detection::protos::BoxPredictor::internal_default_instance());
  ::object_detection::protos::_FasterRcnn_default_instance_._instance.get_mutable()->second_stage_post_processing_ = const_cast< ::object_detection::protos::PostProcessing*>(
      ::object_detection::protos::PostProcessing::internal_default_instance());
  ::object_detection::protos::_FasterRcnn_default_instance_._instance.get_mutable()->hard_example_miner_ = const_cast< ::object_detection::protos::HardExampleMiner*>(
      ::object_detection::protos::HardExampleMiner::internal_default_instance());
  ::object_detection::protos::_FasterRcnn_default_instance_._instance.get_mutable()->second_stage_classification_loss_ = const_cast< ::object_detection::protos::ClassificationLoss*>(
      ::object_detection::protos::ClassificationLoss::internal_default_instance());
}
class FasterRcnn::_Internal {
 public:
  using HasBits = decltype(std::declval<FasterRcnn>()._has_bits_);
  static void set_has_number_of_stages(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::object_detection::protos::ImageResizer& image_resizer(const FasterRcnn* msg);
  static void set_has_image_resizer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::object_detection::protos::FasterRcnnFeatureExtractor& feature_extractor(const FasterRcnn* msg);
  static void set_has_feature_extractor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::object_detection::protos::AnchorGenerator& first_stage_anchor_generator(const FasterRcnn* msg);
  static void set_has_first_stage_anchor_generator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_first_stage_atrous_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::object_detection::protos::Hyperparams& first_stage_box_predictor_conv_hyperparams(const FasterRcnn* msg);
  static void set_has_first_stage_box_predictor_conv_hyperparams(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_first_stage_box_predictor_kernel_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_first_stage_box_predictor_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_first_stage_minibatch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_first_stage_positive_balance_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_first_stage_nms_score_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_first_stage_nms_iou_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_first_stage_max_proposals(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_first_stage_localization_loss_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_first_stage_objectness_loss_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_initial_crop_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_maxpool_kernel_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_maxpool_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::object_detection::protos::BoxPredictor& second_stage_box_predictor(const FasterRcnn* msg);
  static void set_has_second_stage_box_predictor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_second_stage_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_second_stage_balance_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::object_detection::protos::PostProcessing& second_stage_post_processing(const FasterRcnn* msg);
  static void set_has_second_stage_post_processing(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_second_stage_localization_loss_weight(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_second_stage_classification_loss_weight(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_second_stage_mask_prediction_loss_weight(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::object_detection::protos::HardExampleMiner& hard_example_miner(const FasterRcnn* msg);
  static void set_has_hard_example_miner(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::object_detection::protos::ClassificationLoss& second_stage_classification_loss(const FasterRcnn* msg);
  static void set_has_second_stage_classification_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_inplace_batchnorm_update(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_use_matmul_crop_and_resize(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_clip_anchors_to_image(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_use_matmul_gather_in_matcher(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_use_static_balanced_label_sampler(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_use_static_shapes(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_resize_masks(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_use_static_shapes_for_eval(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

const ::object_detection::protos::ImageResizer&
FasterRcnn::_Internal::image_resizer(const FasterRcnn* msg) {
  return *msg->image_resizer_;
}
const ::object_detection::protos::FasterRcnnFeatureExtractor&
FasterRcnn::_Internal::feature_extractor(const FasterRcnn* msg) {
  return *msg->feature_extractor_;
}
const ::object_detection::protos::AnchorGenerator&
FasterRcnn::_Internal::first_stage_anchor_generator(const FasterRcnn* msg) {
  return *msg->first_stage_anchor_generator_;
}
const ::object_detection::protos::Hyperparams&
FasterRcnn::_Internal::first_stage_box_predictor_conv_hyperparams(const FasterRcnn* msg) {
  return *msg->first_stage_box_predictor_conv_hyperparams_;
}
const ::object_detection::protos::BoxPredictor&
FasterRcnn::_Internal::second_stage_box_predictor(const FasterRcnn* msg) {
  return *msg->second_stage_box_predictor_;
}
const ::object_detection::protos::PostProcessing&
FasterRcnn::_Internal::second_stage_post_processing(const FasterRcnn* msg) {
  return *msg->second_stage_post_processing_;
}
const ::object_detection::protos::HardExampleMiner&
FasterRcnn::_Internal::hard_example_miner(const FasterRcnn* msg) {
  return *msg->hard_example_miner_;
}
const ::object_detection::protos::ClassificationLoss&
FasterRcnn::_Internal::second_stage_classification_loss(const FasterRcnn* msg) {
  return *msg->second_stage_classification_loss_;
}
void FasterRcnn::clear_image_resizer() {
  if (image_resizer_ != nullptr) image_resizer_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void FasterRcnn::clear_first_stage_anchor_generator() {
  if (first_stage_anchor_generator_ != nullptr) first_stage_anchor_generator_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void FasterRcnn::clear_first_stage_box_predictor_conv_hyperparams() {
  if (first_stage_box_predictor_conv_hyperparams_ != nullptr) first_stage_box_predictor_conv_hyperparams_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void FasterRcnn::clear_second_stage_box_predictor() {
  if (second_stage_box_predictor_ != nullptr) second_stage_box_predictor_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void FasterRcnn::clear_second_stage_post_processing() {
  if (second_stage_post_processing_ != nullptr) second_stage_post_processing_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void FasterRcnn::clear_hard_example_miner() {
  if (hard_example_miner_ != nullptr) hard_example_miner_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void FasterRcnn::clear_second_stage_classification_loss() {
  if (second_stage_classification_loss_ != nullptr) second_stage_classification_loss_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
FasterRcnn::FasterRcnn()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.FasterRcnn)
}
FasterRcnn::FasterRcnn(const FasterRcnn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_image_resizer()) {
    image_resizer_ = new ::object_detection::protos::ImageResizer(*from.image_resizer_);
  } else {
    image_resizer_ = nullptr;
  }
  if (from.has_feature_extractor()) {
    feature_extractor_ = new ::object_detection::protos::FasterRcnnFeatureExtractor(*from.feature_extractor_);
  } else {
    feature_extractor_ = nullptr;
  }
  if (from.has_first_stage_anchor_generator()) {
    first_stage_anchor_generator_ = new ::object_detection::protos::AnchorGenerator(*from.first_stage_anchor_generator_);
  } else {
    first_stage_anchor_generator_ = nullptr;
  }
  if (from.has_first_stage_box_predictor_conv_hyperparams()) {
    first_stage_box_predictor_conv_hyperparams_ = new ::object_detection::protos::Hyperparams(*from.first_stage_box_predictor_conv_hyperparams_);
  } else {
    first_stage_box_predictor_conv_hyperparams_ = nullptr;
  }
  if (from.has_second_stage_box_predictor()) {
    second_stage_box_predictor_ = new ::object_detection::protos::BoxPredictor(*from.second_stage_box_predictor_);
  } else {
    second_stage_box_predictor_ = nullptr;
  }
  if (from.has_second_stage_post_processing()) {
    second_stage_post_processing_ = new ::object_detection::protos::PostProcessing(*from.second_stage_post_processing_);
  } else {
    second_stage_post_processing_ = nullptr;
  }
  if (from.has_hard_example_miner()) {
    hard_example_miner_ = new ::object_detection::protos::HardExampleMiner(*from.hard_example_miner_);
  } else {
    hard_example_miner_ = nullptr;
  }
  if (from.has_second_stage_classification_loss()) {
    second_stage_classification_loss_ = new ::object_detection::protos::ClassificationLoss(*from.second_stage_classification_loss_);
  } else {
    second_stage_classification_loss_ = nullptr;
  }
  ::memcpy(&num_classes_, &from.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&resize_masks_) -
    reinterpret_cast<char*>(&num_classes_)) + sizeof(resize_masks_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.FasterRcnn)
}

void FasterRcnn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FasterRcnn_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto.base);
  ::memset(&image_resizer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_static_shapes_for_eval_) -
      reinterpret_cast<char*>(&image_resizer_)) + sizeof(use_static_shapes_for_eval_));
  number_of_stages_ = 2;
  first_stage_atrous_rate_ = 1;
  first_stage_box_predictor_kernel_size_ = 3;
  first_stage_box_predictor_depth_ = 512;
  first_stage_minibatch_size_ = 256;
  first_stage_positive_balance_fraction_ = 0.5f;
  first_stage_nms_iou_threshold_ = 0.7f;
  first_stage_max_proposals_ = 300;
  first_stage_localization_loss_weight_ = 1;
  first_stage_objectness_loss_weight_ = 1;
  second_stage_batch_size_ = 64;
  second_stage_balance_fraction_ = 0.25f;
  second_stage_localization_loss_weight_ = 1;
  second_stage_classification_loss_weight_ = 1;
  second_stage_mask_prediction_loss_weight_ = 1;
  resize_masks_ = true;
}

FasterRcnn::~FasterRcnn() {
  // @@protoc_insertion_point(destructor:object_detection.protos.FasterRcnn)
  SharedDtor();
}

void FasterRcnn::SharedDtor() {
  if (this != internal_default_instance()) delete image_resizer_;
  if (this != internal_default_instance()) delete feature_extractor_;
  if (this != internal_default_instance()) delete first_stage_anchor_generator_;
  if (this != internal_default_instance()) delete first_stage_box_predictor_conv_hyperparams_;
  if (this != internal_default_instance()) delete second_stage_box_predictor_;
  if (this != internal_default_instance()) delete second_stage_post_processing_;
  if (this != internal_default_instance()) delete hard_example_miner_;
  if (this != internal_default_instance()) delete second_stage_classification_loss_;
}

void FasterRcnn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FasterRcnn& FasterRcnn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FasterRcnn_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto.base);
  return *internal_default_instance();
}


void FasterRcnn::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.FasterRcnn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(image_resizer_ != nullptr);
      image_resizer_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(feature_extractor_ != nullptr);
      feature_extractor_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(first_stage_anchor_generator_ != nullptr);
      first_stage_anchor_generator_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(first_stage_box_predictor_conv_hyperparams_ != nullptr);
      first_stage_box_predictor_conv_hyperparams_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(second_stage_box_predictor_ != nullptr);
      second_stage_box_predictor_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(second_stage_post_processing_ != nullptr);
      second_stage_post_processing_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(hard_example_miner_ != nullptr);
      hard_example_miner_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(second_stage_classification_loss_ != nullptr);
      second_stage_classification_loss_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clip_anchors_to_image_) -
        reinterpret_cast<char*>(&num_classes_)) + sizeof(clip_anchors_to_image_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&use_matmul_gather_in_matcher_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_static_shapes_for_eval_) -
        reinterpret_cast<char*>(&use_matmul_gather_in_matcher_)) + sizeof(use_static_shapes_for_eval_));
    number_of_stages_ = 2;
    first_stage_atrous_rate_ = 1;
    first_stage_box_predictor_kernel_size_ = 3;
    first_stage_box_predictor_depth_ = 512;
  }
  if (cached_has_bits & 0xff000000u) {
    first_stage_minibatch_size_ = 256;
    first_stage_positive_balance_fraction_ = 0.5f;
    first_stage_nms_iou_threshold_ = 0.7f;
    first_stage_max_proposals_ = 300;
    first_stage_localization_loss_weight_ = 1;
    first_stage_objectness_loss_weight_ = 1;
    second_stage_batch_size_ = 64;
    second_stage_balance_fraction_ = 0.25f;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    second_stage_localization_loss_weight_ = 1;
    second_stage_classification_loss_weight_ = 1;
    second_stage_mask_prediction_loss_weight_ = 1;
    resize_masks_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FasterRcnn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 number_of_stages = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_number_of_stages(&_has_bits_);
          number_of_stages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_classes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_classes(&_has_bits_);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.ImageResizer image_resizer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_image_resizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.FasterRcnnFeatureExtractor feature_extractor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_feature_extractor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.AnchorGenerator first_stage_anchor_generator = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_first_stage_anchor_generator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 first_stage_atrous_rate = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_first_stage_atrous_rate(&_has_bits_);
          first_stage_atrous_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.Hyperparams first_stage_box_predictor_conv_hyperparams = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_first_stage_box_predictor_conv_hyperparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 first_stage_box_predictor_kernel_size = 9 [default = 3];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_first_stage_box_predictor_kernel_size(&_has_bits_);
          first_stage_box_predictor_kernel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 first_stage_box_predictor_depth = 10 [default = 512];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_first_stage_box_predictor_depth(&_has_bits_);
          first_stage_box_predictor_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 first_stage_minibatch_size = 11 [default = 256];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_first_stage_minibatch_size(&_has_bits_);
          first_stage_minibatch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float first_stage_positive_balance_fraction = 12 [default = 0.5];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_first_stage_positive_balance_fraction(&_has_bits_);
          first_stage_positive_balance_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float first_stage_nms_score_threshold = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_first_stage_nms_score_threshold(&_has_bits_);
          first_stage_nms_score_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float first_stage_nms_iou_threshold = 14 [default = 0.7];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_first_stage_nms_iou_threshold(&_has_bits_);
          first_stage_nms_iou_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 first_stage_max_proposals = 15 [default = 300];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_first_stage_max_proposals(&_has_bits_);
          first_stage_max_proposals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float first_stage_localization_loss_weight = 16 [default = 1];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_first_stage_localization_loss_weight(&_has_bits_);
          first_stage_localization_loss_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float first_stage_objectness_loss_weight = 17 [default = 1];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_first_stage_objectness_loss_weight(&_has_bits_);
          first_stage_objectness_loss_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 initial_crop_size = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_initial_crop_size(&_has_bits_);
          initial_crop_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 maxpool_kernel_size = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_maxpool_kernel_size(&_has_bits_);
          maxpool_kernel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 maxpool_stride = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_maxpool_stride(&_has_bits_);
          maxpool_stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.BoxPredictor second_stage_box_predictor = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_second_stage_box_predictor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 second_stage_batch_size = 22 [default = 64];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_second_stage_batch_size(&_has_bits_);
          second_stage_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float second_stage_balance_fraction = 23 [default = 0.25];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_second_stage_balance_fraction(&_has_bits_);
          second_stage_balance_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.PostProcessing second_stage_post_processing = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_second_stage_post_processing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float second_stage_localization_loss_weight = 25 [default = 1];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_second_stage_localization_loss_weight(&_has_bits_);
          second_stage_localization_loss_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float second_stage_classification_loss_weight = 26 [default = 1];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_second_stage_classification_loss_weight(&_has_bits_);
          second_stage_classification_loss_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float second_stage_mask_prediction_loss_weight = 27 [default = 1];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_second_stage_mask_prediction_loss_weight(&_has_bits_);
          second_stage_mask_prediction_loss_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.HardExampleMiner hard_example_miner = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_hard_example_miner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.ClassificationLoss second_stage_classification_loss = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_second_stage_classification_loss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool inplace_batchnorm_update = 30 [default = false];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_inplace_batchnorm_update(&_has_bits_);
          inplace_batchnorm_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_matmul_crop_and_resize = 31 [default = false];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_use_matmul_crop_and_resize(&_has_bits_);
          use_matmul_crop_and_resize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clip_anchors_to_image = 32 [default = false];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_clip_anchors_to_image(&_has_bits_);
          clip_anchors_to_image_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_matmul_gather_in_matcher = 33 [default = false];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_use_matmul_gather_in_matcher(&_has_bits_);
          use_matmul_gather_in_matcher_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_static_balanced_label_sampler = 34 [default = false];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_static_balanced_label_sampler(&_has_bits_);
          use_static_balanced_label_sampler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_static_shapes = 35 [default = false];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_static_shapes(&_has_bits_);
          use_static_shapes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool resize_masks = 36 [default = true];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_resize_masks(&_has_bits_);
          resize_masks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_static_shapes_for_eval = 37 [default = false];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_use_static_shapes_for_eval(&_has_bits_);
          use_static_shapes_for_eval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FasterRcnn::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.FasterRcnn)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 number_of_stages = 1 [default = 2];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_number_of_stages(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_of_stages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_classes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_classes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ImageResizer image_resizer = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_image_resizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.FasterRcnnFeatureExtractor feature_extractor = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_feature_extractor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.AnchorGenerator first_stage_anchor_generator = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_first_stage_anchor_generator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 first_stage_atrous_rate = 7 [default = 1];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_first_stage_atrous_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_stage_atrous_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.Hyperparams first_stage_box_predictor_conv_hyperparams = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_first_stage_box_predictor_conv_hyperparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 first_stage_box_predictor_kernel_size = 9 [default = 3];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_first_stage_box_predictor_kernel_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_stage_box_predictor_kernel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 first_stage_box_predictor_depth = 10 [default = 512];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_first_stage_box_predictor_depth(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_stage_box_predictor_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 first_stage_minibatch_size = 11 [default = 256];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_first_stage_minibatch_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_stage_minibatch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float first_stage_positive_balance_fraction = 12 [default = 0.5];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          _Internal::set_has_first_stage_positive_balance_fraction(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_stage_positive_balance_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float first_stage_nms_score_threshold = 13 [default = 0];
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {
          _Internal::set_has_first_stage_nms_score_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_stage_nms_score_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float first_stage_nms_iou_threshold = 14 [default = 0.7];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (117 & 0xFF)) {
          _Internal::set_has_first_stage_nms_iou_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_stage_nms_iou_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 first_stage_max_proposals = 15 [default = 300];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_first_stage_max_proposals(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_stage_max_proposals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float first_stage_localization_loss_weight = 16 [default = 1];
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (133 & 0xFF)) {
          _Internal::set_has_first_stage_localization_loss_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_stage_localization_loss_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float first_stage_objectness_loss_weight = 17 [default = 1];
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (141 & 0xFF)) {
          _Internal::set_has_first_stage_objectness_loss_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_stage_objectness_loss_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 initial_crop_size = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_initial_crop_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &initial_crop_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maxpool_kernel_size = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_maxpool_kernel_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpool_kernel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maxpool_stride = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_maxpool_stride(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpool_stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.BoxPredictor second_stage_box_predictor = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_second_stage_box_predictor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 second_stage_batch_size = 22 [default = 64];
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_second_stage_batch_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_stage_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float second_stage_balance_fraction = 23 [default = 0.25];
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (189 & 0xFF)) {
          _Internal::set_has_second_stage_balance_fraction(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &second_stage_balance_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.PostProcessing second_stage_post_processing = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_second_stage_post_processing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float second_stage_localization_loss_weight = 25 [default = 1];
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (205 & 0xFF)) {
          _Internal::set_has_second_stage_localization_loss_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &second_stage_localization_loss_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float second_stage_classification_loss_weight = 26 [default = 1];
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (213 & 0xFF)) {
          _Internal::set_has_second_stage_classification_loss_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &second_stage_classification_loss_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float second_stage_mask_prediction_loss_weight = 27 [default = 1];
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (221 & 0xFF)) {
          _Internal::set_has_second_stage_mask_prediction_loss_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &second_stage_mask_prediction_loss_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.HardExampleMiner hard_example_miner = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hard_example_miner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ClassificationLoss second_stage_classification_loss = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_second_stage_classification_loss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool inplace_batchnorm_update = 30 [default = false];
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {
          _Internal::set_has_inplace_batchnorm_update(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inplace_batchnorm_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_matmul_crop_and_resize = 31 [default = false];
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {
          _Internal::set_has_use_matmul_crop_and_resize(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_matmul_crop_and_resize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clip_anchors_to_image = 32 [default = false];
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (256 & 0xFF)) {
          _Internal::set_has_clip_anchors_to_image(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clip_anchors_to_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_matmul_gather_in_matcher = 33 [default = false];
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (264 & 0xFF)) {
          _Internal::set_has_use_matmul_gather_in_matcher(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_matmul_gather_in_matcher_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_static_balanced_label_sampler = 34 [default = false];
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (272 & 0xFF)) {
          _Internal::set_has_use_static_balanced_label_sampler(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_static_balanced_label_sampler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_static_shapes = 35 [default = false];
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (280 & 0xFF)) {
          _Internal::set_has_use_static_shapes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_static_shapes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool resize_masks = 36 [default = true];
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (288 & 0xFF)) {
          _Internal::set_has_resize_masks(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resize_masks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_static_shapes_for_eval = 37 [default = false];
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (296 & 0xFF)) {
          _Internal::set_has_use_static_shapes_for_eval(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_static_shapes_for_eval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.FasterRcnn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.FasterRcnn)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FasterRcnn::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.FasterRcnn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 number_of_stages = 1 [default = 2];
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->number_of_stages(), output);
  }

  // optional int32 num_classes = 3;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_classes(), output);
  }

  // optional .object_detection.protos.ImageResizer image_resizer = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::image_resizer(this), output);
  }

  // optional .object_detection.protos.FasterRcnnFeatureExtractor feature_extractor = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::feature_extractor(this), output);
  }

  // optional .object_detection.protos.AnchorGenerator first_stage_anchor_generator = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::first_stage_anchor_generator(this), output);
  }

  // optional int32 first_stage_atrous_rate = 7 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->first_stage_atrous_rate(), output);
  }

  // optional .object_detection.protos.Hyperparams first_stage_box_predictor_conv_hyperparams = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::first_stage_box_predictor_conv_hyperparams(this), output);
  }

  // optional int32 first_stage_box_predictor_kernel_size = 9 [default = 3];
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->first_stage_box_predictor_kernel_size(), output);
  }

  // optional int32 first_stage_box_predictor_depth = 10 [default = 512];
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->first_stage_box_predictor_depth(), output);
  }

  // optional int32 first_stage_minibatch_size = 11 [default = 256];
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->first_stage_minibatch_size(), output);
  }

  // optional float first_stage_positive_balance_fraction = 12 [default = 0.5];
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->first_stage_positive_balance_fraction(), output);
  }

  // optional float first_stage_nms_score_threshold = 13 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(13, this->first_stage_nms_score_threshold(), output);
  }

  // optional float first_stage_nms_iou_threshold = 14 [default = 0.7];
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(14, this->first_stage_nms_iou_threshold(), output);
  }

  // optional int32 first_stage_max_proposals = 15 [default = 300];
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->first_stage_max_proposals(), output);
  }

  // optional float first_stage_localization_loss_weight = 16 [default = 1];
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(16, this->first_stage_localization_loss_weight(), output);
  }

  // optional float first_stage_objectness_loss_weight = 17 [default = 1];
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(17, this->first_stage_objectness_loss_weight(), output);
  }

  // optional int32 initial_crop_size = 18;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(18, this->initial_crop_size(), output);
  }

  // optional int32 maxpool_kernel_size = 19;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(19, this->maxpool_kernel_size(), output);
  }

  // optional int32 maxpool_stride = 20;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(20, this->maxpool_stride(), output);
  }

  // optional .object_detection.protos.BoxPredictor second_stage_box_predictor = 21;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, _Internal::second_stage_box_predictor(this), output);
  }

  // optional int32 second_stage_batch_size = 22 [default = 64];
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(22, this->second_stage_batch_size(), output);
  }

  // optional float second_stage_balance_fraction = 23 [default = 0.25];
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(23, this->second_stage_balance_fraction(), output);
  }

  // optional .object_detection.protos.PostProcessing second_stage_post_processing = 24;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, _Internal::second_stage_post_processing(this), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional float second_stage_localization_loss_weight = 25 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(25, this->second_stage_localization_loss_weight(), output);
  }

  // optional float second_stage_classification_loss_weight = 26 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(26, this->second_stage_classification_loss_weight(), output);
  }

  // optional float second_stage_mask_prediction_loss_weight = 27 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(27, this->second_stage_mask_prediction_loss_weight(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.HardExampleMiner hard_example_miner = 28;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, _Internal::hard_example_miner(this), output);
  }

  // optional .object_detection.protos.ClassificationLoss second_stage_classification_loss = 29;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, _Internal::second_stage_classification_loss(this), output);
  }

  // optional bool inplace_batchnorm_update = 30 [default = false];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(30, this->inplace_batchnorm_update(), output);
  }

  // optional bool use_matmul_crop_and_resize = 31 [default = false];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(31, this->use_matmul_crop_and_resize(), output);
  }

  // optional bool clip_anchors_to_image = 32 [default = false];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(32, this->clip_anchors_to_image(), output);
  }

  // optional bool use_matmul_gather_in_matcher = 33 [default = false];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(33, this->use_matmul_gather_in_matcher(), output);
  }

  // optional bool use_static_balanced_label_sampler = 34 [default = false];
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(34, this->use_static_balanced_label_sampler(), output);
  }

  // optional bool use_static_shapes = 35 [default = false];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(35, this->use_static_shapes(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool resize_masks = 36 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(36, this->resize_masks(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_static_shapes_for_eval = 37 [default = false];
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(37, this->use_static_shapes_for_eval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.FasterRcnn)
}

::PROTOBUF_NAMESPACE_ID::uint8* FasterRcnn::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.FasterRcnn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 number_of_stages = 1 [default = 2];
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->number_of_stages(), target);
  }

  // optional int32 num_classes = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->num_classes(), target);
  }

  // optional .object_detection.protos.ImageResizer image_resizer = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::image_resizer(this), target);
  }

  // optional .object_detection.protos.FasterRcnnFeatureExtractor feature_extractor = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::feature_extractor(this), target);
  }

  // optional .object_detection.protos.AnchorGenerator first_stage_anchor_generator = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::first_stage_anchor_generator(this), target);
  }

  // optional int32 first_stage_atrous_rate = 7 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->first_stage_atrous_rate(), target);
  }

  // optional .object_detection.protos.Hyperparams first_stage_box_predictor_conv_hyperparams = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::first_stage_box_predictor_conv_hyperparams(this), target);
  }

  // optional int32 first_stage_box_predictor_kernel_size = 9 [default = 3];
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->first_stage_box_predictor_kernel_size(), target);
  }

  // optional int32 first_stage_box_predictor_depth = 10 [default = 512];
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->first_stage_box_predictor_depth(), target);
  }

  // optional int32 first_stage_minibatch_size = 11 [default = 256];
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->first_stage_minibatch_size(), target);
  }

  // optional float first_stage_positive_balance_fraction = 12 [default = 0.5];
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->first_stage_positive_balance_fraction(), target);
  }

  // optional float first_stage_nms_score_threshold = 13 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->first_stage_nms_score_threshold(), target);
  }

  // optional float first_stage_nms_iou_threshold = 14 [default = 0.7];
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->first_stage_nms_iou_threshold(), target);
  }

  // optional int32 first_stage_max_proposals = 15 [default = 300];
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->first_stage_max_proposals(), target);
  }

  // optional float first_stage_localization_loss_weight = 16 [default = 1];
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->first_stage_localization_loss_weight(), target);
  }

  // optional float first_stage_objectness_loss_weight = 17 [default = 1];
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->first_stage_objectness_loss_weight(), target);
  }

  // optional int32 initial_crop_size = 18;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->initial_crop_size(), target);
  }

  // optional int32 maxpool_kernel_size = 19;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->maxpool_kernel_size(), target);
  }

  // optional int32 maxpool_stride = 20;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->maxpool_stride(), target);
  }

  // optional .object_detection.protos.BoxPredictor second_stage_box_predictor = 21;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, _Internal::second_stage_box_predictor(this), target);
  }

  // optional int32 second_stage_batch_size = 22 [default = 64];
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->second_stage_batch_size(), target);
  }

  // optional float second_stage_balance_fraction = 23 [default = 0.25];
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->second_stage_balance_fraction(), target);
  }

  // optional .object_detection.protos.PostProcessing second_stage_post_processing = 24;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, _Internal::second_stage_post_processing(this), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float second_stage_localization_loss_weight = 25 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->second_stage_localization_loss_weight(), target);
  }

  // optional float second_stage_classification_loss_weight = 26 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->second_stage_classification_loss_weight(), target);
  }

  // optional float second_stage_mask_prediction_loss_weight = 27 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(27, this->second_stage_mask_prediction_loss_weight(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.HardExampleMiner hard_example_miner = 28;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, _Internal::hard_example_miner(this), target);
  }

  // optional .object_detection.protos.ClassificationLoss second_stage_classification_loss = 29;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, _Internal::second_stage_classification_loss(this), target);
  }

  // optional bool inplace_batchnorm_update = 30 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->inplace_batchnorm_update(), target);
  }

  // optional bool use_matmul_crop_and_resize = 31 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->use_matmul_crop_and_resize(), target);
  }

  // optional bool clip_anchors_to_image = 32 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->clip_anchors_to_image(), target);
  }

  // optional bool use_matmul_gather_in_matcher = 33 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->use_matmul_gather_in_matcher(), target);
  }

  // optional bool use_static_balanced_label_sampler = 34 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->use_static_balanced_label_sampler(), target);
  }

  // optional bool use_static_shapes = 35 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->use_static_shapes(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool resize_masks = 36 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->resize_masks(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_static_shapes_for_eval = 37 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->use_static_shapes_for_eval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.FasterRcnn)
  return target;
}

size_t FasterRcnn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.FasterRcnn)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .object_detection.protos.ImageResizer image_resizer = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_resizer_);
    }

    // optional .object_detection.protos.FasterRcnnFeatureExtractor feature_extractor = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_extractor_);
    }

    // optional .object_detection.protos.AnchorGenerator first_stage_anchor_generator = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *first_stage_anchor_generator_);
    }

    // optional .object_detection.protos.Hyperparams first_stage_box_predictor_conv_hyperparams = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *first_stage_box_predictor_conv_hyperparams_);
    }

    // optional .object_detection.protos.BoxPredictor second_stage_box_predictor = 21;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *second_stage_box_predictor_);
    }

    // optional .object_detection.protos.PostProcessing second_stage_post_processing = 24;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *second_stage_post_processing_);
    }

    // optional .object_detection.protos.HardExampleMiner hard_example_miner = 28;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hard_example_miner_);
    }

    // optional .object_detection.protos.ClassificationLoss second_stage_classification_loss = 29;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *second_stage_classification_loss_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 num_classes = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_classes());
    }

    // optional float first_stage_nms_score_threshold = 13 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional int32 initial_crop_size = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->initial_crop_size());
    }

    // optional int32 maxpool_kernel_size = 19;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->maxpool_kernel_size());
    }

    // optional int32 maxpool_stride = 20;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->maxpool_stride());
    }

    // optional bool inplace_batchnorm_update = 30 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool use_matmul_crop_and_resize = 31 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool clip_anchors_to_image = 32 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool use_matmul_gather_in_matcher = 33 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool use_static_balanced_label_sampler = 34 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool use_static_shapes = 35 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool use_static_shapes_for_eval = 37 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional int32 number_of_stages = 1 [default = 2];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->number_of_stages());
    }

    // optional int32 first_stage_atrous_rate = 7 [default = 1];
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->first_stage_atrous_rate());
    }

    // optional int32 first_stage_box_predictor_kernel_size = 9 [default = 3];
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->first_stage_box_predictor_kernel_size());
    }

    // optional int32 first_stage_box_predictor_depth = 10 [default = 512];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->first_stage_box_predictor_depth());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 first_stage_minibatch_size = 11 [default = 256];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->first_stage_minibatch_size());
    }

    // optional float first_stage_positive_balance_fraction = 12 [default = 0.5];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 4;
    }

    // optional float first_stage_nms_iou_threshold = 14 [default = 0.7];
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 4;
    }

    // optional int32 first_stage_max_proposals = 15 [default = 300];
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->first_stage_max_proposals());
    }

    // optional float first_stage_localization_loss_weight = 16 [default = 1];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float first_stage_objectness_loss_weight = 17 [default = 1];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional int32 second_stage_batch_size = 22 [default = 64];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->second_stage_batch_size());
    }

    // optional float second_stage_balance_fraction = 23 [default = 0.25];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    // optional float second_stage_localization_loss_weight = 25 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float second_stage_classification_loss_weight = 26 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float second_stage_mask_prediction_loss_weight = 27 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional bool resize_masks = 36 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FasterRcnn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.FasterRcnn)
  GOOGLE_DCHECK_NE(&from, this);
  const FasterRcnn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FasterRcnn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.FasterRcnn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.FasterRcnn)
    MergeFrom(*source);
  }
}

void FasterRcnn::MergeFrom(const FasterRcnn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.FasterRcnn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_image_resizer()->::object_detection::protos::ImageResizer::MergeFrom(from.image_resizer());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_feature_extractor()->::object_detection::protos::FasterRcnnFeatureExtractor::MergeFrom(from.feature_extractor());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_first_stage_anchor_generator()->::object_detection::protos::AnchorGenerator::MergeFrom(from.first_stage_anchor_generator());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_first_stage_box_predictor_conv_hyperparams()->::object_detection::protos::Hyperparams::MergeFrom(from.first_stage_box_predictor_conv_hyperparams());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_second_stage_box_predictor()->::object_detection::protos::BoxPredictor::MergeFrom(from.second_stage_box_predictor());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_second_stage_post_processing()->::object_detection::protos::PostProcessing::MergeFrom(from.second_stage_post_processing());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_hard_example_miner()->::object_detection::protos::HardExampleMiner::MergeFrom(from.hard_example_miner());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_second_stage_classification_loss()->::object_detection::protos::ClassificationLoss::MergeFrom(from.second_stage_classification_loss());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000200u) {
      first_stage_nms_score_threshold_ = from.first_stage_nms_score_threshold_;
    }
    if (cached_has_bits & 0x00000400u) {
      initial_crop_size_ = from.initial_crop_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      maxpool_kernel_size_ = from.maxpool_kernel_size_;
    }
    if (cached_has_bits & 0x00001000u) {
      maxpool_stride_ = from.maxpool_stride_;
    }
    if (cached_has_bits & 0x00002000u) {
      inplace_batchnorm_update_ = from.inplace_batchnorm_update_;
    }
    if (cached_has_bits & 0x00004000u) {
      use_matmul_crop_and_resize_ = from.use_matmul_crop_and_resize_;
    }
    if (cached_has_bits & 0x00008000u) {
      clip_anchors_to_image_ = from.clip_anchors_to_image_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      use_matmul_gather_in_matcher_ = from.use_matmul_gather_in_matcher_;
    }
    if (cached_has_bits & 0x00020000u) {
      use_static_balanced_label_sampler_ = from.use_static_balanced_label_sampler_;
    }
    if (cached_has_bits & 0x00040000u) {
      use_static_shapes_ = from.use_static_shapes_;
    }
    if (cached_has_bits & 0x00080000u) {
      use_static_shapes_for_eval_ = from.use_static_shapes_for_eval_;
    }
    if (cached_has_bits & 0x00100000u) {
      number_of_stages_ = from.number_of_stages_;
    }
    if (cached_has_bits & 0x00200000u) {
      first_stage_atrous_rate_ = from.first_stage_atrous_rate_;
    }
    if (cached_has_bits & 0x00400000u) {
      first_stage_box_predictor_kernel_size_ = from.first_stage_box_predictor_kernel_size_;
    }
    if (cached_has_bits & 0x00800000u) {
      first_stage_box_predictor_depth_ = from.first_stage_box_predictor_depth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      first_stage_minibatch_size_ = from.first_stage_minibatch_size_;
    }
    if (cached_has_bits & 0x02000000u) {
      first_stage_positive_balance_fraction_ = from.first_stage_positive_balance_fraction_;
    }
    if (cached_has_bits & 0x04000000u) {
      first_stage_nms_iou_threshold_ = from.first_stage_nms_iou_threshold_;
    }
    if (cached_has_bits & 0x08000000u) {
      first_stage_max_proposals_ = from.first_stage_max_proposals_;
    }
    if (cached_has_bits & 0x10000000u) {
      first_stage_localization_loss_weight_ = from.first_stage_localization_loss_weight_;
    }
    if (cached_has_bits & 0x20000000u) {
      first_stage_objectness_loss_weight_ = from.first_stage_objectness_loss_weight_;
    }
    if (cached_has_bits & 0x40000000u) {
      second_stage_batch_size_ = from.second_stage_batch_size_;
    }
    if (cached_has_bits & 0x80000000u) {
      second_stage_balance_fraction_ = from.second_stage_balance_fraction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      second_stage_localization_loss_weight_ = from.second_stage_localization_loss_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      second_stage_classification_loss_weight_ = from.second_stage_classification_loss_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      second_stage_mask_prediction_loss_weight_ = from.second_stage_mask_prediction_loss_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      resize_masks_ = from.resize_masks_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void FasterRcnn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.FasterRcnn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FasterRcnn::CopyFrom(const FasterRcnn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.FasterRcnn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FasterRcnn::IsInitialized() const {
  return true;
}

void FasterRcnn::InternalSwap(FasterRcnn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(image_resizer_, other->image_resizer_);
  swap(feature_extractor_, other->feature_extractor_);
  swap(first_stage_anchor_generator_, other->first_stage_anchor_generator_);
  swap(first_stage_box_predictor_conv_hyperparams_, other->first_stage_box_predictor_conv_hyperparams_);
  swap(second_stage_box_predictor_, other->second_stage_box_predictor_);
  swap(second_stage_post_processing_, other->second_stage_post_processing_);
  swap(hard_example_miner_, other->hard_example_miner_);
  swap(second_stage_classification_loss_, other->second_stage_classification_loss_);
  swap(num_classes_, other->num_classes_);
  swap(first_stage_nms_score_threshold_, other->first_stage_nms_score_threshold_);
  swap(initial_crop_size_, other->initial_crop_size_);
  swap(maxpool_kernel_size_, other->maxpool_kernel_size_);
  swap(maxpool_stride_, other->maxpool_stride_);
  swap(inplace_batchnorm_update_, other->inplace_batchnorm_update_);
  swap(use_matmul_crop_and_resize_, other->use_matmul_crop_and_resize_);
  swap(clip_anchors_to_image_, other->clip_anchors_to_image_);
  swap(use_matmul_gather_in_matcher_, other->use_matmul_gather_in_matcher_);
  swap(use_static_balanced_label_sampler_, other->use_static_balanced_label_sampler_);
  swap(use_static_shapes_, other->use_static_shapes_);
  swap(use_static_shapes_for_eval_, other->use_static_shapes_for_eval_);
  swap(number_of_stages_, other->number_of_stages_);
  swap(first_stage_atrous_rate_, other->first_stage_atrous_rate_);
  swap(first_stage_box_predictor_kernel_size_, other->first_stage_box_predictor_kernel_size_);
  swap(first_stage_box_predictor_depth_, other->first_stage_box_predictor_depth_);
  swap(first_stage_minibatch_size_, other->first_stage_minibatch_size_);
  swap(first_stage_positive_balance_fraction_, other->first_stage_positive_balance_fraction_);
  swap(first_stage_nms_iou_threshold_, other->first_stage_nms_iou_threshold_);
  swap(first_stage_max_proposals_, other->first_stage_max_proposals_);
  swap(first_stage_localization_loss_weight_, other->first_stage_localization_loss_weight_);
  swap(first_stage_objectness_loss_weight_, other->first_stage_objectness_loss_weight_);
  swap(second_stage_batch_size_, other->second_stage_batch_size_);
  swap(second_stage_balance_fraction_, other->second_stage_balance_fraction_);
  swap(second_stage_localization_loss_weight_, other->second_stage_localization_loss_weight_);
  swap(second_stage_classification_loss_weight_, other->second_stage_classification_loss_weight_);
  swap(second_stage_mask_prediction_loss_weight_, other->second_stage_mask_prediction_loss_weight_);
  swap(resize_masks_, other->resize_masks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FasterRcnn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FasterRcnnFeatureExtractor::InitAsDefaultInstance() {
}
class FasterRcnnFeatureExtractor::_Internal {
 public:
  using HasBits = decltype(std::declval<FasterRcnnFeatureExtractor>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first_stage_features_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_batch_norm_trainable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FasterRcnnFeatureExtractor::FasterRcnnFeatureExtractor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.FasterRcnnFeatureExtractor)
}
FasterRcnnFeatureExtractor::FasterRcnnFeatureExtractor(const FasterRcnnFeatureExtractor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  ::memcpy(&batch_norm_trainable_, &from.batch_norm_trainable_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_stage_features_stride_) -
    reinterpret_cast<char*>(&batch_norm_trainable_)) + sizeof(first_stage_features_stride_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.FasterRcnnFeatureExtractor)
}

void FasterRcnnFeatureExtractor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FasterRcnnFeatureExtractor_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_norm_trainable_ = false;
  first_stage_features_stride_ = 16;
}

FasterRcnnFeatureExtractor::~FasterRcnnFeatureExtractor() {
  // @@protoc_insertion_point(destructor:object_detection.protos.FasterRcnnFeatureExtractor)
  SharedDtor();
}

void FasterRcnnFeatureExtractor::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FasterRcnnFeatureExtractor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FasterRcnnFeatureExtractor& FasterRcnnFeatureExtractor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FasterRcnnFeatureExtractor_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto.base);
  return *internal_default_instance();
}


void FasterRcnnFeatureExtractor::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.FasterRcnnFeatureExtractor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    type_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    batch_norm_trainable_ = false;
    first_stage_features_stride_ = 16;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FasterRcnnFeatureExtractor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_type(), ptr, ctx, "object_detection.protos.FasterRcnnFeatureExtractor.type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 first_stage_features_stride = 2 [default = 16];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_first_stage_features_stride(&has_bits);
          first_stage_features_stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool batch_norm_trainable = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_batch_norm_trainable(&has_bits);
          batch_norm_trainable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FasterRcnnFeatureExtractor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.FasterRcnnFeatureExtractor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "object_detection.protos.FasterRcnnFeatureExtractor.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 first_stage_features_stride = 2 [default = 16];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_first_stage_features_stride(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_stage_features_stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool batch_norm_trainable = 3 [default = false];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_batch_norm_trainable(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &batch_norm_trainable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.FasterRcnnFeatureExtractor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.FasterRcnnFeatureExtractor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FasterRcnnFeatureExtractor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.FasterRcnnFeatureExtractor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.FasterRcnnFeatureExtractor.type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional int32 first_stage_features_stride = 2 [default = 16];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->first_stage_features_stride(), output);
  }

  // optional bool batch_norm_trainable = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->batch_norm_trainable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.FasterRcnnFeatureExtractor)
}

::PROTOBUF_NAMESPACE_ID::uint8* FasterRcnnFeatureExtractor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.FasterRcnnFeatureExtractor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.FasterRcnnFeatureExtractor.type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional int32 first_stage_features_stride = 2 [default = 16];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->first_stage_features_stride(), target);
  }

  // optional bool batch_norm_trainable = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->batch_norm_trainable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.FasterRcnnFeatureExtractor)
  return target;
}

size_t FasterRcnnFeatureExtractor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.FasterRcnnFeatureExtractor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional bool batch_norm_trainable = 3 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 first_stage_features_stride = 2 [default = 16];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->first_stage_features_stride());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FasterRcnnFeatureExtractor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.FasterRcnnFeatureExtractor)
  GOOGLE_DCHECK_NE(&from, this);
  const FasterRcnnFeatureExtractor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FasterRcnnFeatureExtractor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.FasterRcnnFeatureExtractor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.FasterRcnnFeatureExtractor)
    MergeFrom(*source);
  }
}

void FasterRcnnFeatureExtractor::MergeFrom(const FasterRcnnFeatureExtractor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.FasterRcnnFeatureExtractor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      batch_norm_trainable_ = from.batch_norm_trainable_;
    }
    if (cached_has_bits & 0x00000004u) {
      first_stage_features_stride_ = from.first_stage_features_stride_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FasterRcnnFeatureExtractor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.FasterRcnnFeatureExtractor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FasterRcnnFeatureExtractor::CopyFrom(const FasterRcnnFeatureExtractor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.FasterRcnnFeatureExtractor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FasterRcnnFeatureExtractor::IsInitialized() const {
  return true;
}

void FasterRcnnFeatureExtractor::InternalSwap(FasterRcnnFeatureExtractor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(batch_norm_trainable_, other->batch_norm_trainable_);
  swap(first_stage_features_stride_, other->first_stage_features_stride_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FasterRcnnFeatureExtractor::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::object_detection::protos::FasterRcnn* Arena::CreateMaybeMessage< ::object_detection::protos::FasterRcnn >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::FasterRcnn >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::FasterRcnnFeatureExtractor* Arena::CreateMaybeMessage< ::object_detection::protos::FasterRcnnFeatureExtractor >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::FasterRcnnFeatureExtractor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
