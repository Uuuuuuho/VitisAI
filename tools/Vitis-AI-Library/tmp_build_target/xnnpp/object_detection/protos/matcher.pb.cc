// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/matcher.proto

#include "object_detection/protos/matcher.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fargmax_5fmatcher_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArgMaxMatcher_object_5fdetection_2fprotos_2fargmax_5fmatcher_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fbipartite_5fmatcher_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BipartiteMatcher_object_5fdetection_2fprotos_2fbipartite_5fmatcher_2eproto;
namespace object_detection {
namespace protos {
class MatcherDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Matcher> _instance;
  const ::object_detection::protos::ArgMaxMatcher* argmax_matcher_;
  const ::object_detection::protos::BipartiteMatcher* bipartite_matcher_;
} _Matcher_default_instance_;
}  // namespace protos
}  // namespace object_detection
static void InitDefaultsscc_info_Matcher_object_5fdetection_2fprotos_2fmatcher_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_Matcher_default_instance_;
    new (ptr) ::object_detection::protos::Matcher();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::Matcher::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Matcher_object_5fdetection_2fprotos_2fmatcher_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Matcher_object_5fdetection_2fprotos_2fmatcher_2eproto}, {
      &scc_info_ArgMaxMatcher_object_5fdetection_2fprotos_2fargmax_5fmatcher_2eproto.base,
      &scc_info_BipartiteMatcher_object_5fdetection_2fprotos_2fbipartite_5fmatcher_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_object_5fdetection_2fprotos_2fmatcher_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_object_5fdetection_2fprotos_2fmatcher_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_object_5fdetection_2fprotos_2fmatcher_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_object_5fdetection_2fprotos_2fmatcher_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Matcher, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Matcher, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Matcher, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::object_detection::protos::MatcherDefaultTypeInternal, argmax_matcher_),
  offsetof(::object_detection::protos::MatcherDefaultTypeInternal, bipartite_matcher_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Matcher, matcher_oneof_),
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::object_detection::protos::Matcher)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_Matcher_default_instance_),
};

const char descriptor_table_protodef_object_5fdetection_2fprotos_2fmatcher_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%object_detection/protos/matcher.proto\022"
  "\027object_detection.protos\032,object_detecti"
  "on/protos/argmax_matcher.proto\032/object_d"
  "etection/protos/bipartite_matcher.proto\""
  "\244\001\n\007Matcher\022@\n\016argmax_matcher\030\001 \001(\0132&.ob"
  "ject_detection.protos.ArgMaxMatcherH\000\022F\n"
  "\021bipartite_matcher\030\002 \001(\0132).object_detect"
  "ion.protos.BipartiteMatcherH\000B\017\n\rmatcher"
  "_oneof"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_object_5fdetection_2fprotos_2fmatcher_2eproto_deps[2] = {
  &::descriptor_table_object_5fdetection_2fprotos_2fargmax_5fmatcher_2eproto,
  &::descriptor_table_object_5fdetection_2fprotos_2fbipartite_5fmatcher_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_object_5fdetection_2fprotos_2fmatcher_2eproto_sccs[1] = {
  &scc_info_Matcher_object_5fdetection_2fprotos_2fmatcher_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_object_5fdetection_2fprotos_2fmatcher_2eproto_once;
static bool descriptor_table_object_5fdetection_2fprotos_2fmatcher_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2fmatcher_2eproto = {
  &descriptor_table_object_5fdetection_2fprotos_2fmatcher_2eproto_initialized, descriptor_table_protodef_object_5fdetection_2fprotos_2fmatcher_2eproto, "object_detection/protos/matcher.proto", 326,
  &descriptor_table_object_5fdetection_2fprotos_2fmatcher_2eproto_once, descriptor_table_object_5fdetection_2fprotos_2fmatcher_2eproto_sccs, descriptor_table_object_5fdetection_2fprotos_2fmatcher_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_object_5fdetection_2fprotos_2fmatcher_2eproto::offsets,
  file_level_metadata_object_5fdetection_2fprotos_2fmatcher_2eproto, 1, file_level_enum_descriptors_object_5fdetection_2fprotos_2fmatcher_2eproto, file_level_service_descriptors_object_5fdetection_2fprotos_2fmatcher_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_object_5fdetection_2fprotos_2fmatcher_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_object_5fdetection_2fprotos_2fmatcher_2eproto), true);
namespace object_detection {
namespace protos {

// ===================================================================

void Matcher::InitAsDefaultInstance() {
  ::object_detection::protos::_Matcher_default_instance_.argmax_matcher_ = const_cast< ::object_detection::protos::ArgMaxMatcher*>(
      ::object_detection::protos::ArgMaxMatcher::internal_default_instance());
  ::object_detection::protos::_Matcher_default_instance_.bipartite_matcher_ = const_cast< ::object_detection::protos::BipartiteMatcher*>(
      ::object_detection::protos::BipartiteMatcher::internal_default_instance());
}
class Matcher::_Internal {
 public:
  using HasBits = decltype(std::declval<Matcher>()._has_bits_);
  static const ::object_detection::protos::ArgMaxMatcher& argmax_matcher(const Matcher* msg);
  static const ::object_detection::protos::BipartiteMatcher& bipartite_matcher(const Matcher* msg);
};

const ::object_detection::protos::ArgMaxMatcher&
Matcher::_Internal::argmax_matcher(const Matcher* msg) {
  return *msg->matcher_oneof_.argmax_matcher_;
}
const ::object_detection::protos::BipartiteMatcher&
Matcher::_Internal::bipartite_matcher(const Matcher* msg) {
  return *msg->matcher_oneof_.bipartite_matcher_;
}
void Matcher::set_allocated_argmax_matcher(::object_detection::protos::ArgMaxMatcher* argmax_matcher) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_matcher_oneof();
  if (argmax_matcher) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      argmax_matcher = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, argmax_matcher, submessage_arena);
    }
    set_has_argmax_matcher();
    matcher_oneof_.argmax_matcher_ = argmax_matcher;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Matcher.argmax_matcher)
}
void Matcher::clear_argmax_matcher() {
  if (has_argmax_matcher()) {
    delete matcher_oneof_.argmax_matcher_;
    clear_has_matcher_oneof();
  }
}
void Matcher::set_allocated_bipartite_matcher(::object_detection::protos::BipartiteMatcher* bipartite_matcher) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_matcher_oneof();
  if (bipartite_matcher) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bipartite_matcher = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bipartite_matcher, submessage_arena);
    }
    set_has_bipartite_matcher();
    matcher_oneof_.bipartite_matcher_ = bipartite_matcher;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Matcher.bipartite_matcher)
}
void Matcher::clear_bipartite_matcher() {
  if (has_bipartite_matcher()) {
    delete matcher_oneof_.bipartite_matcher_;
    clear_has_matcher_oneof();
  }
}
Matcher::Matcher()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.Matcher)
}
Matcher::Matcher(const Matcher& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_matcher_oneof();
  switch (from.matcher_oneof_case()) {
    case kArgmaxMatcher: {
      mutable_argmax_matcher()->::object_detection::protos::ArgMaxMatcher::MergeFrom(from.argmax_matcher());
      break;
    }
    case kBipartiteMatcher: {
      mutable_bipartite_matcher()->::object_detection::protos::BipartiteMatcher::MergeFrom(from.bipartite_matcher());
      break;
    }
    case MATCHER_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.Matcher)
}

void Matcher::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Matcher_object_5fdetection_2fprotos_2fmatcher_2eproto.base);
  clear_has_matcher_oneof();
}

Matcher::~Matcher() {
  // @@protoc_insertion_point(destructor:object_detection.protos.Matcher)
  SharedDtor();
}

void Matcher::SharedDtor() {
  if (has_matcher_oneof()) {
    clear_matcher_oneof();
  }
}

void Matcher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Matcher& Matcher::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Matcher_object_5fdetection_2fprotos_2fmatcher_2eproto.base);
  return *internal_default_instance();
}


void Matcher::clear_matcher_oneof() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.Matcher)
  switch (matcher_oneof_case()) {
    case kArgmaxMatcher: {
      delete matcher_oneof_.argmax_matcher_;
      break;
    }
    case kBipartiteMatcher: {
      delete matcher_oneof_.bipartite_matcher_;
      break;
    }
    case MATCHER_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MATCHER_ONEOF_NOT_SET;
}


void Matcher::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.Matcher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_matcher_oneof();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Matcher::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.ArgMaxMatcher argmax_matcher = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_argmax_matcher(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.BipartiteMatcher bipartite_matcher = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_bipartite_matcher(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Matcher::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.Matcher)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.ArgMaxMatcher argmax_matcher = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_argmax_matcher()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.BipartiteMatcher bipartite_matcher = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bipartite_matcher()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.Matcher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.Matcher)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Matcher::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.Matcher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (matcher_oneof_case()) {
    case kArgmaxMatcher:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::argmax_matcher(this), output);
      break;
    case kBipartiteMatcher:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::bipartite_matcher(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.Matcher)
}

::PROTOBUF_NAMESPACE_ID::uint8* Matcher::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.Matcher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (matcher_oneof_case()) {
    case kArgmaxMatcher:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, _Internal::argmax_matcher(this), target);
      break;
    case kBipartiteMatcher:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::bipartite_matcher(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.Matcher)
  return target;
}

size_t Matcher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.Matcher)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (matcher_oneof_case()) {
    // optional .object_detection.protos.ArgMaxMatcher argmax_matcher = 1;
    case kArgmaxMatcher: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *matcher_oneof_.argmax_matcher_);
      break;
    }
    // optional .object_detection.protos.BipartiteMatcher bipartite_matcher = 2;
    case kBipartiteMatcher: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *matcher_oneof_.bipartite_matcher_);
      break;
    }
    case MATCHER_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Matcher::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.Matcher)
  GOOGLE_DCHECK_NE(&from, this);
  const Matcher* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Matcher>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.Matcher)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.Matcher)
    MergeFrom(*source);
  }
}

void Matcher::MergeFrom(const Matcher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.Matcher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.matcher_oneof_case()) {
    case kArgmaxMatcher: {
      mutable_argmax_matcher()->::object_detection::protos::ArgMaxMatcher::MergeFrom(from.argmax_matcher());
      break;
    }
    case kBipartiteMatcher: {
      mutable_bipartite_matcher()->::object_detection::protos::BipartiteMatcher::MergeFrom(from.bipartite_matcher());
      break;
    }
    case MATCHER_ONEOF_NOT_SET: {
      break;
    }
  }
}

void Matcher::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.Matcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matcher::CopyFrom(const Matcher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.Matcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matcher::IsInitialized() const {
  return true;
}

void Matcher::InternalSwap(Matcher* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(matcher_oneof_, other->matcher_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Matcher::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::object_detection::protos::Matcher* Arena::CreateMaybeMessage< ::object_detection::protos::Matcher >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::Matcher >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
