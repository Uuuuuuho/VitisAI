// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/post_processing.proto

#include "object_detection/protos/post_processing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatchNonMaxSuppression_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fcalibration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CalibrationConfig_object_5fdetection_2fprotos_2fcalibration_2eproto;
namespace object_detection {
namespace protos {
class BatchNonMaxSuppressionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchNonMaxSuppression> _instance;
} _BatchNonMaxSuppression_default_instance_;
class PostProcessingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostProcessing> _instance;
} _PostProcessing_default_instance_;
}  // namespace protos
}  // namespace object_detection
static void InitDefaultsscc_info_BatchNonMaxSuppression_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_BatchNonMaxSuppression_default_instance_;
    new (ptr) ::object_detection::protos::BatchNonMaxSuppression();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::BatchNonMaxSuppression::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatchNonMaxSuppression_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BatchNonMaxSuppression_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto}, {}};

static void InitDefaultsscc_info_PostProcessing_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_PostProcessing_default_instance_;
    new (ptr) ::object_detection::protos::PostProcessing();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::PostProcessing::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostProcessing_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PostProcessing_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto}, {
      &scc_info_BatchNonMaxSuppression_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto.base,
      &scc_info_CalibrationConfig_object_5fdetection_2fprotos_2fcalibration_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BatchNonMaxSuppression, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BatchNonMaxSuppression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BatchNonMaxSuppression, score_threshold_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BatchNonMaxSuppression, iou_threshold_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BatchNonMaxSuppression, max_detections_per_class_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BatchNonMaxSuppression, max_total_detections_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BatchNonMaxSuppression, use_static_shapes_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BatchNonMaxSuppression, use_class_agnostic_nms_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BatchNonMaxSuppression, max_classes_per_detection_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BatchNonMaxSuppression, soft_nms_sigma_),
  0,
  4,
  5,
  6,
  1,
  2,
  7,
  3,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::PostProcessing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::PostProcessing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::PostProcessing, batch_non_max_suppression_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::PostProcessing, score_converter_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::PostProcessing, logit_scale_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::PostProcessing, calibration_config_),
  0,
  2,
  3,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::object_detection::protos::BatchNonMaxSuppression)},
  { 21, 30, sizeof(::object_detection::protos::PostProcessing)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_BatchNonMaxSuppression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_PostProcessing_default_instance_),
};

const char descriptor_table_protodef_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-object_detection/protos/post_processin"
  "g.proto\022\027object_detection.protos\032)object"
  "_detection/protos/calibration.proto\"\244\002\n\026"
  "BatchNonMaxSuppression\022\032\n\017score_threshol"
  "d\030\001 \001(\002:\0010\022\032\n\riou_threshold\030\002 \001(\002:\0030.6\022%"
  "\n\030max_detections_per_class\030\003 \001(\005:\003100\022!\n"
  "\024max_total_detections\030\005 \001(\005:\003100\022 \n\021use_"
  "static_shapes\030\006 \001(\010:\005false\022%\n\026use_class_"
  "agnostic_nms\030\007 \001(\010:\005false\022$\n\031max_classes"
  "_per_detection\030\010 \001(\005:\0011\022\031\n\016soft_nms_sigm"
  "a\030\t \001(\002:\0010\"\331\002\n\016PostProcessing\022R\n\031batch_n"
  "on_max_suppression\030\001 \001(\0132/.object_detect"
  "ion.protos.BatchNonMaxSuppression\022Y\n\017sco"
  "re_converter\030\002 \001(\01626.object_detection.pr"
  "otos.PostProcessing.ScoreConverter:\010IDEN"
  "TITY\022\026\n\013logit_scale\030\003 \001(\002:\0011\022F\n\022calibrat"
  "ion_config\030\004 \001(\0132*.object_detection.prot"
  "os.CalibrationConfig\"8\n\016ScoreConverter\022\014"
  "\n\010IDENTITY\020\000\022\013\n\007SIGMOID\020\001\022\013\n\007SOFTMAX\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto_deps[1] = {
  &::descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto_sccs[2] = {
  &scc_info_BatchNonMaxSuppression_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto.base,
  &scc_info_PostProcessing_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto_once;
static bool descriptor_table_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto = {
  &descriptor_table_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto_initialized, descriptor_table_protodef_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto, "object_detection/protos/post_processing.proto", 758,
  &descriptor_table_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto_once, descriptor_table_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto_sccs, descriptor_table_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::offsets,
  file_level_metadata_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto, 2, file_level_enum_descriptors_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto, file_level_service_descriptors_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto), true);
namespace object_detection {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PostProcessing_ScoreConverter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto);
  return file_level_enum_descriptors_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto[0];
}
bool PostProcessing_ScoreConverter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PostProcessing_ScoreConverter PostProcessing::IDENTITY;
constexpr PostProcessing_ScoreConverter PostProcessing::SIGMOID;
constexpr PostProcessing_ScoreConverter PostProcessing::SOFTMAX;
constexpr PostProcessing_ScoreConverter PostProcessing::ScoreConverter_MIN;
constexpr PostProcessing_ScoreConverter PostProcessing::ScoreConverter_MAX;
constexpr int PostProcessing::ScoreConverter_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void BatchNonMaxSuppression::InitAsDefaultInstance() {
}
class BatchNonMaxSuppression::_Internal {
 public:
  using HasBits = decltype(std::declval<BatchNonMaxSuppression>()._has_bits_);
  static void set_has_score_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_iou_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_detections_per_class(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_total_detections(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_use_static_shapes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_class_agnostic_nms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_classes_per_detection(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_soft_nms_sigma(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BatchNonMaxSuppression::BatchNonMaxSuppression()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.BatchNonMaxSuppression)
}
BatchNonMaxSuppression::BatchNonMaxSuppression(const BatchNonMaxSuppression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_threshold_, &from.score_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_classes_per_detection_) -
    reinterpret_cast<char*>(&score_threshold_)) + sizeof(max_classes_per_detection_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.BatchNonMaxSuppression)
}

void BatchNonMaxSuppression::SharedCtor() {
  ::memset(&score_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&soft_nms_sigma_) -
      reinterpret_cast<char*>(&score_threshold_)) + sizeof(soft_nms_sigma_));
  iou_threshold_ = 0.6f;
  max_detections_per_class_ = 100;
  max_total_detections_ = 100;
  max_classes_per_detection_ = 1;
}

BatchNonMaxSuppression::~BatchNonMaxSuppression() {
  // @@protoc_insertion_point(destructor:object_detection.protos.BatchNonMaxSuppression)
  SharedDtor();
}

void BatchNonMaxSuppression::SharedDtor() {
}

void BatchNonMaxSuppression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchNonMaxSuppression& BatchNonMaxSuppression::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchNonMaxSuppression_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto.base);
  return *internal_default_instance();
}


void BatchNonMaxSuppression::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.BatchNonMaxSuppression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&score_threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&soft_nms_sigma_) -
        reinterpret_cast<char*>(&score_threshold_)) + sizeof(soft_nms_sigma_));
    iou_threshold_ = 0.6f;
    max_detections_per_class_ = 100;
    max_total_detections_ = 100;
    max_classes_per_detection_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatchNonMaxSuppression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float score_threshold = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_score_threshold(&has_bits);
          score_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float iou_threshold = 2 [default = 0.6];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_iou_threshold(&has_bits);
          iou_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 max_detections_per_class = 3 [default = 100];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_detections_per_class(&has_bits);
          max_detections_per_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_total_detections = 5 [default = 100];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_total_detections(&has_bits);
          max_total_detections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_static_shapes = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_use_static_shapes(&has_bits);
          use_static_shapes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_class_agnostic_nms = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_use_class_agnostic_nms(&has_bits);
          use_class_agnostic_nms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_classes_per_detection = 8 [default = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_max_classes_per_detection(&has_bits);
          max_classes_per_detection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float soft_nms_sigma = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_soft_nms_sigma(&has_bits);
          soft_nms_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatchNonMaxSuppression::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.BatchNonMaxSuppression)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float score_threshold = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_score_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float iou_threshold = 2 [default = 0.6];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_iou_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &iou_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_detections_per_class = 3 [default = 100];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_max_detections_per_class(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_detections_per_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_total_detections = 5 [default = 100];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_max_total_detections(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_total_detections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_static_shapes = 6 [default = false];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_use_static_shapes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_static_shapes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_class_agnostic_nms = 7 [default = false];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_use_class_agnostic_nms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_class_agnostic_nms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_classes_per_detection = 8 [default = 1];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_max_classes_per_detection(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_classes_per_detection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float soft_nms_sigma = 9 [default = 0];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          _Internal::set_has_soft_nms_sigma(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &soft_nms_sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.BatchNonMaxSuppression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.BatchNonMaxSuppression)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatchNonMaxSuppression::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.BatchNonMaxSuppression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float score_threshold = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->score_threshold(), output);
  }

  // optional float iou_threshold = 2 [default = 0.6];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->iou_threshold(), output);
  }

  // optional int32 max_detections_per_class = 3 [default = 100];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->max_detections_per_class(), output);
  }

  // optional int32 max_total_detections = 5 [default = 100];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->max_total_detections(), output);
  }

  // optional bool use_static_shapes = 6 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->use_static_shapes(), output);
  }

  // optional bool use_class_agnostic_nms = 7 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->use_class_agnostic_nms(), output);
  }

  // optional int32 max_classes_per_detection = 8 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->max_classes_per_detection(), output);
  }

  // optional float soft_nms_sigma = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->soft_nms_sigma(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.BatchNonMaxSuppression)
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchNonMaxSuppression::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.BatchNonMaxSuppression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float score_threshold = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->score_threshold(), target);
  }

  // optional float iou_threshold = 2 [default = 0.6];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->iou_threshold(), target);
  }

  // optional int32 max_detections_per_class = 3 [default = 100];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->max_detections_per_class(), target);
  }

  // optional int32 max_total_detections = 5 [default = 100];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->max_total_detections(), target);
  }

  // optional bool use_static_shapes = 6 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->use_static_shapes(), target);
  }

  // optional bool use_class_agnostic_nms = 7 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->use_class_agnostic_nms(), target);
  }

  // optional int32 max_classes_per_detection = 8 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->max_classes_per_detection(), target);
  }

  // optional float soft_nms_sigma = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->soft_nms_sigma(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.BatchNonMaxSuppression)
  return target;
}

size_t BatchNonMaxSuppression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.BatchNonMaxSuppression)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float score_threshold = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional bool use_static_shapes = 6 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool use_class_agnostic_nms = 7 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float soft_nms_sigma = 9 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float iou_threshold = 2 [default = 0.6];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 max_detections_per_class = 3 [default = 100];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_detections_per_class());
    }

    // optional int32 max_total_detections = 5 [default = 100];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_total_detections());
    }

    // optional int32 max_classes_per_detection = 8 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_classes_per_detection());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchNonMaxSuppression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.BatchNonMaxSuppression)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchNonMaxSuppression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchNonMaxSuppression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.BatchNonMaxSuppression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.BatchNonMaxSuppression)
    MergeFrom(*source);
  }
}

void BatchNonMaxSuppression::MergeFrom(const BatchNonMaxSuppression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.BatchNonMaxSuppression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      score_threshold_ = from.score_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_static_shapes_ = from.use_static_shapes_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_class_agnostic_nms_ = from.use_class_agnostic_nms_;
    }
    if (cached_has_bits & 0x00000008u) {
      soft_nms_sigma_ = from.soft_nms_sigma_;
    }
    if (cached_has_bits & 0x00000010u) {
      iou_threshold_ = from.iou_threshold_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_detections_per_class_ = from.max_detections_per_class_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_total_detections_ = from.max_total_detections_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_classes_per_detection_ = from.max_classes_per_detection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchNonMaxSuppression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.BatchNonMaxSuppression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchNonMaxSuppression::CopyFrom(const BatchNonMaxSuppression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.BatchNonMaxSuppression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchNonMaxSuppression::IsInitialized() const {
  return true;
}

void BatchNonMaxSuppression::InternalSwap(BatchNonMaxSuppression* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(score_threshold_, other->score_threshold_);
  swap(use_static_shapes_, other->use_static_shapes_);
  swap(use_class_agnostic_nms_, other->use_class_agnostic_nms_);
  swap(soft_nms_sigma_, other->soft_nms_sigma_);
  swap(iou_threshold_, other->iou_threshold_);
  swap(max_detections_per_class_, other->max_detections_per_class_);
  swap(max_total_detections_, other->max_total_detections_);
  swap(max_classes_per_detection_, other->max_classes_per_detection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchNonMaxSuppression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostProcessing::InitAsDefaultInstance() {
  ::object_detection::protos::_PostProcessing_default_instance_._instance.get_mutable()->batch_non_max_suppression_ = const_cast< ::object_detection::protos::BatchNonMaxSuppression*>(
      ::object_detection::protos::BatchNonMaxSuppression::internal_default_instance());
  ::object_detection::protos::_PostProcessing_default_instance_._instance.get_mutable()->calibration_config_ = const_cast< ::object_detection::protos::CalibrationConfig*>(
      ::object_detection::protos::CalibrationConfig::internal_default_instance());
}
class PostProcessing::_Internal {
 public:
  using HasBits = decltype(std::declval<PostProcessing>()._has_bits_);
  static const ::object_detection::protos::BatchNonMaxSuppression& batch_non_max_suppression(const PostProcessing* msg);
  static void set_has_batch_non_max_suppression(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score_converter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_logit_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::object_detection::protos::CalibrationConfig& calibration_config(const PostProcessing* msg);
  static void set_has_calibration_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::object_detection::protos::BatchNonMaxSuppression&
PostProcessing::_Internal::batch_non_max_suppression(const PostProcessing* msg) {
  return *msg->batch_non_max_suppression_;
}
const ::object_detection::protos::CalibrationConfig&
PostProcessing::_Internal::calibration_config(const PostProcessing* msg) {
  return *msg->calibration_config_;
}
void PostProcessing::clear_calibration_config() {
  if (calibration_config_ != nullptr) calibration_config_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PostProcessing::PostProcessing()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.PostProcessing)
}
PostProcessing::PostProcessing(const PostProcessing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_batch_non_max_suppression()) {
    batch_non_max_suppression_ = new ::object_detection::protos::BatchNonMaxSuppression(*from.batch_non_max_suppression_);
  } else {
    batch_non_max_suppression_ = nullptr;
  }
  if (from.has_calibration_config()) {
    calibration_config_ = new ::object_detection::protos::CalibrationConfig(*from.calibration_config_);
  } else {
    calibration_config_ = nullptr;
  }
  ::memcpy(&score_converter_, &from.score_converter_,
    static_cast<size_t>(reinterpret_cast<char*>(&logit_scale_) -
    reinterpret_cast<char*>(&score_converter_)) + sizeof(logit_scale_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.PostProcessing)
}

void PostProcessing::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostProcessing_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto.base);
  ::memset(&batch_non_max_suppression_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_converter_) -
      reinterpret_cast<char*>(&batch_non_max_suppression_)) + sizeof(score_converter_));
  logit_scale_ = 1;
}

PostProcessing::~PostProcessing() {
  // @@protoc_insertion_point(destructor:object_detection.protos.PostProcessing)
  SharedDtor();
}

void PostProcessing::SharedDtor() {
  if (this != internal_default_instance()) delete batch_non_max_suppression_;
  if (this != internal_default_instance()) delete calibration_config_;
}

void PostProcessing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostProcessing& PostProcessing::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostProcessing_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto.base);
  return *internal_default_instance();
}


void PostProcessing::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.PostProcessing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(batch_non_max_suppression_ != nullptr);
      batch_non_max_suppression_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(calibration_config_ != nullptr);
      calibration_config_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    score_converter_ = 0;
    logit_scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PostProcessing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_batch_non_max_suppression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.PostProcessing.ScoreConverter score_converter = 2 [default = IDENTITY];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::object_detection::protos::PostProcessing_ScoreConverter_IsValid(val))) {
            set_score_converter(static_cast<::object_detection::protos::PostProcessing_ScoreConverter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float logit_scale = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_logit_scale(&has_bits);
          logit_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.CalibrationConfig calibration_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_calibration_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PostProcessing::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.PostProcessing)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_batch_non_max_suppression()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.PostProcessing.ScoreConverter score_converter = 2 [default = IDENTITY];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::PostProcessing_ScoreConverter_IsValid(value)) {
            set_score_converter(static_cast< ::object_detection::protos::PostProcessing_ScoreConverter >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float logit_scale = 3 [default = 1];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_logit_scale(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &logit_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.CalibrationConfig calibration_config = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_calibration_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.PostProcessing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.PostProcessing)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PostProcessing::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.PostProcessing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::batch_non_max_suppression(this), output);
  }

  // optional .object_detection.protos.PostProcessing.ScoreConverter score_converter = 2 [default = IDENTITY];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->score_converter(), output);
  }

  // optional float logit_scale = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->logit_scale(), output);
  }

  // optional .object_detection.protos.CalibrationConfig calibration_config = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::calibration_config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.PostProcessing)
}

::PROTOBUF_NAMESPACE_ID::uint8* PostProcessing::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.PostProcessing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::batch_non_max_suppression(this), target);
  }

  // optional .object_detection.protos.PostProcessing.ScoreConverter score_converter = 2 [default = IDENTITY];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->score_converter(), target);
  }

  // optional float logit_scale = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->logit_scale(), target);
  }

  // optional .object_detection.protos.CalibrationConfig calibration_config = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::calibration_config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.PostProcessing)
  return target;
}

size_t PostProcessing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.PostProcessing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *batch_non_max_suppression_);
    }

    // optional .object_detection.protos.CalibrationConfig calibration_config = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *calibration_config_);
    }

    // optional .object_detection.protos.PostProcessing.ScoreConverter score_converter = 2 [default = IDENTITY];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->score_converter());
    }

    // optional float logit_scale = 3 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostProcessing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.PostProcessing)
  GOOGLE_DCHECK_NE(&from, this);
  const PostProcessing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostProcessing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.PostProcessing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.PostProcessing)
    MergeFrom(*source);
  }
}

void PostProcessing::MergeFrom(const PostProcessing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.PostProcessing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_batch_non_max_suppression()->::object_detection::protos::BatchNonMaxSuppression::MergeFrom(from.batch_non_max_suppression());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_calibration_config()->::object_detection::protos::CalibrationConfig::MergeFrom(from.calibration_config());
    }
    if (cached_has_bits & 0x00000004u) {
      score_converter_ = from.score_converter_;
    }
    if (cached_has_bits & 0x00000008u) {
      logit_scale_ = from.logit_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PostProcessing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.PostProcessing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostProcessing::CopyFrom(const PostProcessing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.PostProcessing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostProcessing::IsInitialized() const {
  return true;
}

void PostProcessing::InternalSwap(PostProcessing* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(batch_non_max_suppression_, other->batch_non_max_suppression_);
  swap(calibration_config_, other->calibration_config_);
  swap(score_converter_, other->score_converter_);
  swap(logit_scale_, other->logit_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostProcessing::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::object_detection::protos::BatchNonMaxSuppression* Arena::CreateMaybeMessage< ::object_detection::protos::BatchNonMaxSuppression >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::BatchNonMaxSuppression >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::PostProcessing* Arena::CreateMaybeMessage< ::object_detection::protos::PostProcessing >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::PostProcessing >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
