// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/hyperparams.proto

#include "object_detection/protos/hyperparams.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fhyperparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatchNorm_object_5fdetection_2fprotos_2fhyperparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fhyperparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupNorm_object_5fdetection_2fprotos_2fhyperparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fhyperparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Initializer_object_5fdetection_2fprotos_2fhyperparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fhyperparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_L1Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fhyperparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_L2Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fhyperparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomNormalInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fhyperparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fhyperparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TruncatedNormalInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fhyperparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VarianceScalingInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto;
namespace object_detection {
namespace protos {
class HyperparamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hyperparams> _instance;
  const ::object_detection::protos::BatchNorm* batch_norm_;
  const ::object_detection::protos::GroupNorm* group_norm_;
} _Hyperparams_default_instance_;
class RegularizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Regularizer> _instance;
  const ::object_detection::protos::L1Regularizer* l1_regularizer_;
  const ::object_detection::protos::L2Regularizer* l2_regularizer_;
} _Regularizer_default_instance_;
class L1RegularizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<L1Regularizer> _instance;
} _L1Regularizer_default_instance_;
class L2RegularizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<L2Regularizer> _instance;
} _L2Regularizer_default_instance_;
class InitializerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Initializer> _instance;
  const ::object_detection::protos::TruncatedNormalInitializer* truncated_normal_initializer_;
  const ::object_detection::protos::VarianceScalingInitializer* variance_scaling_initializer_;
  const ::object_detection::protos::RandomNormalInitializer* random_normal_initializer_;
} _Initializer_default_instance_;
class TruncatedNormalInitializerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TruncatedNormalInitializer> _instance;
} _TruncatedNormalInitializer_default_instance_;
class VarianceScalingInitializerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarianceScalingInitializer> _instance;
} _VarianceScalingInitializer_default_instance_;
class RandomNormalInitializerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomNormalInitializer> _instance;
} _RandomNormalInitializer_default_instance_;
class BatchNormDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchNorm> _instance;
} _BatchNorm_default_instance_;
class GroupNormDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupNorm> _instance;
} _GroupNorm_default_instance_;
}  // namespace protos
}  // namespace object_detection
static void InitDefaultsscc_info_BatchNorm_object_5fdetection_2fprotos_2fhyperparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_BatchNorm_default_instance_;
    new (ptr) ::object_detection::protos::BatchNorm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::BatchNorm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatchNorm_object_5fdetection_2fprotos_2fhyperparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BatchNorm_object_5fdetection_2fprotos_2fhyperparams_2eproto}, {}};

static void InitDefaultsscc_info_GroupNorm_object_5fdetection_2fprotos_2fhyperparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_GroupNorm_default_instance_;
    new (ptr) ::object_detection::protos::GroupNorm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::GroupNorm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupNorm_object_5fdetection_2fprotos_2fhyperparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GroupNorm_object_5fdetection_2fprotos_2fhyperparams_2eproto}, {}};

static void InitDefaultsscc_info_Hyperparams_object_5fdetection_2fprotos_2fhyperparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_Hyperparams_default_instance_;
    new (ptr) ::object_detection::protos::Hyperparams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::Hyperparams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Hyperparams_object_5fdetection_2fprotos_2fhyperparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_Hyperparams_object_5fdetection_2fprotos_2fhyperparams_2eproto}, {
      &scc_info_Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
      &scc_info_Initializer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
      &scc_info_BatchNorm_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
      &scc_info_GroupNorm_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,}};

static void InitDefaultsscc_info_Initializer_object_5fdetection_2fprotos_2fhyperparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_Initializer_default_instance_;
    new (ptr) ::object_detection::protos::Initializer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::Initializer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Initializer_object_5fdetection_2fprotos_2fhyperparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Initializer_object_5fdetection_2fprotos_2fhyperparams_2eproto}, {
      &scc_info_TruncatedNormalInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
      &scc_info_VarianceScalingInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
      &scc_info_RandomNormalInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,}};

static void InitDefaultsscc_info_L1Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_L1Regularizer_default_instance_;
    new (ptr) ::object_detection::protos::L1Regularizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::L1Regularizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_L1Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_L1Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto}, {}};

static void InitDefaultsscc_info_L2Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_L2Regularizer_default_instance_;
    new (ptr) ::object_detection::protos::L2Regularizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::L2Regularizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_L2Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_L2Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto}, {}};

static void InitDefaultsscc_info_RandomNormalInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomNormalInitializer_default_instance_;
    new (ptr) ::object_detection::protos::RandomNormalInitializer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomNormalInitializer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomNormalInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RandomNormalInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto}, {}};

static void InitDefaultsscc_info_Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_Regularizer_default_instance_;
    new (ptr) ::object_detection::protos::Regularizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::Regularizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto}, {
      &scc_info_L1Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
      &scc_info_L2Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,}};

static void InitDefaultsscc_info_TruncatedNormalInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_TruncatedNormalInitializer_default_instance_;
    new (ptr) ::object_detection::protos::TruncatedNormalInitializer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::TruncatedNormalInitializer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TruncatedNormalInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TruncatedNormalInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto}, {}};

static void InitDefaultsscc_info_VarianceScalingInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_VarianceScalingInitializer_default_instance_;
    new (ptr) ::object_detection::protos::VarianceScalingInitializer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::VarianceScalingInitializer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VarianceScalingInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VarianceScalingInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_object_5fdetection_2fprotos_2fhyperparams_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_object_5fdetection_2fprotos_2fhyperparams_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_object_5fdetection_2fprotos_2fhyperparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_object_5fdetection_2fprotos_2fhyperparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Hyperparams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Hyperparams, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Hyperparams, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Hyperparams, op_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Hyperparams, regularizer_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Hyperparams, initializer_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Hyperparams, activation_),
  offsetof(::object_detection::protos::HyperparamsDefaultTypeInternal, batch_norm_),
  offsetof(::object_detection::protos::HyperparamsDefaultTypeInternal, group_norm_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Hyperparams, regularize_depthwise_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Hyperparams, normalizer_oneof_),
  3,
  0,
  1,
  4,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Regularizer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Regularizer, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Regularizer, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::object_detection::protos::RegularizerDefaultTypeInternal, l1_regularizer_),
  offsetof(::object_detection::protos::RegularizerDefaultTypeInternal, l2_regularizer_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Regularizer, regularizer_oneof_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::L1Regularizer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::L1Regularizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::L1Regularizer, weight_),
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::L2Regularizer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::L2Regularizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::L2Regularizer, weight_),
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Initializer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Initializer, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Initializer, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::object_detection::protos::InitializerDefaultTypeInternal, truncated_normal_initializer_),
  offsetof(::object_detection::protos::InitializerDefaultTypeInternal, variance_scaling_initializer_),
  offsetof(::object_detection::protos::InitializerDefaultTypeInternal, random_normal_initializer_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Initializer, initializer_oneof_),
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TruncatedNormalInitializer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TruncatedNormalInitializer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TruncatedNormalInitializer, mean_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TruncatedNormalInitializer, stddev_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::VarianceScalingInitializer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::VarianceScalingInitializer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::VarianceScalingInitializer, factor_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::VarianceScalingInitializer, uniform_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::VarianceScalingInitializer, mode_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomNormalInitializer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomNormalInitializer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomNormalInitializer, mean_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomNormalInitializer, stddev_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BatchNorm, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BatchNorm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BatchNorm, decay_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BatchNorm, center_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BatchNorm, scale_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BatchNorm, epsilon_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::BatchNorm, train_),
  2,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::GroupNorm, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::GroupNorm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::object_detection::protos::Hyperparams)},
  { 20, 28, sizeof(::object_detection::protos::Regularizer)},
  { 30, 36, sizeof(::object_detection::protos::L1Regularizer)},
  { 37, 43, sizeof(::object_detection::protos::L2Regularizer)},
  { 44, 53, sizeof(::object_detection::protos::Initializer)},
  { 56, 63, sizeof(::object_detection::protos::TruncatedNormalInitializer)},
  { 65, 73, sizeof(::object_detection::protos::VarianceScalingInitializer)},
  { 76, 83, sizeof(::object_detection::protos::RandomNormalInitializer)},
  { 85, 95, sizeof(::object_detection::protos::BatchNorm)},
  { 100, 105, sizeof(::object_detection::protos::GroupNorm)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_Hyperparams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_Regularizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_L1Regularizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_L2Regularizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_Initializer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_TruncatedNormalInitializer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_VarianceScalingInitializer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomNormalInitializer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_BatchNorm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_GroupNorm_default_instance_),
};

const char descriptor_table_protodef_object_5fdetection_2fprotos_2fhyperparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)object_detection/protos/hyperparams.pr"
  "oto\022\027object_detection.protos\"\374\003\n\013Hyperpa"
  "rams\0229\n\002op\030\001 \001(\0162\'.object_detection.prot"
  "os.Hyperparams.Op:\004CONV\0229\n\013regularizer\030\002"
  " \001(\0132$.object_detection.protos.Regulariz"
  "er\0229\n\013initializer\030\003 \001(\0132$.object_detecti"
  "on.protos.Initializer\022I\n\nactivation\030\004 \001("
  "\0162/.object_detection.protos.Hyperparams."
  "Activation:\004RELU\0228\n\nbatch_norm\030\005 \001(\0132\".o"
  "bject_detection.protos.BatchNormH\000\0228\n\ngr"
  "oup_norm\030\007 \001(\0132\".object_detection.protos"
  ".GroupNormH\000\022#\n\024regularize_depthwise\030\006 \001"
  "(\010:\005false\"\026\n\002Op\022\010\n\004CONV\020\001\022\006\n\002FC\020\002\",\n\nAct"
  "ivation\022\010\n\004NONE\020\000\022\010\n\004RELU\020\001\022\n\n\006RELU_6\020\002B"
  "\022\n\020normalizer_oneof\"\246\001\n\013Regularizer\022@\n\016l"
  "1_regularizer\030\001 \001(\0132&.object_detection.p"
  "rotos.L1RegularizerH\000\022@\n\016l2_regularizer\030"
  "\002 \001(\0132&.object_detection.protos.L2Regula"
  "rizerH\000B\023\n\021regularizer_oneof\"\"\n\rL1Regula"
  "rizer\022\021\n\006weight\030\001 \001(\002:\0011\"\"\n\rL2Regularize"
  "r\022\021\n\006weight\030\001 \001(\002:\0011\"\263\002\n\013Initializer\022[\n\034"
  "truncated_normal_initializer\030\001 \001(\01323.obj"
  "ect_detection.protos.TruncatedNormalInit"
  "ializerH\000\022[\n\034variance_scaling_initialize"
  "r\030\002 \001(\01323.object_detection.protos.Varian"
  "ceScalingInitializerH\000\022U\n\031random_normal_"
  "initializer\030\003 \001(\01320.object_detection.pro"
  "tos.RandomNormalInitializerH\000B\023\n\021initial"
  "izer_oneof\"@\n\032TruncatedNormalInitializer"
  "\022\017\n\004mean\030\001 \001(\002:\0010\022\021\n\006stddev\030\002 \001(\002:\0011\"\305\001\n"
  "\032VarianceScalingInitializer\022\021\n\006factor\030\001 "
  "\001(\002:\0012\022\026\n\007uniform\030\002 \001(\010:\005false\022N\n\004mode\030\003"
  " \001(\01628.object_detection.protos.VarianceS"
  "calingInitializer.Mode:\006FAN_IN\",\n\004Mode\022\n"
  "\n\006FAN_IN\020\000\022\013\n\007FAN_OUT\020\001\022\013\n\007FAN_AVG\020\002\"=\n\027"
  "RandomNormalInitializer\022\017\n\004mean\030\001 \001(\002:\0010"
  "\022\021\n\006stddev\030\002 \001(\002:\0011\"z\n\tBatchNorm\022\024\n\005deca"
  "y\030\001 \001(\002:\0050.999\022\024\n\006center\030\002 \001(\010:\004true\022\024\n\005"
  "scale\030\003 \001(\010:\005false\022\026\n\007epsilon\030\004 \001(\002:\0050.0"
  "01\022\023\n\005train\030\005 \001(\010:\004true\"\013\n\tGroupNorm"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_object_5fdetection_2fprotos_2fhyperparams_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_object_5fdetection_2fprotos_2fhyperparams_2eproto_sccs[10] = {
  &scc_info_BatchNorm_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
  &scc_info_GroupNorm_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
  &scc_info_Hyperparams_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
  &scc_info_Initializer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
  &scc_info_L1Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
  &scc_info_L2Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
  &scc_info_RandomNormalInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
  &scc_info_Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
  &scc_info_TruncatedNormalInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
  &scc_info_VarianceScalingInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_object_5fdetection_2fprotos_2fhyperparams_2eproto_once;
static bool descriptor_table_object_5fdetection_2fprotos_2fhyperparams_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2fhyperparams_2eproto = {
  &descriptor_table_object_5fdetection_2fprotos_2fhyperparams_2eproto_initialized, descriptor_table_protodef_object_5fdetection_2fprotos_2fhyperparams_2eproto, "object_detection/protos/hyperparams.proto", 1596,
  &descriptor_table_object_5fdetection_2fprotos_2fhyperparams_2eproto_once, descriptor_table_object_5fdetection_2fprotos_2fhyperparams_2eproto_sccs, descriptor_table_object_5fdetection_2fprotos_2fhyperparams_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_object_5fdetection_2fprotos_2fhyperparams_2eproto::offsets,
  file_level_metadata_object_5fdetection_2fprotos_2fhyperparams_2eproto, 10, file_level_enum_descriptors_object_5fdetection_2fprotos_2fhyperparams_2eproto, file_level_service_descriptors_object_5fdetection_2fprotos_2fhyperparams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_object_5fdetection_2fprotos_2fhyperparams_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_object_5fdetection_2fprotos_2fhyperparams_2eproto), true);
namespace object_detection {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Hyperparams_Op_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_5fdetection_2fprotos_2fhyperparams_2eproto);
  return file_level_enum_descriptors_object_5fdetection_2fprotos_2fhyperparams_2eproto[0];
}
bool Hyperparams_Op_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Hyperparams_Op Hyperparams::CONV;
constexpr Hyperparams_Op Hyperparams::FC;
constexpr Hyperparams_Op Hyperparams::Op_MIN;
constexpr Hyperparams_Op Hyperparams::Op_MAX;
constexpr int Hyperparams::Op_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Hyperparams_Activation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_5fdetection_2fprotos_2fhyperparams_2eproto);
  return file_level_enum_descriptors_object_5fdetection_2fprotos_2fhyperparams_2eproto[1];
}
bool Hyperparams_Activation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Hyperparams_Activation Hyperparams::NONE;
constexpr Hyperparams_Activation Hyperparams::RELU;
constexpr Hyperparams_Activation Hyperparams::RELU_6;
constexpr Hyperparams_Activation Hyperparams::Activation_MIN;
constexpr Hyperparams_Activation Hyperparams::Activation_MAX;
constexpr int Hyperparams::Activation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VarianceScalingInitializer_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_5fdetection_2fprotos_2fhyperparams_2eproto);
  return file_level_enum_descriptors_object_5fdetection_2fprotos_2fhyperparams_2eproto[2];
}
bool VarianceScalingInitializer_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VarianceScalingInitializer_Mode VarianceScalingInitializer::FAN_IN;
constexpr VarianceScalingInitializer_Mode VarianceScalingInitializer::FAN_OUT;
constexpr VarianceScalingInitializer_Mode VarianceScalingInitializer::FAN_AVG;
constexpr VarianceScalingInitializer_Mode VarianceScalingInitializer::Mode_MIN;
constexpr VarianceScalingInitializer_Mode VarianceScalingInitializer::Mode_MAX;
constexpr int VarianceScalingInitializer::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Hyperparams::InitAsDefaultInstance() {
  ::object_detection::protos::_Hyperparams_default_instance_._instance.get_mutable()->regularizer_ = const_cast< ::object_detection::protos::Regularizer*>(
      ::object_detection::protos::Regularizer::internal_default_instance());
  ::object_detection::protos::_Hyperparams_default_instance_._instance.get_mutable()->initializer_ = const_cast< ::object_detection::protos::Initializer*>(
      ::object_detection::protos::Initializer::internal_default_instance());
  ::object_detection::protos::_Hyperparams_default_instance_.batch_norm_ = const_cast< ::object_detection::protos::BatchNorm*>(
      ::object_detection::protos::BatchNorm::internal_default_instance());
  ::object_detection::protos::_Hyperparams_default_instance_.group_norm_ = const_cast< ::object_detection::protos::GroupNorm*>(
      ::object_detection::protos::GroupNorm::internal_default_instance());
}
class Hyperparams::_Internal {
 public:
  using HasBits = decltype(std::declval<Hyperparams>()._has_bits_);
  static void set_has_op(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::object_detection::protos::Regularizer& regularizer(const Hyperparams* msg);
  static void set_has_regularizer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::object_detection::protos::Initializer& initializer(const Hyperparams* msg);
  static void set_has_initializer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_activation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::object_detection::protos::BatchNorm& batch_norm(const Hyperparams* msg);
  static const ::object_detection::protos::GroupNorm& group_norm(const Hyperparams* msg);
  static void set_has_regularize_depthwise(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::object_detection::protos::Regularizer&
Hyperparams::_Internal::regularizer(const Hyperparams* msg) {
  return *msg->regularizer_;
}
const ::object_detection::protos::Initializer&
Hyperparams::_Internal::initializer(const Hyperparams* msg) {
  return *msg->initializer_;
}
const ::object_detection::protos::BatchNorm&
Hyperparams::_Internal::batch_norm(const Hyperparams* msg) {
  return *msg->normalizer_oneof_.batch_norm_;
}
const ::object_detection::protos::GroupNorm&
Hyperparams::_Internal::group_norm(const Hyperparams* msg) {
  return *msg->normalizer_oneof_.group_norm_;
}
void Hyperparams::set_allocated_batch_norm(::object_detection::protos::BatchNorm* batch_norm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_normalizer_oneof();
  if (batch_norm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      batch_norm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batch_norm, submessage_arena);
    }
    set_has_batch_norm();
    normalizer_oneof_.batch_norm_ = batch_norm;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Hyperparams.batch_norm)
}
void Hyperparams::set_allocated_group_norm(::object_detection::protos::GroupNorm* group_norm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_normalizer_oneof();
  if (group_norm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      group_norm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_norm, submessage_arena);
    }
    set_has_group_norm();
    normalizer_oneof_.group_norm_ = group_norm;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Hyperparams.group_norm)
}
Hyperparams::Hyperparams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.Hyperparams)
}
Hyperparams::Hyperparams(const Hyperparams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_regularizer()) {
    regularizer_ = new ::object_detection::protos::Regularizer(*from.regularizer_);
  } else {
    regularizer_ = nullptr;
  }
  if (from.has_initializer()) {
    initializer_ = new ::object_detection::protos::Initializer(*from.initializer_);
  } else {
    initializer_ = nullptr;
  }
  ::memcpy(&regularize_depthwise_, &from.regularize_depthwise_,
    static_cast<size_t>(reinterpret_cast<char*>(&activation_) -
    reinterpret_cast<char*>(&regularize_depthwise_)) + sizeof(activation_));
  clear_has_normalizer_oneof();
  switch (from.normalizer_oneof_case()) {
    case kBatchNorm: {
      mutable_batch_norm()->::object_detection::protos::BatchNorm::MergeFrom(from.batch_norm());
      break;
    }
    case kGroupNorm: {
      mutable_group_norm()->::object_detection::protos::GroupNorm::MergeFrom(from.group_norm());
      break;
    }
    case NORMALIZER_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.Hyperparams)
}

void Hyperparams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Hyperparams_object_5fdetection_2fprotos_2fhyperparams_2eproto.base);
  ::memset(&regularizer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&regularize_depthwise_) -
      reinterpret_cast<char*>(&regularizer_)) + sizeof(regularize_depthwise_));
  op_ = 1;
  activation_ = 1;
  clear_has_normalizer_oneof();
}

Hyperparams::~Hyperparams() {
  // @@protoc_insertion_point(destructor:object_detection.protos.Hyperparams)
  SharedDtor();
}

void Hyperparams::SharedDtor() {
  if (this != internal_default_instance()) delete regularizer_;
  if (this != internal_default_instance()) delete initializer_;
  if (has_normalizer_oneof()) {
    clear_normalizer_oneof();
  }
}

void Hyperparams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hyperparams& Hyperparams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hyperparams_object_5fdetection_2fprotos_2fhyperparams_2eproto.base);
  return *internal_default_instance();
}


void Hyperparams::clear_normalizer_oneof() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.Hyperparams)
  switch (normalizer_oneof_case()) {
    case kBatchNorm: {
      delete normalizer_oneof_.batch_norm_;
      break;
    }
    case kGroupNorm: {
      delete normalizer_oneof_.group_norm_;
      break;
    }
    case NORMALIZER_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NORMALIZER_ONEOF_NOT_SET;
}


void Hyperparams::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.Hyperparams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(regularizer_ != nullptr);
      regularizer_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(initializer_ != nullptr);
      initializer_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    regularize_depthwise_ = false;
    op_ = 1;
    activation_ = 1;
  }
  clear_normalizer_oneof();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Hyperparams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.Hyperparams.Op op = 1 [default = CONV];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::object_detection::protos::Hyperparams_Op_IsValid(val))) {
            set_op(static_cast<::object_detection::protos::Hyperparams_Op>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.Regularizer regularizer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_regularizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.Initializer initializer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_initializer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.Hyperparams.Activation activation = 4 [default = RELU];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::object_detection::protos::Hyperparams_Activation_IsValid(val))) {
            set_activation(static_cast<::object_detection::protos::Hyperparams_Activation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.BatchNorm batch_norm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_batch_norm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool regularize_depthwise = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_regularize_depthwise(&has_bits);
          regularize_depthwise_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.GroupNorm group_norm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_group_norm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Hyperparams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.Hyperparams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.Hyperparams.Op op = 1 [default = CONV];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::Hyperparams_Op_IsValid(value)) {
            set_op(static_cast< ::object_detection::protos::Hyperparams_Op >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.Regularizer regularizer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_regularizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.Initializer initializer = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_initializer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.Hyperparams.Activation activation = 4 [default = RELU];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::Hyperparams_Activation_IsValid(value)) {
            set_activation(static_cast< ::object_detection::protos::Hyperparams_Activation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.BatchNorm batch_norm = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_batch_norm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool regularize_depthwise = 6 [default = false];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_regularize_depthwise(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &regularize_depthwise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.GroupNorm group_norm = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_group_norm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.Hyperparams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.Hyperparams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Hyperparams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.Hyperparams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Hyperparams.Op op = 1 [default = CONV];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // optional .object_detection.protos.Regularizer regularizer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::regularizer(this), output);
  }

  // optional .object_detection.protos.Initializer initializer = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::initializer(this), output);
  }

  // optional .object_detection.protos.Hyperparams.Activation activation = 4 [default = RELU];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->activation(), output);
  }

  // optional .object_detection.protos.BatchNorm batch_norm = 5;
  if (has_batch_norm()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::batch_norm(this), output);
  }

  // optional bool regularize_depthwise = 6 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->regularize_depthwise(), output);
  }

  // optional .object_detection.protos.GroupNorm group_norm = 7;
  if (has_group_norm()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::group_norm(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.Hyperparams)
}

::PROTOBUF_NAMESPACE_ID::uint8* Hyperparams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.Hyperparams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Hyperparams.Op op = 1 [default = CONV];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // optional .object_detection.protos.Regularizer regularizer = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::regularizer(this), target);
  }

  // optional .object_detection.protos.Initializer initializer = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::initializer(this), target);
  }

  // optional .object_detection.protos.Hyperparams.Activation activation = 4 [default = RELU];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->activation(), target);
  }

  // optional .object_detection.protos.BatchNorm batch_norm = 5;
  if (has_batch_norm()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::batch_norm(this), target);
  }

  // optional bool regularize_depthwise = 6 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->regularize_depthwise(), target);
  }

  // optional .object_detection.protos.GroupNorm group_norm = 7;
  if (has_group_norm()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::group_norm(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.Hyperparams)
  return target;
}

size_t Hyperparams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.Hyperparams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .object_detection.protos.Regularizer regularizer = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *regularizer_);
    }

    // optional .object_detection.protos.Initializer initializer = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *initializer_);
    }

    // optional bool regularize_depthwise = 6 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .object_detection.protos.Hyperparams.Op op = 1 [default = CONV];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->op());
    }

    // optional .object_detection.protos.Hyperparams.Activation activation = 4 [default = RELU];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->activation());
    }

  }
  switch (normalizer_oneof_case()) {
    // optional .object_detection.protos.BatchNorm batch_norm = 5;
    case kBatchNorm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *normalizer_oneof_.batch_norm_);
      break;
    }
    // optional .object_detection.protos.GroupNorm group_norm = 7;
    case kGroupNorm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *normalizer_oneof_.group_norm_);
      break;
    }
    case NORMALIZER_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hyperparams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.Hyperparams)
  GOOGLE_DCHECK_NE(&from, this);
  const Hyperparams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hyperparams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.Hyperparams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.Hyperparams)
    MergeFrom(*source);
  }
}

void Hyperparams::MergeFrom(const Hyperparams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.Hyperparams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_regularizer()->::object_detection::protos::Regularizer::MergeFrom(from.regularizer());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_initializer()->::object_detection::protos::Initializer::MergeFrom(from.initializer());
    }
    if (cached_has_bits & 0x00000004u) {
      regularize_depthwise_ = from.regularize_depthwise_;
    }
    if (cached_has_bits & 0x00000008u) {
      op_ = from.op_;
    }
    if (cached_has_bits & 0x00000010u) {
      activation_ = from.activation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.normalizer_oneof_case()) {
    case kBatchNorm: {
      mutable_batch_norm()->::object_detection::protos::BatchNorm::MergeFrom(from.batch_norm());
      break;
    }
    case kGroupNorm: {
      mutable_group_norm()->::object_detection::protos::GroupNorm::MergeFrom(from.group_norm());
      break;
    }
    case NORMALIZER_ONEOF_NOT_SET: {
      break;
    }
  }
}

void Hyperparams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.Hyperparams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hyperparams::CopyFrom(const Hyperparams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.Hyperparams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hyperparams::IsInitialized() const {
  return true;
}

void Hyperparams::InternalSwap(Hyperparams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(regularizer_, other->regularizer_);
  swap(initializer_, other->initializer_);
  swap(regularize_depthwise_, other->regularize_depthwise_);
  swap(op_, other->op_);
  swap(activation_, other->activation_);
  swap(normalizer_oneof_, other->normalizer_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hyperparams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Regularizer::InitAsDefaultInstance() {
  ::object_detection::protos::_Regularizer_default_instance_.l1_regularizer_ = const_cast< ::object_detection::protos::L1Regularizer*>(
      ::object_detection::protos::L1Regularizer::internal_default_instance());
  ::object_detection::protos::_Regularizer_default_instance_.l2_regularizer_ = const_cast< ::object_detection::protos::L2Regularizer*>(
      ::object_detection::protos::L2Regularizer::internal_default_instance());
}
class Regularizer::_Internal {
 public:
  using HasBits = decltype(std::declval<Regularizer>()._has_bits_);
  static const ::object_detection::protos::L1Regularizer& l1_regularizer(const Regularizer* msg);
  static const ::object_detection::protos::L2Regularizer& l2_regularizer(const Regularizer* msg);
};

const ::object_detection::protos::L1Regularizer&
Regularizer::_Internal::l1_regularizer(const Regularizer* msg) {
  return *msg->regularizer_oneof_.l1_regularizer_;
}
const ::object_detection::protos::L2Regularizer&
Regularizer::_Internal::l2_regularizer(const Regularizer* msg) {
  return *msg->regularizer_oneof_.l2_regularizer_;
}
void Regularizer::set_allocated_l1_regularizer(::object_detection::protos::L1Regularizer* l1_regularizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_regularizer_oneof();
  if (l1_regularizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      l1_regularizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, l1_regularizer, submessage_arena);
    }
    set_has_l1_regularizer();
    regularizer_oneof_.l1_regularizer_ = l1_regularizer;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Regularizer.l1_regularizer)
}
void Regularizer::set_allocated_l2_regularizer(::object_detection::protos::L2Regularizer* l2_regularizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_regularizer_oneof();
  if (l2_regularizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      l2_regularizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, l2_regularizer, submessage_arena);
    }
    set_has_l2_regularizer();
    regularizer_oneof_.l2_regularizer_ = l2_regularizer;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Regularizer.l2_regularizer)
}
Regularizer::Regularizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.Regularizer)
}
Regularizer::Regularizer(const Regularizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_regularizer_oneof();
  switch (from.regularizer_oneof_case()) {
    case kL1Regularizer: {
      mutable_l1_regularizer()->::object_detection::protos::L1Regularizer::MergeFrom(from.l1_regularizer());
      break;
    }
    case kL2Regularizer: {
      mutable_l2_regularizer()->::object_detection::protos::L2Regularizer::MergeFrom(from.l2_regularizer());
      break;
    }
    case REGULARIZER_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.Regularizer)
}

void Regularizer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base);
  clear_has_regularizer_oneof();
}

Regularizer::~Regularizer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.Regularizer)
  SharedDtor();
}

void Regularizer::SharedDtor() {
  if (has_regularizer_oneof()) {
    clear_regularizer_oneof();
  }
}

void Regularizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Regularizer& Regularizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base);
  return *internal_default_instance();
}


void Regularizer::clear_regularizer_oneof() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.Regularizer)
  switch (regularizer_oneof_case()) {
    case kL1Regularizer: {
      delete regularizer_oneof_.l1_regularizer_;
      break;
    }
    case kL2Regularizer: {
      delete regularizer_oneof_.l2_regularizer_;
      break;
    }
    case REGULARIZER_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REGULARIZER_ONEOF_NOT_SET;
}


void Regularizer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.Regularizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_regularizer_oneof();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Regularizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.L1Regularizer l1_regularizer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_l1_regularizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.L2Regularizer l2_regularizer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_l2_regularizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Regularizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.Regularizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.L1Regularizer l1_regularizer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_l1_regularizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.L2Regularizer l2_regularizer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_l2_regularizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.Regularizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.Regularizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Regularizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.Regularizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (regularizer_oneof_case()) {
    case kL1Regularizer:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::l1_regularizer(this), output);
      break;
    case kL2Regularizer:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::l2_regularizer(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.Regularizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* Regularizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.Regularizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (regularizer_oneof_case()) {
    case kL1Regularizer:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, _Internal::l1_regularizer(this), target);
      break;
    case kL2Regularizer:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::l2_regularizer(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.Regularizer)
  return target;
}

size_t Regularizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.Regularizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (regularizer_oneof_case()) {
    // optional .object_detection.protos.L1Regularizer l1_regularizer = 1;
    case kL1Regularizer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *regularizer_oneof_.l1_regularizer_);
      break;
    }
    // optional .object_detection.protos.L2Regularizer l2_regularizer = 2;
    case kL2Regularizer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *regularizer_oneof_.l2_regularizer_);
      break;
    }
    case REGULARIZER_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Regularizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.Regularizer)
  GOOGLE_DCHECK_NE(&from, this);
  const Regularizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Regularizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.Regularizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.Regularizer)
    MergeFrom(*source);
  }
}

void Regularizer::MergeFrom(const Regularizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.Regularizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.regularizer_oneof_case()) {
    case kL1Regularizer: {
      mutable_l1_regularizer()->::object_detection::protos::L1Regularizer::MergeFrom(from.l1_regularizer());
      break;
    }
    case kL2Regularizer: {
      mutable_l2_regularizer()->::object_detection::protos::L2Regularizer::MergeFrom(from.l2_regularizer());
      break;
    }
    case REGULARIZER_ONEOF_NOT_SET: {
      break;
    }
  }
}

void Regularizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.Regularizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Regularizer::CopyFrom(const Regularizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.Regularizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Regularizer::IsInitialized() const {
  return true;
}

void Regularizer::InternalSwap(Regularizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(regularizer_oneof_, other->regularizer_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Regularizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void L1Regularizer::InitAsDefaultInstance() {
}
class L1Regularizer::_Internal {
 public:
  using HasBits = decltype(std::declval<L1Regularizer>()._has_bits_);
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

L1Regularizer::L1Regularizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.L1Regularizer)
}
L1Regularizer::L1Regularizer(const L1Regularizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.L1Regularizer)
}

void L1Regularizer::SharedCtor() {
  weight_ = 1;
}

L1Regularizer::~L1Regularizer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.L1Regularizer)
  SharedDtor();
}

void L1Regularizer::SharedDtor() {
}

void L1Regularizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const L1Regularizer& L1Regularizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_L1Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base);
  return *internal_default_instance();
}


void L1Regularizer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.L1Regularizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weight_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* L1Regularizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float weight = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool L1Regularizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.L1Regularizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float weight = 1 [default = 1];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.L1Regularizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.L1Regularizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void L1Regularizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.L1Regularizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float weight = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.L1Regularizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* L1Regularizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.L1Regularizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float weight = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.L1Regularizer)
  return target;
}

size_t L1Regularizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.L1Regularizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float weight = 1 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void L1Regularizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.L1Regularizer)
  GOOGLE_DCHECK_NE(&from, this);
  const L1Regularizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<L1Regularizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.L1Regularizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.L1Regularizer)
    MergeFrom(*source);
  }
}

void L1Regularizer::MergeFrom(const L1Regularizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.L1Regularizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_weight()) {
    set_weight(from.weight());
  }
}

void L1Regularizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.L1Regularizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L1Regularizer::CopyFrom(const L1Regularizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.L1Regularizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L1Regularizer::IsInitialized() const {
  return true;
}

void L1Regularizer::InternalSwap(L1Regularizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(weight_, other->weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata L1Regularizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void L2Regularizer::InitAsDefaultInstance() {
}
class L2Regularizer::_Internal {
 public:
  using HasBits = decltype(std::declval<L2Regularizer>()._has_bits_);
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

L2Regularizer::L2Regularizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.L2Regularizer)
}
L2Regularizer::L2Regularizer(const L2Regularizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.L2Regularizer)
}

void L2Regularizer::SharedCtor() {
  weight_ = 1;
}

L2Regularizer::~L2Regularizer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.L2Regularizer)
  SharedDtor();
}

void L2Regularizer::SharedDtor() {
}

void L2Regularizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const L2Regularizer& L2Regularizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_L2Regularizer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base);
  return *internal_default_instance();
}


void L2Regularizer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.L2Regularizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weight_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* L2Regularizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float weight = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool L2Regularizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.L2Regularizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float weight = 1 [default = 1];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.L2Regularizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.L2Regularizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void L2Regularizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.L2Regularizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float weight = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.L2Regularizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* L2Regularizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.L2Regularizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float weight = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.L2Regularizer)
  return target;
}

size_t L2Regularizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.L2Regularizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float weight = 1 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void L2Regularizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.L2Regularizer)
  GOOGLE_DCHECK_NE(&from, this);
  const L2Regularizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<L2Regularizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.L2Regularizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.L2Regularizer)
    MergeFrom(*source);
  }
}

void L2Regularizer::MergeFrom(const L2Regularizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.L2Regularizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_weight()) {
    set_weight(from.weight());
  }
}

void L2Regularizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.L2Regularizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2Regularizer::CopyFrom(const L2Regularizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.L2Regularizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2Regularizer::IsInitialized() const {
  return true;
}

void L2Regularizer::InternalSwap(L2Regularizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(weight_, other->weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata L2Regularizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Initializer::InitAsDefaultInstance() {
  ::object_detection::protos::_Initializer_default_instance_.truncated_normal_initializer_ = const_cast< ::object_detection::protos::TruncatedNormalInitializer*>(
      ::object_detection::protos::TruncatedNormalInitializer::internal_default_instance());
  ::object_detection::protos::_Initializer_default_instance_.variance_scaling_initializer_ = const_cast< ::object_detection::protos::VarianceScalingInitializer*>(
      ::object_detection::protos::VarianceScalingInitializer::internal_default_instance());
  ::object_detection::protos::_Initializer_default_instance_.random_normal_initializer_ = const_cast< ::object_detection::protos::RandomNormalInitializer*>(
      ::object_detection::protos::RandomNormalInitializer::internal_default_instance());
}
class Initializer::_Internal {
 public:
  using HasBits = decltype(std::declval<Initializer>()._has_bits_);
  static const ::object_detection::protos::TruncatedNormalInitializer& truncated_normal_initializer(const Initializer* msg);
  static const ::object_detection::protos::VarianceScalingInitializer& variance_scaling_initializer(const Initializer* msg);
  static const ::object_detection::protos::RandomNormalInitializer& random_normal_initializer(const Initializer* msg);
};

const ::object_detection::protos::TruncatedNormalInitializer&
Initializer::_Internal::truncated_normal_initializer(const Initializer* msg) {
  return *msg->initializer_oneof_.truncated_normal_initializer_;
}
const ::object_detection::protos::VarianceScalingInitializer&
Initializer::_Internal::variance_scaling_initializer(const Initializer* msg) {
  return *msg->initializer_oneof_.variance_scaling_initializer_;
}
const ::object_detection::protos::RandomNormalInitializer&
Initializer::_Internal::random_normal_initializer(const Initializer* msg) {
  return *msg->initializer_oneof_.random_normal_initializer_;
}
void Initializer::set_allocated_truncated_normal_initializer(::object_detection::protos::TruncatedNormalInitializer* truncated_normal_initializer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_initializer_oneof();
  if (truncated_normal_initializer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      truncated_normal_initializer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, truncated_normal_initializer, submessage_arena);
    }
    set_has_truncated_normal_initializer();
    initializer_oneof_.truncated_normal_initializer_ = truncated_normal_initializer;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Initializer.truncated_normal_initializer)
}
void Initializer::set_allocated_variance_scaling_initializer(::object_detection::protos::VarianceScalingInitializer* variance_scaling_initializer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_initializer_oneof();
  if (variance_scaling_initializer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      variance_scaling_initializer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variance_scaling_initializer, submessage_arena);
    }
    set_has_variance_scaling_initializer();
    initializer_oneof_.variance_scaling_initializer_ = variance_scaling_initializer;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Initializer.variance_scaling_initializer)
}
void Initializer::set_allocated_random_normal_initializer(::object_detection::protos::RandomNormalInitializer* random_normal_initializer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_initializer_oneof();
  if (random_normal_initializer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_normal_initializer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_normal_initializer, submessage_arena);
    }
    set_has_random_normal_initializer();
    initializer_oneof_.random_normal_initializer_ = random_normal_initializer;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Initializer.random_normal_initializer)
}
Initializer::Initializer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.Initializer)
}
Initializer::Initializer(const Initializer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_initializer_oneof();
  switch (from.initializer_oneof_case()) {
    case kTruncatedNormalInitializer: {
      mutable_truncated_normal_initializer()->::object_detection::protos::TruncatedNormalInitializer::MergeFrom(from.truncated_normal_initializer());
      break;
    }
    case kVarianceScalingInitializer: {
      mutable_variance_scaling_initializer()->::object_detection::protos::VarianceScalingInitializer::MergeFrom(from.variance_scaling_initializer());
      break;
    }
    case kRandomNormalInitializer: {
      mutable_random_normal_initializer()->::object_detection::protos::RandomNormalInitializer::MergeFrom(from.random_normal_initializer());
      break;
    }
    case INITIALIZER_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.Initializer)
}

void Initializer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Initializer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base);
  clear_has_initializer_oneof();
}

Initializer::~Initializer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.Initializer)
  SharedDtor();
}

void Initializer::SharedDtor() {
  if (has_initializer_oneof()) {
    clear_initializer_oneof();
  }
}

void Initializer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Initializer& Initializer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Initializer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base);
  return *internal_default_instance();
}


void Initializer::clear_initializer_oneof() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.Initializer)
  switch (initializer_oneof_case()) {
    case kTruncatedNormalInitializer: {
      delete initializer_oneof_.truncated_normal_initializer_;
      break;
    }
    case kVarianceScalingInitializer: {
      delete initializer_oneof_.variance_scaling_initializer_;
      break;
    }
    case kRandomNormalInitializer: {
      delete initializer_oneof_.random_normal_initializer_;
      break;
    }
    case INITIALIZER_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INITIALIZER_ONEOF_NOT_SET;
}


void Initializer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.Initializer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_initializer_oneof();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Initializer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.TruncatedNormalInitializer truncated_normal_initializer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_truncated_normal_initializer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.VarianceScalingInitializer variance_scaling_initializer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_variance_scaling_initializer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomNormalInitializer random_normal_initializer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_random_normal_initializer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Initializer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.Initializer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.TruncatedNormalInitializer truncated_normal_initializer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_truncated_normal_initializer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.VarianceScalingInitializer variance_scaling_initializer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_variance_scaling_initializer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomNormalInitializer random_normal_initializer = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_random_normal_initializer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.Initializer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.Initializer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Initializer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.Initializer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (initializer_oneof_case()) {
    case kTruncatedNormalInitializer:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::truncated_normal_initializer(this), output);
      break;
    case kVarianceScalingInitializer:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::variance_scaling_initializer(this), output);
      break;
    case kRandomNormalInitializer:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, _Internal::random_normal_initializer(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.Initializer)
}

::PROTOBUF_NAMESPACE_ID::uint8* Initializer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.Initializer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (initializer_oneof_case()) {
    case kTruncatedNormalInitializer:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, _Internal::truncated_normal_initializer(this), target);
      break;
    case kVarianceScalingInitializer:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::variance_scaling_initializer(this), target);
      break;
    case kRandomNormalInitializer:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, _Internal::random_normal_initializer(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.Initializer)
  return target;
}

size_t Initializer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.Initializer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (initializer_oneof_case()) {
    // optional .object_detection.protos.TruncatedNormalInitializer truncated_normal_initializer = 1;
    case kTruncatedNormalInitializer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *initializer_oneof_.truncated_normal_initializer_);
      break;
    }
    // optional .object_detection.protos.VarianceScalingInitializer variance_scaling_initializer = 2;
    case kVarianceScalingInitializer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *initializer_oneof_.variance_scaling_initializer_);
      break;
    }
    // optional .object_detection.protos.RandomNormalInitializer random_normal_initializer = 3;
    case kRandomNormalInitializer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *initializer_oneof_.random_normal_initializer_);
      break;
    }
    case INITIALIZER_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Initializer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.Initializer)
  GOOGLE_DCHECK_NE(&from, this);
  const Initializer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Initializer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.Initializer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.Initializer)
    MergeFrom(*source);
  }
}

void Initializer::MergeFrom(const Initializer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.Initializer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.initializer_oneof_case()) {
    case kTruncatedNormalInitializer: {
      mutable_truncated_normal_initializer()->::object_detection::protos::TruncatedNormalInitializer::MergeFrom(from.truncated_normal_initializer());
      break;
    }
    case kVarianceScalingInitializer: {
      mutable_variance_scaling_initializer()->::object_detection::protos::VarianceScalingInitializer::MergeFrom(from.variance_scaling_initializer());
      break;
    }
    case kRandomNormalInitializer: {
      mutable_random_normal_initializer()->::object_detection::protos::RandomNormalInitializer::MergeFrom(from.random_normal_initializer());
      break;
    }
    case INITIALIZER_ONEOF_NOT_SET: {
      break;
    }
  }
}

void Initializer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.Initializer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Initializer::CopyFrom(const Initializer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.Initializer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Initializer::IsInitialized() const {
  return true;
}

void Initializer::InternalSwap(Initializer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(initializer_oneof_, other->initializer_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Initializer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TruncatedNormalInitializer::InitAsDefaultInstance() {
}
class TruncatedNormalInitializer::_Internal {
 public:
  using HasBits = decltype(std::declval<TruncatedNormalInitializer>()._has_bits_);
  static void set_has_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stddev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TruncatedNormalInitializer::TruncatedNormalInitializer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.TruncatedNormalInitializer)
}
TruncatedNormalInitializer::TruncatedNormalInitializer(const TruncatedNormalInitializer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mean_, &from.mean_,
    static_cast<size_t>(reinterpret_cast<char*>(&stddev_) -
    reinterpret_cast<char*>(&mean_)) + sizeof(stddev_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.TruncatedNormalInitializer)
}

void TruncatedNormalInitializer::SharedCtor() {
  mean_ = 0;
  stddev_ = 1;
}

TruncatedNormalInitializer::~TruncatedNormalInitializer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.TruncatedNormalInitializer)
  SharedDtor();
}

void TruncatedNormalInitializer::SharedDtor() {
}

void TruncatedNormalInitializer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TruncatedNormalInitializer& TruncatedNormalInitializer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TruncatedNormalInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base);
  return *internal_default_instance();
}


void TruncatedNormalInitializer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.TruncatedNormalInitializer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    mean_ = 0;
    stddev_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TruncatedNormalInitializer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float mean = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_mean(&has_bits);
          mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float stddev = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_stddev(&has_bits);
          stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TruncatedNormalInitializer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.TruncatedNormalInitializer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float mean = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_mean(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float stddev = 2 [default = 1];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_stddev(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.TruncatedNormalInitializer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.TruncatedNormalInitializer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TruncatedNormalInitializer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.TruncatedNormalInitializer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float mean = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->mean(), output);
  }

  // optional float stddev = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->stddev(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.TruncatedNormalInitializer)
}

::PROTOBUF_NAMESPACE_ID::uint8* TruncatedNormalInitializer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.TruncatedNormalInitializer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float mean = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->mean(), target);
  }

  // optional float stddev = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->stddev(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.TruncatedNormalInitializer)
  return target;
}

size_t TruncatedNormalInitializer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.TruncatedNormalInitializer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float mean = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float stddev = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TruncatedNormalInitializer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.TruncatedNormalInitializer)
  GOOGLE_DCHECK_NE(&from, this);
  const TruncatedNormalInitializer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TruncatedNormalInitializer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.TruncatedNormalInitializer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.TruncatedNormalInitializer)
    MergeFrom(*source);
  }
}

void TruncatedNormalInitializer::MergeFrom(const TruncatedNormalInitializer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.TruncatedNormalInitializer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mean_ = from.mean_;
    }
    if (cached_has_bits & 0x00000002u) {
      stddev_ = from.stddev_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TruncatedNormalInitializer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.TruncatedNormalInitializer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruncatedNormalInitializer::CopyFrom(const TruncatedNormalInitializer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.TruncatedNormalInitializer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncatedNormalInitializer::IsInitialized() const {
  return true;
}

void TruncatedNormalInitializer::InternalSwap(TruncatedNormalInitializer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mean_, other->mean_);
  swap(stddev_, other->stddev_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TruncatedNormalInitializer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VarianceScalingInitializer::InitAsDefaultInstance() {
}
class VarianceScalingInitializer::_Internal {
 public:
  using HasBits = decltype(std::declval<VarianceScalingInitializer>()._has_bits_);
  static void set_has_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uniform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VarianceScalingInitializer::VarianceScalingInitializer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.VarianceScalingInitializer)
}
VarianceScalingInitializer::VarianceScalingInitializer(const VarianceScalingInitializer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uniform_, &from.uniform_,
    static_cast<size_t>(reinterpret_cast<char*>(&factor_) -
    reinterpret_cast<char*>(&uniform_)) + sizeof(factor_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.VarianceScalingInitializer)
}

void VarianceScalingInitializer::SharedCtor() {
  ::memset(&uniform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&uniform_)) + sizeof(mode_));
  factor_ = 2;
}

VarianceScalingInitializer::~VarianceScalingInitializer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.VarianceScalingInitializer)
  SharedDtor();
}

void VarianceScalingInitializer::SharedDtor() {
}

void VarianceScalingInitializer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VarianceScalingInitializer& VarianceScalingInitializer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VarianceScalingInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base);
  return *internal_default_instance();
}


void VarianceScalingInitializer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.VarianceScalingInitializer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&uniform_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mode_) -
        reinterpret_cast<char*>(&uniform_)) + sizeof(mode_));
    factor_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VarianceScalingInitializer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float factor = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_factor(&has_bits);
          factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool uniform = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uniform(&has_bits);
          uniform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.VarianceScalingInitializer.Mode mode = 3 [default = FAN_IN];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::object_detection::protos::VarianceScalingInitializer_Mode_IsValid(val))) {
            set_mode(static_cast<::object_detection::protos::VarianceScalingInitializer_Mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VarianceScalingInitializer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.VarianceScalingInitializer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float factor = 1 [default = 2];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_factor(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool uniform = 2 [default = false];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_uniform(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uniform_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.VarianceScalingInitializer.Mode mode = 3 [default = FAN_IN];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::VarianceScalingInitializer_Mode_IsValid(value)) {
            set_mode(static_cast< ::object_detection::protos::VarianceScalingInitializer_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.VarianceScalingInitializer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.VarianceScalingInitializer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VarianceScalingInitializer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.VarianceScalingInitializer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float factor = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->factor(), output);
  }

  // optional bool uniform = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->uniform(), output);
  }

  // optional .object_detection.protos.VarianceScalingInitializer.Mode mode = 3 [default = FAN_IN];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.VarianceScalingInitializer)
}

::PROTOBUF_NAMESPACE_ID::uint8* VarianceScalingInitializer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.VarianceScalingInitializer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float factor = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->factor(), target);
  }

  // optional bool uniform = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->uniform(), target);
  }

  // optional .object_detection.protos.VarianceScalingInitializer.Mode mode = 3 [default = FAN_IN];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.VarianceScalingInitializer)
  return target;
}

size_t VarianceScalingInitializer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.VarianceScalingInitializer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool uniform = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .object_detection.protos.VarianceScalingInitializer.Mode mode = 3 [default = FAN_IN];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional float factor = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VarianceScalingInitializer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.VarianceScalingInitializer)
  GOOGLE_DCHECK_NE(&from, this);
  const VarianceScalingInitializer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VarianceScalingInitializer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.VarianceScalingInitializer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.VarianceScalingInitializer)
    MergeFrom(*source);
  }
}

void VarianceScalingInitializer::MergeFrom(const VarianceScalingInitializer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.VarianceScalingInitializer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      uniform_ = from.uniform_;
    }
    if (cached_has_bits & 0x00000002u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      factor_ = from.factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VarianceScalingInitializer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.VarianceScalingInitializer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarianceScalingInitializer::CopyFrom(const VarianceScalingInitializer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.VarianceScalingInitializer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarianceScalingInitializer::IsInitialized() const {
  return true;
}

void VarianceScalingInitializer::InternalSwap(VarianceScalingInitializer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(uniform_, other->uniform_);
  swap(mode_, other->mode_);
  swap(factor_, other->factor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VarianceScalingInitializer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomNormalInitializer::InitAsDefaultInstance() {
}
class RandomNormalInitializer::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomNormalInitializer>()._has_bits_);
  static void set_has_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stddev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RandomNormalInitializer::RandomNormalInitializer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomNormalInitializer)
}
RandomNormalInitializer::RandomNormalInitializer(const RandomNormalInitializer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mean_, &from.mean_,
    static_cast<size_t>(reinterpret_cast<char*>(&stddev_) -
    reinterpret_cast<char*>(&mean_)) + sizeof(stddev_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomNormalInitializer)
}

void RandomNormalInitializer::SharedCtor() {
  mean_ = 0;
  stddev_ = 1;
}

RandomNormalInitializer::~RandomNormalInitializer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomNormalInitializer)
  SharedDtor();
}

void RandomNormalInitializer::SharedDtor() {
}

void RandomNormalInitializer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomNormalInitializer& RandomNormalInitializer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomNormalInitializer_object_5fdetection_2fprotos_2fhyperparams_2eproto.base);
  return *internal_default_instance();
}


void RandomNormalInitializer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomNormalInitializer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    mean_ = 0;
    stddev_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RandomNormalInitializer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float mean = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_mean(&has_bits);
          mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float stddev = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_stddev(&has_bits);
          stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RandomNormalInitializer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomNormalInitializer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float mean = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_mean(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float stddev = 2 [default = 1];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_stddev(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomNormalInitializer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomNormalInitializer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RandomNormalInitializer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomNormalInitializer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float mean = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->mean(), output);
  }

  // optional float stddev = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->stddev(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomNormalInitializer)
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomNormalInitializer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomNormalInitializer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float mean = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->mean(), target);
  }

  // optional float stddev = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->stddev(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomNormalInitializer)
  return target;
}

size_t RandomNormalInitializer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomNormalInitializer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float mean = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float stddev = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomNormalInitializer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomNormalInitializer)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomNormalInitializer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomNormalInitializer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomNormalInitializer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomNormalInitializer)
    MergeFrom(*source);
  }
}

void RandomNormalInitializer::MergeFrom(const RandomNormalInitializer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomNormalInitializer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mean_ = from.mean_;
    }
    if (cached_has_bits & 0x00000002u) {
      stddev_ = from.stddev_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomNormalInitializer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomNormalInitializer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomNormalInitializer::CopyFrom(const RandomNormalInitializer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomNormalInitializer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomNormalInitializer::IsInitialized() const {
  return true;
}

void RandomNormalInitializer::InternalSwap(RandomNormalInitializer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mean_, other->mean_);
  swap(stddev_, other->stddev_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomNormalInitializer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchNorm::InitAsDefaultInstance() {
}
class BatchNorm::_Internal {
 public:
  using HasBits = decltype(std::declval<BatchNorm>()._has_bits_);
  static void set_has_decay(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_epsilon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_train(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

BatchNorm::BatchNorm()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.BatchNorm)
}
BatchNorm::BatchNorm(const BatchNorm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scale_, &from.scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&train_) -
    reinterpret_cast<char*>(&scale_)) + sizeof(train_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.BatchNorm)
}

void BatchNorm::SharedCtor() {
  scale_ = false;
  epsilon_ = 0.001f;
  decay_ = 0.999f;
  center_ = true;
  train_ = true;
}

BatchNorm::~BatchNorm() {
  // @@protoc_insertion_point(destructor:object_detection.protos.BatchNorm)
  SharedDtor();
}

void BatchNorm::SharedDtor() {
}

void BatchNorm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchNorm& BatchNorm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchNorm_object_5fdetection_2fprotos_2fhyperparams_2eproto.base);
  return *internal_default_instance();
}


void BatchNorm::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.BatchNorm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    scale_ = false;
    epsilon_ = 0.001f;
    decay_ = 0.999f;
    center_ = true;
    train_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatchNorm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float decay = 1 [default = 0.999];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_decay(&has_bits);
          decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool center = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_center(&has_bits);
          center_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool scale = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float epsilon = 4 [default = 0.001];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_epsilon(&has_bits);
          epsilon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool train = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_train(&has_bits);
          train_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatchNorm::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.BatchNorm)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float decay = 1 [default = 0.999];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_decay(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool center = 2 [default = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_center(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool scale = 3 [default = false];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_scale(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float epsilon = 4 [default = 0.001];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_epsilon(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &epsilon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool train = 5 [default = true];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_train(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &train_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.BatchNorm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.BatchNorm)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatchNorm::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.BatchNorm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float decay = 1 [default = 0.999];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->decay(), output);
  }

  // optional bool center = 2 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->center(), output);
  }

  // optional bool scale = 3 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->scale(), output);
  }

  // optional float epsilon = 4 [default = 0.001];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->epsilon(), output);
  }

  // optional bool train = 5 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->train(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.BatchNorm)
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchNorm::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.BatchNorm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float decay = 1 [default = 0.999];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->decay(), target);
  }

  // optional bool center = 2 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->center(), target);
  }

  // optional bool scale = 3 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->scale(), target);
  }

  // optional float epsilon = 4 [default = 0.001];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->epsilon(), target);
  }

  // optional bool train = 5 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->train(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.BatchNorm)
  return target;
}

size_t BatchNorm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.BatchNorm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool scale = 3 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float epsilon = 4 [default = 0.001];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float decay = 1 [default = 0.999];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional bool center = 2 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool train = 5 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchNorm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.BatchNorm)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchNorm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchNorm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.BatchNorm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.BatchNorm)
    MergeFrom(*source);
  }
}

void BatchNorm::MergeFrom(const BatchNorm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.BatchNorm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000002u) {
      epsilon_ = from.epsilon_;
    }
    if (cached_has_bits & 0x00000004u) {
      decay_ = from.decay_;
    }
    if (cached_has_bits & 0x00000008u) {
      center_ = from.center_;
    }
    if (cached_has_bits & 0x00000010u) {
      train_ = from.train_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchNorm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.BatchNorm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchNorm::CopyFrom(const BatchNorm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.BatchNorm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchNorm::IsInitialized() const {
  return true;
}

void BatchNorm::InternalSwap(BatchNorm* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(scale_, other->scale_);
  swap(epsilon_, other->epsilon_);
  swap(decay_, other->decay_);
  swap(center_, other->center_);
  swap(train_, other->train_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchNorm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupNorm::InitAsDefaultInstance() {
}
class GroupNorm::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupNorm>()._has_bits_);
};

GroupNorm::GroupNorm()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.GroupNorm)
}
GroupNorm::GroupNorm(const GroupNorm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.GroupNorm)
}

void GroupNorm::SharedCtor() {
}

GroupNorm::~GroupNorm() {
  // @@protoc_insertion_point(destructor:object_detection.protos.GroupNorm)
  SharedDtor();
}

void GroupNorm::SharedDtor() {
}

void GroupNorm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupNorm& GroupNorm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupNorm_object_5fdetection_2fprotos_2fhyperparams_2eproto.base);
  return *internal_default_instance();
}


void GroupNorm::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.GroupNorm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GroupNorm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GroupNorm::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.GroupNorm)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.GroupNorm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.GroupNorm)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GroupNorm::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.GroupNorm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.GroupNorm)
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupNorm::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.GroupNorm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.GroupNorm)
  return target;
}

size_t GroupNorm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.GroupNorm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupNorm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.GroupNorm)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupNorm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupNorm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.GroupNorm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.GroupNorm)
    MergeFrom(*source);
  }
}

void GroupNorm::MergeFrom(const GroupNorm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.GroupNorm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GroupNorm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.GroupNorm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupNorm::CopyFrom(const GroupNorm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.GroupNorm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupNorm::IsInitialized() const {
  return true;
}

void GroupNorm::InternalSwap(GroupNorm* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupNorm::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::object_detection::protos::Hyperparams* Arena::CreateMaybeMessage< ::object_detection::protos::Hyperparams >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::Hyperparams >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::Regularizer* Arena::CreateMaybeMessage< ::object_detection::protos::Regularizer >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::Regularizer >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::L1Regularizer* Arena::CreateMaybeMessage< ::object_detection::protos::L1Regularizer >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::L1Regularizer >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::L2Regularizer* Arena::CreateMaybeMessage< ::object_detection::protos::L2Regularizer >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::L2Regularizer >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::Initializer* Arena::CreateMaybeMessage< ::object_detection::protos::Initializer >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::Initializer >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::TruncatedNormalInitializer* Arena::CreateMaybeMessage< ::object_detection::protos::TruncatedNormalInitializer >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::TruncatedNormalInitializer >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::VarianceScalingInitializer* Arena::CreateMaybeMessage< ::object_detection::protos::VarianceScalingInitializer >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::VarianceScalingInitializer >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomNormalInitializer* Arena::CreateMaybeMessage< ::object_detection::protos::RandomNormalInitializer >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomNormalInitializer >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::BatchNorm* Arena::CreateMaybeMessage< ::object_detection::protos::BatchNorm >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::BatchNorm >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::GroupNorm* Arena::CreateMaybeMessage< ::object_detection::protos::GroupNorm >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::GroupNorm >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
