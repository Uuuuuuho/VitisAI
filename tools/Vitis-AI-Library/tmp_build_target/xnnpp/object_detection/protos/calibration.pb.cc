// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/calibration.proto

#include "object_detection/protos/calibration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fcalibration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassIdFunctionApproximations_object_5fdetection_2fprotos_2fcalibration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fcalibration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse_object_5fdetection_2fprotos_2fcalibration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fcalibration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassIdSigmoidCalibrations_object_5fdetection_2fprotos_2fcalibration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fcalibration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse_object_5fdetection_2fprotos_2fcalibration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fcalibration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FunctionApproximation_object_5fdetection_2fprotos_2fcalibration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fcalibration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SigmoidCalibration_object_5fdetection_2fprotos_2fcalibration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fcalibration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigmoidParameters_object_5fdetection_2fprotos_2fcalibration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fcalibration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_XYPairs_object_5fdetection_2fprotos_2fcalibration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fcalibration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_XYPairs_XYPair_object_5fdetection_2fprotos_2fcalibration_2eproto;
namespace object_detection {
namespace protos {
class CalibrationConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalibrationConfig> _instance;
  const ::object_detection::protos::FunctionApproximation* function_approximation_;
  const ::object_detection::protos::ClassIdFunctionApproximations* class_id_function_approximations_;
  const ::object_detection::protos::SigmoidCalibration* sigmoid_calibration_;
  const ::object_detection::protos::ClassIdSigmoidCalibrations* class_id_sigmoid_calibrations_;
} _CalibrationConfig_default_instance_;
class FunctionApproximationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FunctionApproximation> _instance;
} _FunctionApproximation_default_instance_;
class ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse> _instance;
} _ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse_default_instance_;
class ClassIdFunctionApproximationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassIdFunctionApproximations> _instance;
} _ClassIdFunctionApproximations_default_instance_;
class SigmoidCalibrationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigmoidCalibration> _instance;
} _SigmoidCalibration_default_instance_;
class ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse> _instance;
} _ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse_default_instance_;
class ClassIdSigmoidCalibrationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassIdSigmoidCalibrations> _instance;
} _ClassIdSigmoidCalibrations_default_instance_;
class XYPairs_XYPairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<XYPairs_XYPair> _instance;
} _XYPairs_XYPair_default_instance_;
class XYPairsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<XYPairs> _instance;
} _XYPairs_default_instance_;
class SigmoidParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigmoidParameters> _instance;
} _SigmoidParameters_default_instance_;
}  // namespace protos
}  // namespace object_detection
static void InitDefaultsscc_info_CalibrationConfig_object_5fdetection_2fprotos_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_CalibrationConfig_default_instance_;
    new (ptr) ::object_detection::protos::CalibrationConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::CalibrationConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CalibrationConfig_object_5fdetection_2fprotos_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_CalibrationConfig_object_5fdetection_2fprotos_2fcalibration_2eproto}, {
      &scc_info_FunctionApproximation_object_5fdetection_2fprotos_2fcalibration_2eproto.base,
      &scc_info_ClassIdFunctionApproximations_object_5fdetection_2fprotos_2fcalibration_2eproto.base,
      &scc_info_SigmoidCalibration_object_5fdetection_2fprotos_2fcalibration_2eproto.base,
      &scc_info_ClassIdSigmoidCalibrations_object_5fdetection_2fprotos_2fcalibration_2eproto.base,}};

static void InitDefaultsscc_info_ClassIdFunctionApproximations_object_5fdetection_2fprotos_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_ClassIdFunctionApproximations_default_instance_;
    new (ptr) ::object_detection::protos::ClassIdFunctionApproximations();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::ClassIdFunctionApproximations::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassIdFunctionApproximations_object_5fdetection_2fprotos_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClassIdFunctionApproximations_object_5fdetection_2fprotos_2fcalibration_2eproto}, {
      &scc_info_ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse_object_5fdetection_2fprotos_2fcalibration_2eproto.base,}};

static void InitDefaultsscc_info_ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse_object_5fdetection_2fprotos_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse_default_instance_;
    new (ptr) ::object_detection::protos::ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse();
  }
  ::object_detection::protos::ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse_object_5fdetection_2fprotos_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse_object_5fdetection_2fprotos_2fcalibration_2eproto}, {
      &scc_info_XYPairs_object_5fdetection_2fprotos_2fcalibration_2eproto.base,}};

static void InitDefaultsscc_info_ClassIdSigmoidCalibrations_object_5fdetection_2fprotos_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_ClassIdSigmoidCalibrations_default_instance_;
    new (ptr) ::object_detection::protos::ClassIdSigmoidCalibrations();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::ClassIdSigmoidCalibrations::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassIdSigmoidCalibrations_object_5fdetection_2fprotos_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClassIdSigmoidCalibrations_object_5fdetection_2fprotos_2fcalibration_2eproto}, {
      &scc_info_ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse_object_5fdetection_2fprotos_2fcalibration_2eproto.base,}};

static void InitDefaultsscc_info_ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse_object_5fdetection_2fprotos_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse_default_instance_;
    new (ptr) ::object_detection::protos::ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse();
  }
  ::object_detection::protos::ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse_object_5fdetection_2fprotos_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse_object_5fdetection_2fprotos_2fcalibration_2eproto}, {
      &scc_info_SigmoidParameters_object_5fdetection_2fprotos_2fcalibration_2eproto.base,}};

static void InitDefaultsscc_info_FunctionApproximation_object_5fdetection_2fprotos_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_FunctionApproximation_default_instance_;
    new (ptr) ::object_detection::protos::FunctionApproximation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::FunctionApproximation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FunctionApproximation_object_5fdetection_2fprotos_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FunctionApproximation_object_5fdetection_2fprotos_2fcalibration_2eproto}, {
      &scc_info_XYPairs_object_5fdetection_2fprotos_2fcalibration_2eproto.base,}};

static void InitDefaultsscc_info_SigmoidCalibration_object_5fdetection_2fprotos_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_SigmoidCalibration_default_instance_;
    new (ptr) ::object_detection::protos::SigmoidCalibration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::SigmoidCalibration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SigmoidCalibration_object_5fdetection_2fprotos_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SigmoidCalibration_object_5fdetection_2fprotos_2fcalibration_2eproto}, {
      &scc_info_SigmoidParameters_object_5fdetection_2fprotos_2fcalibration_2eproto.base,}};

static void InitDefaultsscc_info_SigmoidParameters_object_5fdetection_2fprotos_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_SigmoidParameters_default_instance_;
    new (ptr) ::object_detection::protos::SigmoidParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::SigmoidParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigmoidParameters_object_5fdetection_2fprotos_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SigmoidParameters_object_5fdetection_2fprotos_2fcalibration_2eproto}, {}};

static void InitDefaultsscc_info_XYPairs_object_5fdetection_2fprotos_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_XYPairs_default_instance_;
    new (ptr) ::object_detection::protos::XYPairs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::XYPairs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_XYPairs_object_5fdetection_2fprotos_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_XYPairs_object_5fdetection_2fprotos_2fcalibration_2eproto}, {
      &scc_info_XYPairs_XYPair_object_5fdetection_2fprotos_2fcalibration_2eproto.base,}};

static void InitDefaultsscc_info_XYPairs_XYPair_object_5fdetection_2fprotos_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_XYPairs_XYPair_default_instance_;
    new (ptr) ::object_detection::protos::XYPairs_XYPair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::XYPairs_XYPair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_XYPairs_XYPair_object_5fdetection_2fprotos_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_XYPairs_XYPair_object_5fdetection_2fprotos_2fcalibration_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_object_5fdetection_2fprotos_2fcalibration_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_object_5fdetection_2fprotos_2fcalibration_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_object_5fdetection_2fprotos_2fcalibration_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_object_5fdetection_2fprotos_2fcalibration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::CalibrationConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::CalibrationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::CalibrationConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::object_detection::protos::CalibrationConfigDefaultTypeInternal, function_approximation_),
  offsetof(::object_detection::protos::CalibrationConfigDefaultTypeInternal, class_id_function_approximations_),
  offsetof(::object_detection::protos::CalibrationConfigDefaultTypeInternal, sigmoid_calibration_),
  offsetof(::object_detection::protos::CalibrationConfigDefaultTypeInternal, class_id_sigmoid_calibrations_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::CalibrationConfig, calibrator_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FunctionApproximation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FunctionApproximation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FunctionApproximation, x_y_pairs_),
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ClassIdFunctionApproximations, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ClassIdFunctionApproximations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ClassIdFunctionApproximations, class_id_xy_pairs_map_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SigmoidCalibration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SigmoidCalibration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SigmoidCalibration, sigmoid_parameters_),
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ClassIdSigmoidCalibrations, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ClassIdSigmoidCalibrations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ClassIdSigmoidCalibrations, class_id_sigmoid_parameters_map_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::XYPairs_XYPair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::XYPairs_XYPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::XYPairs_XYPair, x_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::XYPairs_XYPair, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::XYPairs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::XYPairs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::XYPairs, x_y_pair_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::XYPairs, training_data_type_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SigmoidParameters, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SigmoidParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SigmoidParameters, a_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SigmoidParameters, b_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::object_detection::protos::CalibrationConfig)},
  { 14, 20, sizeof(::object_detection::protos::FunctionApproximation)},
  { 21, 28, sizeof(::object_detection::protos::ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse)},
  { 30, 36, sizeof(::object_detection::protos::ClassIdFunctionApproximations)},
  { 37, 43, sizeof(::object_detection::protos::SigmoidCalibration)},
  { 44, 51, sizeof(::object_detection::protos::ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse)},
  { 53, 59, sizeof(::object_detection::protos::ClassIdSigmoidCalibrations)},
  { 60, 67, sizeof(::object_detection::protos::XYPairs_XYPair)},
  { 69, 76, sizeof(::object_detection::protos::XYPairs)},
  { 78, 85, sizeof(::object_detection::protos::SigmoidParameters)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_CalibrationConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_FunctionApproximation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_ClassIdFunctionApproximations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_SigmoidCalibration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_ClassIdSigmoidCalibrations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_XYPairs_XYPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_XYPairs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_SigmoidParameters_default_instance_),
};

const char descriptor_table_protodef_object_5fdetection_2fprotos_2fcalibration_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)object_detection/protos/calibration.pr"
  "oto\022\027object_detection.protos\"\201\003\n\021Calibra"
  "tionConfig\022P\n\026function_approximation\030\001 \001"
  "(\0132..object_detection.protos.FunctionApp"
  "roximationH\000\022b\n class_id_function_approx"
  "imations\030\002 \001(\01326.object_detection.protos"
  ".ClassIdFunctionApproximationsH\000\022J\n\023sigm"
  "oid_calibration\030\003 \001(\0132+.object_detection"
  ".protos.SigmoidCalibrationH\000\022\\\n\035class_id"
  "_sigmoid_calibrations\030\004 \001(\01323.object_det"
  "ection.protos.ClassIdSigmoidCalibrations"
  "H\000B\014\n\ncalibrator\"L\n\025FunctionApproximatio"
  "n\0223\n\tx_y_pairs\030\001 \001(\0132 .object_detection."
  "protos.XYPairs\"\351\001\n\035ClassIdFunctionApprox"
  "imations\022l\n\025class_id_xy_pairs_map\030\001 \003(\0132"
  "M.object_detection.protos.ClassIdFunctio"
  "nApproximations.ClassIdXyPairsMapEntry\032Z"
  "\n\026ClassIdXyPairsMapEntry\022\013\n\003key\030\001 \001(\005\022/\n"
  "\005value\030\002 \001(\0132 .object_detection.protos.X"
  "YPairs:\0028\001\"\\\n\022SigmoidCalibration\022F\n\022sigm"
  "oid_parameters\030\001 \001(\0132*.object_detection."
  "protos.SigmoidParameters\"\213\002\n\032ClassIdSigm"
  "oidCalibrations\022}\n\037class_id_sigmoid_para"
  "meters_map\030\001 \003(\0132T.object_detection.prot"
  "os.ClassIdSigmoidCalibrations.ClassIdSig"
  "moidParametersMapEntry\032n\n ClassIdSigmoid"
  "ParametersMapEntry\022\013\n\003key\030\001 \001(\005\0229\n\005value"
  "\030\002 \001(\0132*.object_detection.protos.Sigmoid"
  "Parameters:\0028\001\"\253\001\n\007XYPairs\0229\n\010x_y_pair\030\001"
  " \003(\0132\'.object_detection.protos.XYPairs.X"
  "YPair\022E\n\022training_data_type\030\002 \001(\0162).obje"
  "ct_detection.protos.TrainingDataType\032\036\n\006"
  "XYPair\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"0\n\021SigmoidP"
  "arameters\022\r\n\001a\030\001 \001(\002:\002-1\022\014\n\001b\030\002 \001(\002:\0010*N"
  "\n\020TrainingDataType\022\025\n\021DATA_TYPE_UNKNOWN\020"
  "\000\022\017\n\013ALL_CLASSES\020\001\022\022\n\016CLASS_SPECIFIC\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto_sccs[10] = {
  &scc_info_CalibrationConfig_object_5fdetection_2fprotos_2fcalibration_2eproto.base,
  &scc_info_ClassIdFunctionApproximations_object_5fdetection_2fprotos_2fcalibration_2eproto.base,
  &scc_info_ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse_object_5fdetection_2fprotos_2fcalibration_2eproto.base,
  &scc_info_ClassIdSigmoidCalibrations_object_5fdetection_2fprotos_2fcalibration_2eproto.base,
  &scc_info_ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse_object_5fdetection_2fprotos_2fcalibration_2eproto.base,
  &scc_info_FunctionApproximation_object_5fdetection_2fprotos_2fcalibration_2eproto.base,
  &scc_info_SigmoidCalibration_object_5fdetection_2fprotos_2fcalibration_2eproto.base,
  &scc_info_SigmoidParameters_object_5fdetection_2fprotos_2fcalibration_2eproto.base,
  &scc_info_XYPairs_object_5fdetection_2fprotos_2fcalibration_2eproto.base,
  &scc_info_XYPairs_XYPair_object_5fdetection_2fprotos_2fcalibration_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto_once;
static bool descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto = {
  &descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto_initialized, descriptor_table_protodef_object_5fdetection_2fprotos_2fcalibration_2eproto, "object_detection/protos/calibration.proto", 1438,
  &descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto_once, descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto_sccs, descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_object_5fdetection_2fprotos_2fcalibration_2eproto::offsets,
  file_level_metadata_object_5fdetection_2fprotos_2fcalibration_2eproto, 10, file_level_enum_descriptors_object_5fdetection_2fprotos_2fcalibration_2eproto, file_level_service_descriptors_object_5fdetection_2fprotos_2fcalibration_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_object_5fdetection_2fprotos_2fcalibration_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto), true);
namespace object_detection {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrainingDataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_5fdetection_2fprotos_2fcalibration_2eproto);
  return file_level_enum_descriptors_object_5fdetection_2fprotos_2fcalibration_2eproto[0];
}
bool TrainingDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CalibrationConfig::InitAsDefaultInstance() {
  ::object_detection::protos::_CalibrationConfig_default_instance_.function_approximation_ = const_cast< ::object_detection::protos::FunctionApproximation*>(
      ::object_detection::protos::FunctionApproximation::internal_default_instance());
  ::object_detection::protos::_CalibrationConfig_default_instance_.class_id_function_approximations_ = const_cast< ::object_detection::protos::ClassIdFunctionApproximations*>(
      ::object_detection::protos::ClassIdFunctionApproximations::internal_default_instance());
  ::object_detection::protos::_CalibrationConfig_default_instance_.sigmoid_calibration_ = const_cast< ::object_detection::protos::SigmoidCalibration*>(
      ::object_detection::protos::SigmoidCalibration::internal_default_instance());
  ::object_detection::protos::_CalibrationConfig_default_instance_.class_id_sigmoid_calibrations_ = const_cast< ::object_detection::protos::ClassIdSigmoidCalibrations*>(
      ::object_detection::protos::ClassIdSigmoidCalibrations::internal_default_instance());
}
class CalibrationConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CalibrationConfig>()._has_bits_);
  static const ::object_detection::protos::FunctionApproximation& function_approximation(const CalibrationConfig* msg);
  static const ::object_detection::protos::ClassIdFunctionApproximations& class_id_function_approximations(const CalibrationConfig* msg);
  static const ::object_detection::protos::SigmoidCalibration& sigmoid_calibration(const CalibrationConfig* msg);
  static const ::object_detection::protos::ClassIdSigmoidCalibrations& class_id_sigmoid_calibrations(const CalibrationConfig* msg);
};

const ::object_detection::protos::FunctionApproximation&
CalibrationConfig::_Internal::function_approximation(const CalibrationConfig* msg) {
  return *msg->calibrator_.function_approximation_;
}
const ::object_detection::protos::ClassIdFunctionApproximations&
CalibrationConfig::_Internal::class_id_function_approximations(const CalibrationConfig* msg) {
  return *msg->calibrator_.class_id_function_approximations_;
}
const ::object_detection::protos::SigmoidCalibration&
CalibrationConfig::_Internal::sigmoid_calibration(const CalibrationConfig* msg) {
  return *msg->calibrator_.sigmoid_calibration_;
}
const ::object_detection::protos::ClassIdSigmoidCalibrations&
CalibrationConfig::_Internal::class_id_sigmoid_calibrations(const CalibrationConfig* msg) {
  return *msg->calibrator_.class_id_sigmoid_calibrations_;
}
void CalibrationConfig::set_allocated_function_approximation(::object_detection::protos::FunctionApproximation* function_approximation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_calibrator();
  if (function_approximation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      function_approximation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function_approximation, submessage_arena);
    }
    set_has_function_approximation();
    calibrator_.function_approximation_ = function_approximation;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.CalibrationConfig.function_approximation)
}
void CalibrationConfig::set_allocated_class_id_function_approximations(::object_detection::protos::ClassIdFunctionApproximations* class_id_function_approximations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_calibrator();
  if (class_id_function_approximations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      class_id_function_approximations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, class_id_function_approximations, submessage_arena);
    }
    set_has_class_id_function_approximations();
    calibrator_.class_id_function_approximations_ = class_id_function_approximations;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.CalibrationConfig.class_id_function_approximations)
}
void CalibrationConfig::set_allocated_sigmoid_calibration(::object_detection::protos::SigmoidCalibration* sigmoid_calibration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_calibrator();
  if (sigmoid_calibration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sigmoid_calibration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sigmoid_calibration, submessage_arena);
    }
    set_has_sigmoid_calibration();
    calibrator_.sigmoid_calibration_ = sigmoid_calibration;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.CalibrationConfig.sigmoid_calibration)
}
void CalibrationConfig::set_allocated_class_id_sigmoid_calibrations(::object_detection::protos::ClassIdSigmoidCalibrations* class_id_sigmoid_calibrations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_calibrator();
  if (class_id_sigmoid_calibrations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      class_id_sigmoid_calibrations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, class_id_sigmoid_calibrations, submessage_arena);
    }
    set_has_class_id_sigmoid_calibrations();
    calibrator_.class_id_sigmoid_calibrations_ = class_id_sigmoid_calibrations;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.CalibrationConfig.class_id_sigmoid_calibrations)
}
CalibrationConfig::CalibrationConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.CalibrationConfig)
}
CalibrationConfig::CalibrationConfig(const CalibrationConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_calibrator();
  switch (from.calibrator_case()) {
    case kFunctionApproximation: {
      mutable_function_approximation()->::object_detection::protos::FunctionApproximation::MergeFrom(from.function_approximation());
      break;
    }
    case kClassIdFunctionApproximations: {
      mutable_class_id_function_approximations()->::object_detection::protos::ClassIdFunctionApproximations::MergeFrom(from.class_id_function_approximations());
      break;
    }
    case kSigmoidCalibration: {
      mutable_sigmoid_calibration()->::object_detection::protos::SigmoidCalibration::MergeFrom(from.sigmoid_calibration());
      break;
    }
    case kClassIdSigmoidCalibrations: {
      mutable_class_id_sigmoid_calibrations()->::object_detection::protos::ClassIdSigmoidCalibrations::MergeFrom(from.class_id_sigmoid_calibrations());
      break;
    }
    case CALIBRATOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.CalibrationConfig)
}

void CalibrationConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalibrationConfig_object_5fdetection_2fprotos_2fcalibration_2eproto.base);
  clear_has_calibrator();
}

CalibrationConfig::~CalibrationConfig() {
  // @@protoc_insertion_point(destructor:object_detection.protos.CalibrationConfig)
  SharedDtor();
}

void CalibrationConfig::SharedDtor() {
  if (has_calibrator()) {
    clear_calibrator();
  }
}

void CalibrationConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalibrationConfig& CalibrationConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalibrationConfig_object_5fdetection_2fprotos_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void CalibrationConfig::clear_calibrator() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.CalibrationConfig)
  switch (calibrator_case()) {
    case kFunctionApproximation: {
      delete calibrator_.function_approximation_;
      break;
    }
    case kClassIdFunctionApproximations: {
      delete calibrator_.class_id_function_approximations_;
      break;
    }
    case kSigmoidCalibration: {
      delete calibrator_.sigmoid_calibration_;
      break;
    }
    case kClassIdSigmoidCalibrations: {
      delete calibrator_.class_id_sigmoid_calibrations_;
      break;
    }
    case CALIBRATOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CALIBRATOR_NOT_SET;
}


void CalibrationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.CalibrationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_calibrator();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalibrationConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.FunctionApproximation function_approximation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_function_approximation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.ClassIdFunctionApproximations class_id_function_approximations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_class_id_function_approximations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.SigmoidCalibration sigmoid_calibration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_sigmoid_calibration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.ClassIdSigmoidCalibrations class_id_sigmoid_calibrations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_class_id_sigmoid_calibrations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalibrationConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.CalibrationConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.FunctionApproximation function_approximation = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_function_approximation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ClassIdFunctionApproximations class_id_function_approximations = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_class_id_function_approximations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.SigmoidCalibration sigmoid_calibration = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sigmoid_calibration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ClassIdSigmoidCalibrations class_id_sigmoid_calibrations = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_class_id_sigmoid_calibrations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.CalibrationConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.CalibrationConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalibrationConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.CalibrationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (calibrator_case()) {
    case kFunctionApproximation:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::function_approximation(this), output);
      break;
    case kClassIdFunctionApproximations:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::class_id_function_approximations(this), output);
      break;
    case kSigmoidCalibration:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, _Internal::sigmoid_calibration(this), output);
      break;
    case kClassIdSigmoidCalibrations:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, _Internal::class_id_sigmoid_calibrations(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.CalibrationConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* CalibrationConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.CalibrationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (calibrator_case()) {
    case kFunctionApproximation:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, _Internal::function_approximation(this), target);
      break;
    case kClassIdFunctionApproximations:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::class_id_function_approximations(this), target);
      break;
    case kSigmoidCalibration:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, _Internal::sigmoid_calibration(this), target);
      break;
    case kClassIdSigmoidCalibrations:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, _Internal::class_id_sigmoid_calibrations(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.CalibrationConfig)
  return target;
}

size_t CalibrationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.CalibrationConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (calibrator_case()) {
    // optional .object_detection.protos.FunctionApproximation function_approximation = 1;
    case kFunctionApproximation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *calibrator_.function_approximation_);
      break;
    }
    // optional .object_detection.protos.ClassIdFunctionApproximations class_id_function_approximations = 2;
    case kClassIdFunctionApproximations: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *calibrator_.class_id_function_approximations_);
      break;
    }
    // optional .object_detection.protos.SigmoidCalibration sigmoid_calibration = 3;
    case kSigmoidCalibration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *calibrator_.sigmoid_calibration_);
      break;
    }
    // optional .object_detection.protos.ClassIdSigmoidCalibrations class_id_sigmoid_calibrations = 4;
    case kClassIdSigmoidCalibrations: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *calibrator_.class_id_sigmoid_calibrations_);
      break;
    }
    case CALIBRATOR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibrationConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.CalibrationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibrationConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalibrationConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.CalibrationConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.CalibrationConfig)
    MergeFrom(*source);
  }
}

void CalibrationConfig::MergeFrom(const CalibrationConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.CalibrationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.calibrator_case()) {
    case kFunctionApproximation: {
      mutable_function_approximation()->::object_detection::protos::FunctionApproximation::MergeFrom(from.function_approximation());
      break;
    }
    case kClassIdFunctionApproximations: {
      mutable_class_id_function_approximations()->::object_detection::protos::ClassIdFunctionApproximations::MergeFrom(from.class_id_function_approximations());
      break;
    }
    case kSigmoidCalibration: {
      mutable_sigmoid_calibration()->::object_detection::protos::SigmoidCalibration::MergeFrom(from.sigmoid_calibration());
      break;
    }
    case kClassIdSigmoidCalibrations: {
      mutable_class_id_sigmoid_calibrations()->::object_detection::protos::ClassIdSigmoidCalibrations::MergeFrom(from.class_id_sigmoid_calibrations());
      break;
    }
    case CALIBRATOR_NOT_SET: {
      break;
    }
  }
}

void CalibrationConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.CalibrationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationConfig::CopyFrom(const CalibrationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.CalibrationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationConfig::IsInitialized() const {
  return true;
}

void CalibrationConfig::InternalSwap(CalibrationConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(calibrator_, other->calibrator_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalibrationConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FunctionApproximation::InitAsDefaultInstance() {
  ::object_detection::protos::_FunctionApproximation_default_instance_._instance.get_mutable()->x_y_pairs_ = const_cast< ::object_detection::protos::XYPairs*>(
      ::object_detection::protos::XYPairs::internal_default_instance());
}
class FunctionApproximation::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionApproximation>()._has_bits_);
  static const ::object_detection::protos::XYPairs& x_y_pairs(const FunctionApproximation* msg);
  static void set_has_x_y_pairs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::object_detection::protos::XYPairs&
FunctionApproximation::_Internal::x_y_pairs(const FunctionApproximation* msg) {
  return *msg->x_y_pairs_;
}
FunctionApproximation::FunctionApproximation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.FunctionApproximation)
}
FunctionApproximation::FunctionApproximation(const FunctionApproximation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_x_y_pairs()) {
    x_y_pairs_ = new ::object_detection::protos::XYPairs(*from.x_y_pairs_);
  } else {
    x_y_pairs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.FunctionApproximation)
}

void FunctionApproximation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FunctionApproximation_object_5fdetection_2fprotos_2fcalibration_2eproto.base);
  x_y_pairs_ = nullptr;
}

FunctionApproximation::~FunctionApproximation() {
  // @@protoc_insertion_point(destructor:object_detection.protos.FunctionApproximation)
  SharedDtor();
}

void FunctionApproximation::SharedDtor() {
  if (this != internal_default_instance()) delete x_y_pairs_;
}

void FunctionApproximation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FunctionApproximation& FunctionApproximation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FunctionApproximation_object_5fdetection_2fprotos_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void FunctionApproximation::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.FunctionApproximation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(x_y_pairs_ != nullptr);
    x_y_pairs_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FunctionApproximation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.XYPairs x_y_pairs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_x_y_pairs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FunctionApproximation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.FunctionApproximation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.XYPairs x_y_pairs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_x_y_pairs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.FunctionApproximation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.FunctionApproximation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FunctionApproximation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.FunctionApproximation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.XYPairs x_y_pairs = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::x_y_pairs(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.FunctionApproximation)
}

::PROTOBUF_NAMESPACE_ID::uint8* FunctionApproximation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.FunctionApproximation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.XYPairs x_y_pairs = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::x_y_pairs(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.FunctionApproximation)
  return target;
}

size_t FunctionApproximation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.FunctionApproximation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .object_detection.protos.XYPairs x_y_pairs = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *x_y_pairs_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FunctionApproximation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.FunctionApproximation)
  GOOGLE_DCHECK_NE(&from, this);
  const FunctionApproximation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FunctionApproximation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.FunctionApproximation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.FunctionApproximation)
    MergeFrom(*source);
  }
}

void FunctionApproximation::MergeFrom(const FunctionApproximation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.FunctionApproximation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_x_y_pairs()) {
    mutable_x_y_pairs()->::object_detection::protos::XYPairs::MergeFrom(from.x_y_pairs());
  }
}

void FunctionApproximation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.FunctionApproximation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionApproximation::CopyFrom(const FunctionApproximation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.FunctionApproximation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionApproximation::IsInitialized() const {
  return true;
}

void FunctionApproximation::InternalSwap(FunctionApproximation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_y_pairs_, other->x_y_pairs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionApproximation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse::ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse() {}
ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse::ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse::MergeFrom(const ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ClassIdFunctionApproximations::InitAsDefaultInstance() {
}
class ClassIdFunctionApproximations::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassIdFunctionApproximations>()._has_bits_);
};

ClassIdFunctionApproximations::ClassIdFunctionApproximations()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ClassIdFunctionApproximations)
}
ClassIdFunctionApproximations::ClassIdFunctionApproximations(const ClassIdFunctionApproximations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_id_xy_pairs_map_.MergeFrom(from.class_id_xy_pairs_map_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ClassIdFunctionApproximations)
}

void ClassIdFunctionApproximations::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClassIdFunctionApproximations_object_5fdetection_2fprotos_2fcalibration_2eproto.base);
}

ClassIdFunctionApproximations::~ClassIdFunctionApproximations() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ClassIdFunctionApproximations)
  SharedDtor();
}

void ClassIdFunctionApproximations::SharedDtor() {
}

void ClassIdFunctionApproximations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassIdFunctionApproximations& ClassIdFunctionApproximations::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassIdFunctionApproximations_object_5fdetection_2fprotos_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void ClassIdFunctionApproximations::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ClassIdFunctionApproximations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_id_xy_pairs_map_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClassIdFunctionApproximations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .object_detection.protos.XYPairs> class_id_xy_pairs_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&class_id_xy_pairs_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClassIdFunctionApproximations::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ClassIdFunctionApproximations)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .object_detection.protos.XYPairs> class_id_xy_pairs_map = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::XYPairs,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::XYPairs > > parser(&class_id_xy_pairs_map_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ClassIdFunctionApproximations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ClassIdFunctionApproximations)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClassIdFunctionApproximations::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ClassIdFunctionApproximations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .object_detection.protos.XYPairs> class_id_xy_pairs_map = 1;
  if (!this->class_id_xy_pairs_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::XYPairs >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->class_id_xy_pairs_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->class_id_xy_pairs_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::XYPairs >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::XYPairs >::const_iterator
          it = this->class_id_xy_pairs_map().begin();
          it != this->class_id_xy_pairs_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::XYPairs >::const_iterator
          it = this->class_id_xy_pairs_map().begin();
          it != this->class_id_xy_pairs_map().end(); ++it) {
        ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ClassIdFunctionApproximations)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassIdFunctionApproximations::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ClassIdFunctionApproximations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .object_detection.protos.XYPairs> class_id_xy_pairs_map = 1;
  if (!this->class_id_xy_pairs_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::XYPairs >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->class_id_xy_pairs_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->class_id_xy_pairs_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::XYPairs >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::XYPairs >::const_iterator
          it = this->class_id_xy_pairs_map().begin();
          it != this->class_id_xy_pairs_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::XYPairs >::const_iterator
          it = this->class_id_xy_pairs_map().begin();
          it != this->class_id_xy_pairs_map().end(); ++it) {
        target = ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ClassIdFunctionApproximations)
  return target;
}

size_t ClassIdFunctionApproximations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ClassIdFunctionApproximations)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .object_detection.protos.XYPairs> class_id_xy_pairs_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->class_id_xy_pairs_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::XYPairs >::const_iterator
      it = this->class_id_xy_pairs_map().begin();
      it != this->class_id_xy_pairs_map().end(); ++it) {
    total_size += ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassIdFunctionApproximations::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ClassIdFunctionApproximations)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassIdFunctionApproximations* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassIdFunctionApproximations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ClassIdFunctionApproximations)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ClassIdFunctionApproximations)
    MergeFrom(*source);
  }
}

void ClassIdFunctionApproximations::MergeFrom(const ClassIdFunctionApproximations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ClassIdFunctionApproximations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  class_id_xy_pairs_map_.MergeFrom(from.class_id_xy_pairs_map_);
}

void ClassIdFunctionApproximations::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ClassIdFunctionApproximations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassIdFunctionApproximations::CopyFrom(const ClassIdFunctionApproximations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ClassIdFunctionApproximations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassIdFunctionApproximations::IsInitialized() const {
  return true;
}

void ClassIdFunctionApproximations::InternalSwap(ClassIdFunctionApproximations* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  class_id_xy_pairs_map_.Swap(&other->class_id_xy_pairs_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassIdFunctionApproximations::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SigmoidCalibration::InitAsDefaultInstance() {
  ::object_detection::protos::_SigmoidCalibration_default_instance_._instance.get_mutable()->sigmoid_parameters_ = const_cast< ::object_detection::protos::SigmoidParameters*>(
      ::object_detection::protos::SigmoidParameters::internal_default_instance());
}
class SigmoidCalibration::_Internal {
 public:
  using HasBits = decltype(std::declval<SigmoidCalibration>()._has_bits_);
  static const ::object_detection::protos::SigmoidParameters& sigmoid_parameters(const SigmoidCalibration* msg);
  static void set_has_sigmoid_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::object_detection::protos::SigmoidParameters&
SigmoidCalibration::_Internal::sigmoid_parameters(const SigmoidCalibration* msg) {
  return *msg->sigmoid_parameters_;
}
SigmoidCalibration::SigmoidCalibration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SigmoidCalibration)
}
SigmoidCalibration::SigmoidCalibration(const SigmoidCalibration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sigmoid_parameters()) {
    sigmoid_parameters_ = new ::object_detection::protos::SigmoidParameters(*from.sigmoid_parameters_);
  } else {
    sigmoid_parameters_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SigmoidCalibration)
}

void SigmoidCalibration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SigmoidCalibration_object_5fdetection_2fprotos_2fcalibration_2eproto.base);
  sigmoid_parameters_ = nullptr;
}

SigmoidCalibration::~SigmoidCalibration() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SigmoidCalibration)
  SharedDtor();
}

void SigmoidCalibration::SharedDtor() {
  if (this != internal_default_instance()) delete sigmoid_parameters_;
}

void SigmoidCalibration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigmoidCalibration& SigmoidCalibration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigmoidCalibration_object_5fdetection_2fprotos_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void SigmoidCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SigmoidCalibration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sigmoid_parameters_ != nullptr);
    sigmoid_parameters_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SigmoidCalibration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.SigmoidParameters sigmoid_parameters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sigmoid_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SigmoidCalibration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.SigmoidCalibration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.SigmoidParameters sigmoid_parameters = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sigmoid_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.SigmoidCalibration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.SigmoidCalibration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SigmoidCalibration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.SigmoidCalibration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.SigmoidParameters sigmoid_parameters = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::sigmoid_parameters(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.SigmoidCalibration)
}

::PROTOBUF_NAMESPACE_ID::uint8* SigmoidCalibration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SigmoidCalibration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.SigmoidParameters sigmoid_parameters = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::sigmoid_parameters(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SigmoidCalibration)
  return target;
}

size_t SigmoidCalibration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SigmoidCalibration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .object_detection.protos.SigmoidParameters sigmoid_parameters = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sigmoid_parameters_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigmoidCalibration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SigmoidCalibration)
  GOOGLE_DCHECK_NE(&from, this);
  const SigmoidCalibration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigmoidCalibration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SigmoidCalibration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SigmoidCalibration)
    MergeFrom(*source);
  }
}

void SigmoidCalibration::MergeFrom(const SigmoidCalibration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SigmoidCalibration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sigmoid_parameters()) {
    mutable_sigmoid_parameters()->::object_detection::protos::SigmoidParameters::MergeFrom(from.sigmoid_parameters());
  }
}

void SigmoidCalibration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SigmoidCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigmoidCalibration::CopyFrom(const SigmoidCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SigmoidCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmoidCalibration::IsInitialized() const {
  return true;
}

void SigmoidCalibration::InternalSwap(SigmoidCalibration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sigmoid_parameters_, other->sigmoid_parameters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmoidCalibration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse::ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse() {}
ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse::ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse::MergeFrom(const ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ClassIdSigmoidCalibrations::InitAsDefaultInstance() {
}
class ClassIdSigmoidCalibrations::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassIdSigmoidCalibrations>()._has_bits_);
};

ClassIdSigmoidCalibrations::ClassIdSigmoidCalibrations()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ClassIdSigmoidCalibrations)
}
ClassIdSigmoidCalibrations::ClassIdSigmoidCalibrations(const ClassIdSigmoidCalibrations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_id_sigmoid_parameters_map_.MergeFrom(from.class_id_sigmoid_parameters_map_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ClassIdSigmoidCalibrations)
}

void ClassIdSigmoidCalibrations::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClassIdSigmoidCalibrations_object_5fdetection_2fprotos_2fcalibration_2eproto.base);
}

ClassIdSigmoidCalibrations::~ClassIdSigmoidCalibrations() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ClassIdSigmoidCalibrations)
  SharedDtor();
}

void ClassIdSigmoidCalibrations::SharedDtor() {
}

void ClassIdSigmoidCalibrations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassIdSigmoidCalibrations& ClassIdSigmoidCalibrations::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassIdSigmoidCalibrations_object_5fdetection_2fprotos_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void ClassIdSigmoidCalibrations::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ClassIdSigmoidCalibrations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_id_sigmoid_parameters_map_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClassIdSigmoidCalibrations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .object_detection.protos.SigmoidParameters> class_id_sigmoid_parameters_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&class_id_sigmoid_parameters_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClassIdSigmoidCalibrations::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ClassIdSigmoidCalibrations)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .object_detection.protos.SigmoidParameters> class_id_sigmoid_parameters_map = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::SigmoidParameters,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::SigmoidParameters > > parser(&class_id_sigmoid_parameters_map_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ClassIdSigmoidCalibrations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ClassIdSigmoidCalibrations)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClassIdSigmoidCalibrations::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ClassIdSigmoidCalibrations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .object_detection.protos.SigmoidParameters> class_id_sigmoid_parameters_map = 1;
  if (!this->class_id_sigmoid_parameters_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::SigmoidParameters >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->class_id_sigmoid_parameters_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->class_id_sigmoid_parameters_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::SigmoidParameters >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::SigmoidParameters >::const_iterator
          it = this->class_id_sigmoid_parameters_map().begin();
          it != this->class_id_sigmoid_parameters_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::SigmoidParameters >::const_iterator
          it = this->class_id_sigmoid_parameters_map().begin();
          it != this->class_id_sigmoid_parameters_map().end(); ++it) {
        ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ClassIdSigmoidCalibrations)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassIdSigmoidCalibrations::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ClassIdSigmoidCalibrations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .object_detection.protos.SigmoidParameters> class_id_sigmoid_parameters_map = 1;
  if (!this->class_id_sigmoid_parameters_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::SigmoidParameters >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->class_id_sigmoid_parameters_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->class_id_sigmoid_parameters_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::SigmoidParameters >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::SigmoidParameters >::const_iterator
          it = this->class_id_sigmoid_parameters_map().begin();
          it != this->class_id_sigmoid_parameters_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::SigmoidParameters >::const_iterator
          it = this->class_id_sigmoid_parameters_map().begin();
          it != this->class_id_sigmoid_parameters_map().end(); ++it) {
        target = ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ClassIdSigmoidCalibrations)
  return target;
}

size_t ClassIdSigmoidCalibrations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ClassIdSigmoidCalibrations)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .object_detection.protos.SigmoidParameters> class_id_sigmoid_parameters_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->class_id_sigmoid_parameters_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::object_detection::protos::SigmoidParameters >::const_iterator
      it = this->class_id_sigmoid_parameters_map().begin();
      it != this->class_id_sigmoid_parameters_map().end(); ++it) {
    total_size += ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassIdSigmoidCalibrations::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ClassIdSigmoidCalibrations)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassIdSigmoidCalibrations* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassIdSigmoidCalibrations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ClassIdSigmoidCalibrations)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ClassIdSigmoidCalibrations)
    MergeFrom(*source);
  }
}

void ClassIdSigmoidCalibrations::MergeFrom(const ClassIdSigmoidCalibrations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ClassIdSigmoidCalibrations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  class_id_sigmoid_parameters_map_.MergeFrom(from.class_id_sigmoid_parameters_map_);
}

void ClassIdSigmoidCalibrations::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ClassIdSigmoidCalibrations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassIdSigmoidCalibrations::CopyFrom(const ClassIdSigmoidCalibrations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ClassIdSigmoidCalibrations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassIdSigmoidCalibrations::IsInitialized() const {
  return true;
}

void ClassIdSigmoidCalibrations::InternalSwap(ClassIdSigmoidCalibrations* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  class_id_sigmoid_parameters_map_.Swap(&other->class_id_sigmoid_parameters_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassIdSigmoidCalibrations::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void XYPairs_XYPair::InitAsDefaultInstance() {
}
class XYPairs_XYPair::_Internal {
 public:
  using HasBits = decltype(std::declval<XYPairs_XYPair>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

XYPairs_XYPair::XYPairs_XYPair()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.XYPairs.XYPair)
}
XYPairs_XYPair::XYPairs_XYPair(const XYPairs_XYPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.XYPairs.XYPair)
}

void XYPairs_XYPair::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

XYPairs_XYPair::~XYPairs_XYPair() {
  // @@protoc_insertion_point(destructor:object_detection.protos.XYPairs.XYPair)
  SharedDtor();
}

void XYPairs_XYPair::SharedDtor() {
}

void XYPairs_XYPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XYPairs_XYPair& XYPairs_XYPair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_XYPairs_XYPair_object_5fdetection_2fprotos_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void XYPairs_XYPair::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.XYPairs.XYPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* XYPairs_XYPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XYPairs_XYPair::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.XYPairs.XYPair)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.XYPairs.XYPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.XYPairs.XYPair)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void XYPairs_XYPair::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.XYPairs.XYPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.XYPairs.XYPair)
}

::PROTOBUF_NAMESPACE_ID::uint8* XYPairs_XYPair::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.XYPairs.XYPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.XYPairs.XYPair)
  return target;
}

size_t XYPairs_XYPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.XYPairs.XYPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XYPairs_XYPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.XYPairs.XYPair)
  GOOGLE_DCHECK_NE(&from, this);
  const XYPairs_XYPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XYPairs_XYPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.XYPairs.XYPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.XYPairs.XYPair)
    MergeFrom(*source);
  }
}

void XYPairs_XYPair::MergeFrom(const XYPairs_XYPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.XYPairs.XYPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void XYPairs_XYPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.XYPairs.XYPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XYPairs_XYPair::CopyFrom(const XYPairs_XYPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.XYPairs.XYPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XYPairs_XYPair::IsInitialized() const {
  return true;
}

void XYPairs_XYPair::InternalSwap(XYPairs_XYPair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata XYPairs_XYPair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void XYPairs::InitAsDefaultInstance() {
}
class XYPairs::_Internal {
 public:
  using HasBits = decltype(std::declval<XYPairs>()._has_bits_);
  static void set_has_training_data_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

XYPairs::XYPairs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.XYPairs)
}
XYPairs::XYPairs(const XYPairs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      x_y_pair_(from.x_y_pair_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  training_data_type_ = from.training_data_type_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.XYPairs)
}

void XYPairs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_XYPairs_object_5fdetection_2fprotos_2fcalibration_2eproto.base);
  training_data_type_ = 0;
}

XYPairs::~XYPairs() {
  // @@protoc_insertion_point(destructor:object_detection.protos.XYPairs)
  SharedDtor();
}

void XYPairs::SharedDtor() {
}

void XYPairs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XYPairs& XYPairs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_XYPairs_object_5fdetection_2fprotos_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void XYPairs::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.XYPairs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_y_pair_.Clear();
  training_data_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* XYPairs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .object_detection.protos.XYPairs.XYPair x_y_pair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_x_y_pair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.TrainingDataType training_data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::object_detection::protos::TrainingDataType_IsValid(val))) {
            set_training_data_type(static_cast<::object_detection::protos::TrainingDataType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XYPairs::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.XYPairs)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .object_detection.protos.XYPairs.XYPair x_y_pair = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_x_y_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.TrainingDataType training_data_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::TrainingDataType_IsValid(value)) {
            set_training_data_type(static_cast< ::object_detection::protos::TrainingDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.XYPairs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.XYPairs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void XYPairs::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.XYPairs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .object_detection.protos.XYPairs.XYPair x_y_pair = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->x_y_pair_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->x_y_pair(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.TrainingDataType training_data_type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->training_data_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.XYPairs)
}

::PROTOBUF_NAMESPACE_ID::uint8* XYPairs::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.XYPairs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .object_detection.protos.XYPairs.XYPair x_y_pair = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->x_y_pair_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->x_y_pair(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.TrainingDataType training_data_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->training_data_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.XYPairs)
  return target;
}

size_t XYPairs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.XYPairs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .object_detection.protos.XYPairs.XYPair x_y_pair = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->x_y_pair_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->x_y_pair(static_cast<int>(i)));
    }
  }

  // optional .object_detection.protos.TrainingDataType training_data_type = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->training_data_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XYPairs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.XYPairs)
  GOOGLE_DCHECK_NE(&from, this);
  const XYPairs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XYPairs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.XYPairs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.XYPairs)
    MergeFrom(*source);
  }
}

void XYPairs::MergeFrom(const XYPairs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.XYPairs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  x_y_pair_.MergeFrom(from.x_y_pair_);
  if (from.has_training_data_type()) {
    set_training_data_type(from.training_data_type());
  }
}

void XYPairs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.XYPairs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XYPairs::CopyFrom(const XYPairs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.XYPairs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XYPairs::IsInitialized() const {
  return true;
}

void XYPairs::InternalSwap(XYPairs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&x_y_pair_)->InternalSwap(CastToBase(&other->x_y_pair_));
  swap(training_data_type_, other->training_data_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata XYPairs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SigmoidParameters::InitAsDefaultInstance() {
}
class SigmoidParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<SigmoidParameters>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SigmoidParameters::SigmoidParameters()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SigmoidParameters)
}
SigmoidParameters::SigmoidParameters(const SigmoidParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&b_, &from.b_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&b_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SigmoidParameters)
}

void SigmoidParameters::SharedCtor() {
  b_ = 0;
  a_ = -1;
}

SigmoidParameters::~SigmoidParameters() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SigmoidParameters)
  SharedDtor();
}

void SigmoidParameters::SharedDtor() {
}

void SigmoidParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigmoidParameters& SigmoidParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigmoidParameters_object_5fdetection_2fprotos_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void SigmoidParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SigmoidParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    b_ = 0;
    a_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SigmoidParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float a = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float b = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SigmoidParameters::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.SigmoidParameters)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float a = 1 [default = -1];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_a(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float b = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_b(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.SigmoidParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.SigmoidParameters)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SigmoidParameters::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.SigmoidParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float a = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->a(), output);
  }

  // optional float b = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->b(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.SigmoidParameters)
}

::PROTOBUF_NAMESPACE_ID::uint8* SigmoidParameters::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SigmoidParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float a = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->a(), target);
  }

  // optional float b = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->b(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SigmoidParameters)
  return target;
}

size_t SigmoidParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SigmoidParameters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float b = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float a = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigmoidParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SigmoidParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const SigmoidParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigmoidParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SigmoidParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SigmoidParameters)
    MergeFrom(*source);
  }
}

void SigmoidParameters::MergeFrom(const SigmoidParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SigmoidParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000002u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SigmoidParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SigmoidParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigmoidParameters::CopyFrom(const SigmoidParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SigmoidParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmoidParameters::IsInitialized() const {
  return true;
}

void SigmoidParameters::InternalSwap(SigmoidParameters* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(b_, other->b_);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmoidParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::object_detection::protos::CalibrationConfig* Arena::CreateMaybeMessage< ::object_detection::protos::CalibrationConfig >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::CalibrationConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::FunctionApproximation* Arena::CreateMaybeMessage< ::object_detection::protos::FunctionApproximation >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::FunctionApproximation >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::object_detection::protos::ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::ClassIdFunctionApproximations_ClassIdXyPairsMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::ClassIdFunctionApproximations* Arena::CreateMaybeMessage< ::object_detection::protos::ClassIdFunctionApproximations >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::ClassIdFunctionApproximations >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::SigmoidCalibration* Arena::CreateMaybeMessage< ::object_detection::protos::SigmoidCalibration >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::SigmoidCalibration >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::object_detection::protos::ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::ClassIdSigmoidCalibrations_ClassIdSigmoidParametersMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::ClassIdSigmoidCalibrations* Arena::CreateMaybeMessage< ::object_detection::protos::ClassIdSigmoidCalibrations >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::ClassIdSigmoidCalibrations >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::XYPairs_XYPair* Arena::CreateMaybeMessage< ::object_detection::protos::XYPairs_XYPair >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::XYPairs_XYPair >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::XYPairs* Arena::CreateMaybeMessage< ::object_detection::protos::XYPairs >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::XYPairs >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::SigmoidParameters* Arena::CreateMaybeMessage< ::object_detection::protos::SigmoidParameters >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::SigmoidParameters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
