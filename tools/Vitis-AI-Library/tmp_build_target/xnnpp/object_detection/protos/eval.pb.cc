// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/eval.proto

#include "object_detection/protos/eval.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace object_detection {
namespace protos {
class EvalConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EvalConfig> _instance;
} _EvalConfig_default_instance_;
}  // namespace protos
}  // namespace object_detection
static void InitDefaultsscc_info_EvalConfig_object_5fdetection_2fprotos_2feval_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::object_detection::protos::EvalConfig::_i_give_permission_to_break_this_code_default_groundtruth_box_visualization_color_.DefaultConstruct();
  *::object_detection::protos::EvalConfig::_i_give_permission_to_break_this_code_default_groundtruth_box_visualization_color_.get_mutable() = std::string("black", 5);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::object_detection::protos::EvalConfig::_i_give_permission_to_break_this_code_default_groundtruth_box_visualization_color_.get_mutable());
  {
    void* ptr = &::object_detection::protos::_EvalConfig_default_instance_;
    new (ptr) ::object_detection::protos::EvalConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::EvalConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EvalConfig_object_5fdetection_2fprotos_2feval_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EvalConfig_object_5fdetection_2fprotos_2feval_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_object_5fdetection_2fprotos_2feval_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_object_5fdetection_2fprotos_2feval_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_object_5fdetection_2fprotos_2feval_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_object_5fdetection_2fprotos_2feval_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, batch_size_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, num_visualizations_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, num_examples_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, eval_interval_secs_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, max_evals_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, save_graph_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, visualization_export_dir_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, eval_master_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, metrics_set_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, export_path_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, ignore_groundtruth_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, use_moving_averages_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, eval_instance_masks_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, min_score_threshold_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, max_num_boxes_to_visualize_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, skip_scores_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, skip_labels_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, visualize_groundtruth_boxes_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, groundtruth_box_visualization_color_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, keep_image_id_for_visualization_export_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, retain_original_images_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, include_metrics_per_category_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, recall_lower_bound_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::EvalConfig, recall_upper_bound_),
  21,
  15,
  16,
  17,
  4,
  5,
  0,
  1,
  ~0u,
  2,
  6,
  7,
  8,
  18,
  19,
  9,
  10,
  11,
  3,
  12,
  20,
  13,
  14,
  22,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 29, sizeof(::object_detection::protos::EvalConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_EvalConfig_default_instance_),
};

const char descriptor_table_protodef_object_5fdetection_2fprotos_2feval_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"object_detection/protos/eval.proto\022\027ob"
  "ject_detection.protos\"\265\006\n\nEvalConfig\022\025\n\n"
  "batch_size\030\031 \001(\r:\0011\022\036\n\022num_visualization"
  "s\030\001 \001(\r:\00210\022\036\n\014num_examples\030\002 \001(\r:\0045000B"
  "\002\030\001\022\037\n\022eval_interval_secs\030\003 \001(\r:\003300\022\030\n\t"
  "max_evals\030\004 \001(\r:\0010B\002\030\001\022\031\n\nsave_graph\030\005 \001"
  "(\010:\005false\022\"\n\030visualization_export_dir\030\006 "
  "\001(\t:\000\022\025\n\013eval_master\030\007 \001(\t:\000\022\023\n\013metrics_"
  "set\030\010 \003(\t\022\025\n\013export_path\030\t \001(\t:\000\022!\n\022igno"
  "re_groundtruth\030\n \001(\010:\005false\022\"\n\023use_movin"
  "g_averages\030\013 \001(\010:\005false\022\"\n\023eval_instance"
  "_masks\030\014 \001(\010:\005false\022 \n\023min_score_thresho"
  "ld\030\r \001(\002:\0030.5\022&\n\032max_num_boxes_to_visual"
  "ize\030\016 \001(\005:\00220\022\032\n\013skip_scores\030\017 \001(\010:\005fals"
  "e\022\032\n\013skip_labels\030\020 \001(\010:\005false\022*\n\033visuali"
  "ze_groundtruth_boxes\030\021 \001(\010:\005false\0222\n#gro"
  "undtruth_box_visualization_color\030\022 \001(\t:\005"
  "black\0225\n&keep_image_id_for_visualization"
  "_export\030\023 \001(\010:\005false\022$\n\026retain_original_"
  "images\030\027 \001(\010:\004true\022+\n\034include_metrics_pe"
  "r_category\030\030 \001(\010:\005false\022\035\n\022recall_lower_"
  "bound\030\032 \001(\002:\0010\022\035\n\022recall_upper_bound\030\033 \001"
  "(\002:\0011"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_object_5fdetection_2fprotos_2feval_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_object_5fdetection_2fprotos_2feval_2eproto_sccs[1] = {
  &scc_info_EvalConfig_object_5fdetection_2fprotos_2feval_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_object_5fdetection_2fprotos_2feval_2eproto_once;
static bool descriptor_table_object_5fdetection_2fprotos_2feval_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2feval_2eproto = {
  &descriptor_table_object_5fdetection_2fprotos_2feval_2eproto_initialized, descriptor_table_protodef_object_5fdetection_2fprotos_2feval_2eproto, "object_detection/protos/eval.proto", 885,
  &descriptor_table_object_5fdetection_2fprotos_2feval_2eproto_once, descriptor_table_object_5fdetection_2fprotos_2feval_2eproto_sccs, descriptor_table_object_5fdetection_2fprotos_2feval_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_object_5fdetection_2fprotos_2feval_2eproto::offsets,
  file_level_metadata_object_5fdetection_2fprotos_2feval_2eproto, 1, file_level_enum_descriptors_object_5fdetection_2fprotos_2feval_2eproto, file_level_service_descriptors_object_5fdetection_2fprotos_2feval_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_object_5fdetection_2fprotos_2feval_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_object_5fdetection_2fprotos_2feval_2eproto), true);
namespace object_detection {
namespace protos {

// ===================================================================

void EvalConfig::InitAsDefaultInstance() {
}
class EvalConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<EvalConfig>()._has_bits_);
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_num_visualizations(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_num_examples(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_eval_interval_secs(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_max_evals(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_save_graph(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_visualization_export_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eval_master(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_export_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ignore_groundtruth(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_use_moving_averages(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_eval_instance_masks(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_min_score_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_max_num_boxes_to_visualize(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_skip_scores(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_skip_labels(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_visualize_groundtruth_boxes(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_groundtruth_box_visualization_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_keep_image_id_for_visualization_export(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_retain_original_images(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_include_metrics_per_category(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_recall_lower_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_recall_upper_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EvalConfig::_i_give_permission_to_break_this_code_default_groundtruth_box_visualization_color_;
EvalConfig::EvalConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.EvalConfig)
}
EvalConfig::EvalConfig(const EvalConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      metrics_set_(from.metrics_set_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  visualization_export_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_visualization_export_dir()) {
    visualization_export_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.visualization_export_dir_);
  }
  eval_master_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_eval_master()) {
    eval_master_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.eval_master_);
  }
  export_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_export_path()) {
    export_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.export_path_);
  }
  groundtruth_box_visualization_color_.UnsafeSetDefault(&::object_detection::protos::EvalConfig::_i_give_permission_to_break_this_code_default_groundtruth_box_visualization_color_.get());
  if (from.has_groundtruth_box_visualization_color()) {
    groundtruth_box_visualization_color_.AssignWithDefault(&::object_detection::protos::EvalConfig::_i_give_permission_to_break_this_code_default_groundtruth_box_visualization_color_.get(), from.groundtruth_box_visualization_color_);
  }
  ::memcpy(&max_evals_, &from.max_evals_,
    static_cast<size_t>(reinterpret_cast<char*>(&recall_upper_bound_) -
    reinterpret_cast<char*>(&max_evals_)) + sizeof(recall_upper_bound_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.EvalConfig)
}

void EvalConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EvalConfig_object_5fdetection_2fprotos_2feval_2eproto.base);
  visualization_export_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eval_master_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  export_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groundtruth_box_visualization_color_.UnsafeSetDefault(&::object_detection::protos::EvalConfig::_i_give_permission_to_break_this_code_default_groundtruth_box_visualization_color_.get());
  ::memset(&max_evals_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recall_lower_bound_) -
      reinterpret_cast<char*>(&max_evals_)) + sizeof(recall_lower_bound_));
  num_visualizations_ = 10u;
  num_examples_ = 5000u;
  eval_interval_secs_ = 300u;
  min_score_threshold_ = 0.5f;
  max_num_boxes_to_visualize_ = 20;
  retain_original_images_ = true;
  batch_size_ = 1u;
  recall_upper_bound_ = 1;
}

EvalConfig::~EvalConfig() {
  // @@protoc_insertion_point(destructor:object_detection.protos.EvalConfig)
  SharedDtor();
}

void EvalConfig::SharedDtor() {
  visualization_export_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eval_master_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  export_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groundtruth_box_visualization_color_.DestroyNoArena(&::object_detection::protos::EvalConfig::_i_give_permission_to_break_this_code_default_groundtruth_box_visualization_color_.get());
}

void EvalConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EvalConfig& EvalConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EvalConfig_object_5fdetection_2fprotos_2feval_2eproto.base);
  return *internal_default_instance();
}


void EvalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.EvalConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_set_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      visualization_export_dir_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      eval_master_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      export_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      groundtruth_box_visualization_color_.UnsafeMutablePointer()->assign(*&::object_detection::protos::EvalConfig::_i_give_permission_to_break_this_code_default_groundtruth_box_visualization_color_.get());
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&max_evals_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_moving_averages_) -
        reinterpret_cast<char*>(&max_evals_)) + sizeof(use_moving_averages_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&eval_instance_masks_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recall_lower_bound_) -
        reinterpret_cast<char*>(&eval_instance_masks_)) + sizeof(recall_lower_bound_));
    num_visualizations_ = 10u;
  }
  if (cached_has_bits & 0x007f0000u) {
    num_examples_ = 5000u;
    eval_interval_secs_ = 300u;
    min_score_threshold_ = 0.5f;
    max_num_boxes_to_visualize_ = 20;
    retain_original_images_ = true;
    batch_size_ = 1u;
    recall_upper_bound_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EvalConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 num_visualizations = 1 [default = 10];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_visualizations(&has_bits);
          num_visualizations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_examples = 2 [default = 5000, deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_examples(&has_bits);
          num_examples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 eval_interval_secs = 3 [default = 300];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_eval_interval_secs(&has_bits);
          eval_interval_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_evals = 4 [default = 0, deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_evals(&has_bits);
          max_evals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool save_graph = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_save_graph(&has_bits);
          save_graph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string visualization_export_dir = 6 [default = ""];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_visualization_export_dir(), ptr, ctx, "object_detection.protos.EvalConfig.visualization_export_dir");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string eval_master = 7 [default = ""];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_eval_master(), ptr, ctx, "object_detection.protos.EvalConfig.eval_master");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metrics_set = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_metrics_set(), ptr, ctx, "object_detection.protos.EvalConfig.metrics_set");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // optional string export_path = 9 [default = ""];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_export_path(), ptr, ctx, "object_detection.protos.EvalConfig.export_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ignore_groundtruth = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ignore_groundtruth(&has_bits);
          ignore_groundtruth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_moving_averages = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_use_moving_averages(&has_bits);
          use_moving_averages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool eval_instance_masks = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_eval_instance_masks(&has_bits);
          eval_instance_masks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float min_score_threshold = 13 [default = 0.5];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_min_score_threshold(&has_bits);
          min_score_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 max_num_boxes_to_visualize = 14 [default = 20];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_max_num_boxes_to_visualize(&has_bits);
          max_num_boxes_to_visualize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool skip_scores = 15 [default = false];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_skip_scores(&has_bits);
          skip_scores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool skip_labels = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_skip_labels(&has_bits);
          skip_labels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool visualize_groundtruth_boxes = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_visualize_groundtruth_boxes(&has_bits);
          visualize_groundtruth_boxes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string groundtruth_box_visualization_color = 18 [default = "black"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_groundtruth_box_visualization_color(), ptr, ctx, "object_detection.protos.EvalConfig.groundtruth_box_visualization_color");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool keep_image_id_for_visualization_export = 19 [default = false];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_keep_image_id_for_visualization_export(&has_bits);
          keep_image_id_for_visualization_export_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool retain_original_images = 23 [default = true];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_retain_original_images(&has_bits);
          retain_original_images_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool include_metrics_per_category = 24 [default = false];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_include_metrics_per_category(&has_bits);
          include_metrics_per_category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 batch_size = 25 [default = 1];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float recall_lower_bound = 26 [default = 0];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_recall_lower_bound(&has_bits);
          recall_lower_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float recall_upper_bound = 27 [default = 1];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_recall_upper_bound(&has_bits);
          recall_upper_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EvalConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.EvalConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_visualizations = 1 [default = 10];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num_visualizations(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_visualizations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_examples = 2 [default = 5000, deprecated = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_examples(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_examples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 eval_interval_secs = 3 [default = 300];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_eval_interval_secs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eval_interval_secs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_evals = 4 [default = 0, deprecated = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_max_evals(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_evals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool save_graph = 5 [default = false];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_save_graph(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_graph_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string visualization_export_dir = 6 [default = ""];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_visualization_export_dir()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->visualization_export_dir().data(), static_cast<int>(this->visualization_export_dir().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "object_detection.protos.EvalConfig.visualization_export_dir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string eval_master = 7 [default = ""];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_eval_master()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->eval_master().data(), static_cast<int>(this->eval_master().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "object_detection.protos.EvalConfig.eval_master");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string metrics_set = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_metrics_set()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metrics_set(this->metrics_set_size() - 1).data(),
            static_cast<int>(this->metrics_set(this->metrics_set_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "object_detection.protos.EvalConfig.metrics_set");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string export_path = 9 [default = ""];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_export_path()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->export_path().data(), static_cast<int>(this->export_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "object_detection.protos.EvalConfig.export_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ignore_groundtruth = 10 [default = false];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_ignore_groundtruth(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_groundtruth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_moving_averages = 11 [default = false];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_use_moving_averages(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_moving_averages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool eval_instance_masks = 12 [default = false];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_eval_instance_masks(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eval_instance_masks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_score_threshold = 13 [default = 0.5];
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {
          _Internal::set_has_min_score_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_score_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_num_boxes_to_visualize = 14 [default = 20];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_max_num_boxes_to_visualize(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_boxes_to_visualize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool skip_scores = 15 [default = false];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_skip_scores(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_scores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool skip_labels = 16 [default = false];
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_skip_labels(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_labels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool visualize_groundtruth_boxes = 17 [default = false];
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_visualize_groundtruth_boxes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visualize_groundtruth_boxes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string groundtruth_box_visualization_color = 18 [default = "black"];
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_groundtruth_box_visualization_color()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groundtruth_box_visualization_color().data(), static_cast<int>(this->groundtruth_box_visualization_color().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "object_detection.protos.EvalConfig.groundtruth_box_visualization_color");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool keep_image_id_for_visualization_export = 19 [default = false];
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_keep_image_id_for_visualization_export(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_image_id_for_visualization_export_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool retain_original_images = 23 [default = true];
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          _Internal::set_has_retain_original_images(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &retain_original_images_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_metrics_per_category = 24 [default = false];
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_include_metrics_per_category(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_metrics_per_category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 25 [default = 1];
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          _Internal::set_has_batch_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float recall_lower_bound = 26 [default = 0];
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (213 & 0xFF)) {
          _Internal::set_has_recall_lower_bound(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &recall_lower_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float recall_upper_bound = 27 [default = 1];
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (221 & 0xFF)) {
          _Internal::set_has_recall_upper_bound(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &recall_upper_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.EvalConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.EvalConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EvalConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.EvalConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_visualizations = 1 [default = 10];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->num_visualizations(), output);
  }

  // optional uint32 num_examples = 2 [default = 5000, deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->num_examples(), output);
  }

  // optional uint32 eval_interval_secs = 3 [default = 300];
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->eval_interval_secs(), output);
  }

  // optional uint32 max_evals = 4 [default = 0, deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->max_evals(), output);
  }

  // optional bool save_graph = 5 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->save_graph(), output);
  }

  // optional string visualization_export_dir = 6 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->visualization_export_dir().data(), static_cast<int>(this->visualization_export_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.visualization_export_dir");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->visualization_export_dir(), output);
  }

  // optional string eval_master = 7 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eval_master().data(), static_cast<int>(this->eval_master().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.eval_master");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->eval_master(), output);
  }

  // repeated string metrics_set = 8;
  for (int i = 0, n = this->metrics_set_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metrics_set(i).data(), static_cast<int>(this->metrics_set(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.metrics_set");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      8, this->metrics_set(i), output);
  }

  // optional string export_path = 9 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->export_path().data(), static_cast<int>(this->export_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.export_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->export_path(), output);
  }

  // optional bool ignore_groundtruth = 10 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->ignore_groundtruth(), output);
  }

  // optional bool use_moving_averages = 11 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->use_moving_averages(), output);
  }

  // optional bool eval_instance_masks = 12 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->eval_instance_masks(), output);
  }

  // optional float min_score_threshold = 13 [default = 0.5];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(13, this->min_score_threshold(), output);
  }

  // optional int32 max_num_boxes_to_visualize = 14 [default = 20];
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->max_num_boxes_to_visualize(), output);
  }

  // optional bool skip_scores = 15 [default = false];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->skip_scores(), output);
  }

  // optional bool skip_labels = 16 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(16, this->skip_labels(), output);
  }

  // optional bool visualize_groundtruth_boxes = 17 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(17, this->visualize_groundtruth_boxes(), output);
  }

  // optional string groundtruth_box_visualization_color = 18 [default = "black"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groundtruth_box_visualization_color().data(), static_cast<int>(this->groundtruth_box_visualization_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.groundtruth_box_visualization_color");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->groundtruth_box_visualization_color(), output);
  }

  // optional bool keep_image_id_for_visualization_export = 19 [default = false];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(19, this->keep_image_id_for_visualization_export(), output);
  }

  // optional bool retain_original_images = 23 [default = true];
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(23, this->retain_original_images(), output);
  }

  // optional bool include_metrics_per_category = 24 [default = false];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(24, this->include_metrics_per_category(), output);
  }

  // optional uint32 batch_size = 25 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(25, this->batch_size(), output);
  }

  // optional float recall_lower_bound = 26 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(26, this->recall_lower_bound(), output);
  }

  // optional float recall_upper_bound = 27 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(27, this->recall_upper_bound(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.EvalConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* EvalConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.EvalConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_visualizations = 1 [default = 10];
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_visualizations(), target);
  }

  // optional uint32 num_examples = 2 [default = 5000, deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_examples(), target);
  }

  // optional uint32 eval_interval_secs = 3 [default = 300];
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->eval_interval_secs(), target);
  }

  // optional uint32 max_evals = 4 [default = 0, deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_evals(), target);
  }

  // optional bool save_graph = 5 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->save_graph(), target);
  }

  // optional string visualization_export_dir = 6 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->visualization_export_dir().data(), static_cast<int>(this->visualization_export_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.visualization_export_dir");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->visualization_export_dir(), target);
  }

  // optional string eval_master = 7 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eval_master().data(), static_cast<int>(this->eval_master().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.eval_master");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->eval_master(), target);
  }

  // repeated string metrics_set = 8;
  for (int i = 0, n = this->metrics_set_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metrics_set(i).data(), static_cast<int>(this->metrics_set(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.metrics_set");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(8, this->metrics_set(i), target);
  }

  // optional string export_path = 9 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->export_path().data(), static_cast<int>(this->export_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.export_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->export_path(), target);
  }

  // optional bool ignore_groundtruth = 10 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->ignore_groundtruth(), target);
  }

  // optional bool use_moving_averages = 11 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->use_moving_averages(), target);
  }

  // optional bool eval_instance_masks = 12 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->eval_instance_masks(), target);
  }

  // optional float min_score_threshold = 13 [default = 0.5];
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->min_score_threshold(), target);
  }

  // optional int32 max_num_boxes_to_visualize = 14 [default = 20];
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->max_num_boxes_to_visualize(), target);
  }

  // optional bool skip_scores = 15 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->skip_scores(), target);
  }

  // optional bool skip_labels = 16 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->skip_labels(), target);
  }

  // optional bool visualize_groundtruth_boxes = 17 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->visualize_groundtruth_boxes(), target);
  }

  // optional string groundtruth_box_visualization_color = 18 [default = "black"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groundtruth_box_visualization_color().data(), static_cast<int>(this->groundtruth_box_visualization_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.groundtruth_box_visualization_color");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        18, this->groundtruth_box_visualization_color(), target);
  }

  // optional bool keep_image_id_for_visualization_export = 19 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->keep_image_id_for_visualization_export(), target);
  }

  // optional bool retain_original_images = 23 [default = true];
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->retain_original_images(), target);
  }

  // optional bool include_metrics_per_category = 24 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->include_metrics_per_category(), target);
  }

  // optional uint32 batch_size = 25 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->batch_size(), target);
  }

  // optional float recall_lower_bound = 26 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->recall_lower_bound(), target);
  }

  // optional float recall_upper_bound = 27 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(27, this->recall_upper_bound(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.EvalConfig)
  return target;
}

size_t EvalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.EvalConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metrics_set = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->metrics_set_size());
  for (int i = 0, n = this->metrics_set_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->metrics_set(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string visualization_export_dir = 6 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->visualization_export_dir());
    }

    // optional string eval_master = 7 [default = ""];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->eval_master());
    }

    // optional string export_path = 9 [default = ""];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->export_path());
    }

    // optional string groundtruth_box_visualization_color = 18 [default = "black"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->groundtruth_box_visualization_color());
    }

    // optional uint32 max_evals = 4 [default = 0, deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max_evals());
    }

    // optional bool save_graph = 5 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool ignore_groundtruth = 10 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool use_moving_averages = 11 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool eval_instance_masks = 12 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool skip_scores = 15 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool skip_labels = 16 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool visualize_groundtruth_boxes = 17 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool keep_image_id_for_visualization_export = 19 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool include_metrics_per_category = 24 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional float recall_lower_bound = 26 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional uint32 num_visualizations = 1 [default = 10];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->num_visualizations());
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional uint32 num_examples = 2 [default = 5000, deprecated = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->num_examples());
    }

    // optional uint32 eval_interval_secs = 3 [default = 300];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->eval_interval_secs());
    }

    // optional float min_score_threshold = 13 [default = 0.5];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional int32 max_num_boxes_to_visualize = 14 [default = 20];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_num_boxes_to_visualize());
    }

    // optional bool retain_original_images = 23 [default = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional uint32 batch_size = 25 [default = 1];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional float recall_upper_bound = 27 [default = 1];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvalConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.EvalConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const EvalConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EvalConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.EvalConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.EvalConfig)
    MergeFrom(*source);
  }
}

void EvalConfig::MergeFrom(const EvalConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.EvalConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_set_.MergeFrom(from.metrics_set_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      visualization_export_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.visualization_export_dir_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      eval_master_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.eval_master_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      export_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.export_path_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      groundtruth_box_visualization_color_.AssignWithDefault(&::object_detection::protos::EvalConfig::_i_give_permission_to_break_this_code_default_groundtruth_box_visualization_color_.get(), from.groundtruth_box_visualization_color_);
    }
    if (cached_has_bits & 0x00000010u) {
      max_evals_ = from.max_evals_;
    }
    if (cached_has_bits & 0x00000020u) {
      save_graph_ = from.save_graph_;
    }
    if (cached_has_bits & 0x00000040u) {
      ignore_groundtruth_ = from.ignore_groundtruth_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_moving_averages_ = from.use_moving_averages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      eval_instance_masks_ = from.eval_instance_masks_;
    }
    if (cached_has_bits & 0x00000200u) {
      skip_scores_ = from.skip_scores_;
    }
    if (cached_has_bits & 0x00000400u) {
      skip_labels_ = from.skip_labels_;
    }
    if (cached_has_bits & 0x00000800u) {
      visualize_groundtruth_boxes_ = from.visualize_groundtruth_boxes_;
    }
    if (cached_has_bits & 0x00001000u) {
      keep_image_id_for_visualization_export_ = from.keep_image_id_for_visualization_export_;
    }
    if (cached_has_bits & 0x00002000u) {
      include_metrics_per_category_ = from.include_metrics_per_category_;
    }
    if (cached_has_bits & 0x00004000u) {
      recall_lower_bound_ = from.recall_lower_bound_;
    }
    if (cached_has_bits & 0x00008000u) {
      num_visualizations_ = from.num_visualizations_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      num_examples_ = from.num_examples_;
    }
    if (cached_has_bits & 0x00020000u) {
      eval_interval_secs_ = from.eval_interval_secs_;
    }
    if (cached_has_bits & 0x00040000u) {
      min_score_threshold_ = from.min_score_threshold_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_num_boxes_to_visualize_ = from.max_num_boxes_to_visualize_;
    }
    if (cached_has_bits & 0x00100000u) {
      retain_original_images_ = from.retain_original_images_;
    }
    if (cached_has_bits & 0x00200000u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00400000u) {
      recall_upper_bound_ = from.recall_upper_bound_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EvalConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.EvalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvalConfig::CopyFrom(const EvalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.EvalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalConfig::IsInitialized() const {
  return true;
}

void EvalConfig::InternalSwap(EvalConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metrics_set_.InternalSwap(CastToBase(&other->metrics_set_));
  visualization_export_dir_.Swap(&other->visualization_export_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  eval_master_.Swap(&other->eval_master_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  export_path_.Swap(&other->export_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  groundtruth_box_visualization_color_.Swap(&other->groundtruth_box_visualization_color_, &::object_detection::protos::EvalConfig::_i_give_permission_to_break_this_code_default_groundtruth_box_visualization_color_.get(),
    GetArenaNoVirtual());
  swap(max_evals_, other->max_evals_);
  swap(save_graph_, other->save_graph_);
  swap(ignore_groundtruth_, other->ignore_groundtruth_);
  swap(use_moving_averages_, other->use_moving_averages_);
  swap(eval_instance_masks_, other->eval_instance_masks_);
  swap(skip_scores_, other->skip_scores_);
  swap(skip_labels_, other->skip_labels_);
  swap(visualize_groundtruth_boxes_, other->visualize_groundtruth_boxes_);
  swap(keep_image_id_for_visualization_export_, other->keep_image_id_for_visualization_export_);
  swap(include_metrics_per_category_, other->include_metrics_per_category_);
  swap(recall_lower_bound_, other->recall_lower_bound_);
  swap(num_visualizations_, other->num_visualizations_);
  swap(num_examples_, other->num_examples_);
  swap(eval_interval_secs_, other->eval_interval_secs_);
  swap(min_score_threshold_, other->min_score_threshold_);
  swap(max_num_boxes_to_visualize_, other->max_num_boxes_to_visualize_);
  swap(retain_original_images_, other->retain_original_images_);
  swap(batch_size_, other->batch_size_);
  swap(recall_upper_bound_, other->recall_upper_bound_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EvalConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::object_detection::protos::EvalConfig* Arena::CreateMaybeMessage< ::object_detection::protos::EvalConfig >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::EvalConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
