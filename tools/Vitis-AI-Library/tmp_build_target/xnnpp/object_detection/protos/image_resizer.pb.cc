// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/image_resizer.proto

#include "object_detection/protos/image_resizer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionalShapeResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FixedShapeResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IdentityResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeepAspectRatioResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto;
namespace object_detection {
namespace protos {
class ImageResizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageResizer> _instance;
  const ::object_detection::protos::KeepAspectRatioResizer* keep_aspect_ratio_resizer_;
  const ::object_detection::protos::FixedShapeResizer* fixed_shape_resizer_;
  const ::object_detection::protos::IdentityResizer* identity_resizer_;
  const ::object_detection::protos::ConditionalShapeResizer* conditional_shape_resizer_;
} _ImageResizer_default_instance_;
class IdentityResizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IdentityResizer> _instance;
} _IdentityResizer_default_instance_;
class KeepAspectRatioResizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeepAspectRatioResizer> _instance;
} _KeepAspectRatioResizer_default_instance_;
class FixedShapeResizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FixedShapeResizer> _instance;
} _FixedShapeResizer_default_instance_;
class ConditionalShapeResizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConditionalShapeResizer> _instance;
} _ConditionalShapeResizer_default_instance_;
}  // namespace protos
}  // namespace object_detection
static void InitDefaultsscc_info_ConditionalShapeResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_ConditionalShapeResizer_default_instance_;
    new (ptr) ::object_detection::protos::ConditionalShapeResizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::ConditionalShapeResizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionalShapeResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConditionalShapeResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto}, {}};

static void InitDefaultsscc_info_FixedShapeResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_FixedShapeResizer_default_instance_;
    new (ptr) ::object_detection::protos::FixedShapeResizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::FixedShapeResizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FixedShapeResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FixedShapeResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto}, {}};

static void InitDefaultsscc_info_IdentityResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_IdentityResizer_default_instance_;
    new (ptr) ::object_detection::protos::IdentityResizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::IdentityResizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IdentityResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IdentityResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto}, {}};

static void InitDefaultsscc_info_ImageResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_ImageResizer_default_instance_;
    new (ptr) ::object_detection::protos::ImageResizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::ImageResizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ImageResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_ImageResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto}, {
      &scc_info_KeepAspectRatioResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto.base,
      &scc_info_FixedShapeResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto.base,
      &scc_info_IdentityResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto.base,
      &scc_info_ConditionalShapeResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto.base,}};

static void InitDefaultsscc_info_KeepAspectRatioResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_KeepAspectRatioResizer_default_instance_;
    new (ptr) ::object_detection::protos::KeepAspectRatioResizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::KeepAspectRatioResizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeepAspectRatioResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_KeepAspectRatioResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ImageResizer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ImageResizer, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ImageResizer, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::object_detection::protos::ImageResizerDefaultTypeInternal, keep_aspect_ratio_resizer_),
  offsetof(::object_detection::protos::ImageResizerDefaultTypeInternal, fixed_shape_resizer_),
  offsetof(::object_detection::protos::ImageResizerDefaultTypeInternal, identity_resizer_),
  offsetof(::object_detection::protos::ImageResizerDefaultTypeInternal, conditional_shape_resizer_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ImageResizer, image_resizer_oneof_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::IdentityResizer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::IdentityResizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::KeepAspectRatioResizer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::KeepAspectRatioResizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::KeepAspectRatioResizer, min_dimension_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::KeepAspectRatioResizer, max_dimension_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::KeepAspectRatioResizer, resize_method_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::KeepAspectRatioResizer, pad_to_max_dimension_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::KeepAspectRatioResizer, convert_to_grayscale_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::KeepAspectRatioResizer, per_channel_pad_value_),
  3,
  4,
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FixedShapeResizer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FixedShapeResizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FixedShapeResizer, height_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FixedShapeResizer, width_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FixedShapeResizer, resize_method_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FixedShapeResizer, convert_to_grayscale_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConditionalShapeResizer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConditionalShapeResizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConditionalShapeResizer, condition_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConditionalShapeResizer, size_threshold_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConditionalShapeResizer, resize_method_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConditionalShapeResizer, convert_to_grayscale_),
  2,
  3,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::object_detection::protos::ImageResizer)},
  { 14, 19, sizeof(::object_detection::protos::IdentityResizer)},
  { 19, 30, sizeof(::object_detection::protos::KeepAspectRatioResizer)},
  { 36, 45, sizeof(::object_detection::protos::FixedShapeResizer)},
  { 49, 58, sizeof(::object_detection::protos::ConditionalShapeResizer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_ImageResizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_IdentityResizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_KeepAspectRatioResizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_FixedShapeResizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_ConditionalShapeResizer_default_instance_),
};

const char descriptor_table_protodef_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+object_detection/protos/image_resizer."
  "proto\022\027object_detection.protos\"\343\002\n\014Image"
  "Resizer\022T\n\031keep_aspect_ratio_resizer\030\001 \001"
  "(\0132/.object_detection.protos.KeepAspectR"
  "atioResizerH\000\022I\n\023fixed_shape_resizer\030\002 \001"
  "(\0132*.object_detection.protos.FixedShapeR"
  "esizerH\000\022D\n\020identity_resizer\030\003 \001(\0132(.obj"
  "ect_detection.protos.IdentityResizerH\000\022U"
  "\n\031conditional_shape_resizer\030\004 \001(\01320.obje"
  "ct_detection.protos.ConditionalShapeResi"
  "zerH\000B\025\n\023image_resizer_oneof\"\021\n\017Identity"
  "Resizer\"\200\002\n\026KeepAspectRatioResizer\022\032\n\rmi"
  "n_dimension\030\001 \001(\005:\003600\022\033\n\rmax_dimension\030"
  "\002 \001(\005:\0041024\022D\n\rresize_method\030\003 \001(\0162#.obj"
  "ect_detection.protos.ResizeType:\010BILINEA"
  "R\022#\n\024pad_to_max_dimension\030\004 \001(\010:\005false\022#"
  "\n\024convert_to_grayscale\030\005 \001(\010:\005false\022\035\n\025p"
  "er_channel_pad_value\030\006 \003(\002\"\247\001\n\021FixedShap"
  "eResizer\022\023\n\006height\030\001 \001(\005:\003300\022\022\n\005width\030\002"
  " \001(\005:\003300\022D\n\rresize_method\030\003 \001(\0162#.objec"
  "t_detection.protos.ResizeType:\010BILINEAR\022"
  "#\n\024convert_to_grayscale\030\004 \001(\010:\005false\"\271\002\n"
  "\027ConditionalShapeResizer\022\\\n\tcondition\030\001 "
  "\001(\0162@.object_detection.protos.Conditiona"
  "lShapeResizer.ResizeCondition:\007GREATER\022\033"
  "\n\016size_threshold\030\002 \001(\005:\003300\022D\n\rresize_me"
  "thod\030\003 \001(\0162#.object_detection.protos.Res"
  "izeType:\010BILINEAR\022#\n\024convert_to_grayscal"
  "e\030\004 \001(\010:\005false\"8\n\017ResizeCondition\022\013\n\007INV"
  "ALID\020\000\022\013\n\007GREATER\020\001\022\013\n\007SMALLER\020\002*G\n\nResi"
  "zeType\022\014\n\010BILINEAR\020\000\022\024\n\020NEAREST_NEIGHBOR"
  "\020\001\022\013\n\007BICUBIC\020\002\022\010\n\004AREA\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto_sccs[5] = {
  &scc_info_ConditionalShapeResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto.base,
  &scc_info_FixedShapeResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto.base,
  &scc_info_IdentityResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto.base,
  &scc_info_ImageResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto.base,
  &scc_info_KeepAspectRatioResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto_once;
static bool descriptor_table_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto = {
  &descriptor_table_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto_initialized, descriptor_table_protodef_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto, "object_detection/protos/image_resizer.proto", 1265,
  &descriptor_table_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto_once, descriptor_table_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto_sccs, descriptor_table_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::offsets,
  file_level_metadata_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto, 5, file_level_enum_descriptors_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto, file_level_service_descriptors_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto), true);
namespace object_detection {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConditionalShapeResizer_ResizeCondition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto);
  return file_level_enum_descriptors_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto[0];
}
bool ConditionalShapeResizer_ResizeCondition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConditionalShapeResizer_ResizeCondition ConditionalShapeResizer::INVALID;
constexpr ConditionalShapeResizer_ResizeCondition ConditionalShapeResizer::GREATER;
constexpr ConditionalShapeResizer_ResizeCondition ConditionalShapeResizer::SMALLER;
constexpr ConditionalShapeResizer_ResizeCondition ConditionalShapeResizer::ResizeCondition_MIN;
constexpr ConditionalShapeResizer_ResizeCondition ConditionalShapeResizer::ResizeCondition_MAX;
constexpr int ConditionalShapeResizer::ResizeCondition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResizeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto);
  return file_level_enum_descriptors_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto[1];
}
bool ResizeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ImageResizer::InitAsDefaultInstance() {
  ::object_detection::protos::_ImageResizer_default_instance_.keep_aspect_ratio_resizer_ = const_cast< ::object_detection::protos::KeepAspectRatioResizer*>(
      ::object_detection::protos::KeepAspectRatioResizer::internal_default_instance());
  ::object_detection::protos::_ImageResizer_default_instance_.fixed_shape_resizer_ = const_cast< ::object_detection::protos::FixedShapeResizer*>(
      ::object_detection::protos::FixedShapeResizer::internal_default_instance());
  ::object_detection::protos::_ImageResizer_default_instance_.identity_resizer_ = const_cast< ::object_detection::protos::IdentityResizer*>(
      ::object_detection::protos::IdentityResizer::internal_default_instance());
  ::object_detection::protos::_ImageResizer_default_instance_.conditional_shape_resizer_ = const_cast< ::object_detection::protos::ConditionalShapeResizer*>(
      ::object_detection::protos::ConditionalShapeResizer::internal_default_instance());
}
class ImageResizer::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageResizer>()._has_bits_);
  static const ::object_detection::protos::KeepAspectRatioResizer& keep_aspect_ratio_resizer(const ImageResizer* msg);
  static const ::object_detection::protos::FixedShapeResizer& fixed_shape_resizer(const ImageResizer* msg);
  static const ::object_detection::protos::IdentityResizer& identity_resizer(const ImageResizer* msg);
  static const ::object_detection::protos::ConditionalShapeResizer& conditional_shape_resizer(const ImageResizer* msg);
};

const ::object_detection::protos::KeepAspectRatioResizer&
ImageResizer::_Internal::keep_aspect_ratio_resizer(const ImageResizer* msg) {
  return *msg->image_resizer_oneof_.keep_aspect_ratio_resizer_;
}
const ::object_detection::protos::FixedShapeResizer&
ImageResizer::_Internal::fixed_shape_resizer(const ImageResizer* msg) {
  return *msg->image_resizer_oneof_.fixed_shape_resizer_;
}
const ::object_detection::protos::IdentityResizer&
ImageResizer::_Internal::identity_resizer(const ImageResizer* msg) {
  return *msg->image_resizer_oneof_.identity_resizer_;
}
const ::object_detection::protos::ConditionalShapeResizer&
ImageResizer::_Internal::conditional_shape_resizer(const ImageResizer* msg) {
  return *msg->image_resizer_oneof_.conditional_shape_resizer_;
}
void ImageResizer::set_allocated_keep_aspect_ratio_resizer(::object_detection::protos::KeepAspectRatioResizer* keep_aspect_ratio_resizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_image_resizer_oneof();
  if (keep_aspect_ratio_resizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      keep_aspect_ratio_resizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keep_aspect_ratio_resizer, submessage_arena);
    }
    set_has_keep_aspect_ratio_resizer();
    image_resizer_oneof_.keep_aspect_ratio_resizer_ = keep_aspect_ratio_resizer;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ImageResizer.keep_aspect_ratio_resizer)
}
void ImageResizer::set_allocated_fixed_shape_resizer(::object_detection::protos::FixedShapeResizer* fixed_shape_resizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_image_resizer_oneof();
  if (fixed_shape_resizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fixed_shape_resizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_shape_resizer, submessage_arena);
    }
    set_has_fixed_shape_resizer();
    image_resizer_oneof_.fixed_shape_resizer_ = fixed_shape_resizer;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ImageResizer.fixed_shape_resizer)
}
void ImageResizer::set_allocated_identity_resizer(::object_detection::protos::IdentityResizer* identity_resizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_image_resizer_oneof();
  if (identity_resizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      identity_resizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identity_resizer, submessage_arena);
    }
    set_has_identity_resizer();
    image_resizer_oneof_.identity_resizer_ = identity_resizer;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ImageResizer.identity_resizer)
}
void ImageResizer::set_allocated_conditional_shape_resizer(::object_detection::protos::ConditionalShapeResizer* conditional_shape_resizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_image_resizer_oneof();
  if (conditional_shape_resizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conditional_shape_resizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conditional_shape_resizer, submessage_arena);
    }
    set_has_conditional_shape_resizer();
    image_resizer_oneof_.conditional_shape_resizer_ = conditional_shape_resizer;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ImageResizer.conditional_shape_resizer)
}
ImageResizer::ImageResizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ImageResizer)
}
ImageResizer::ImageResizer(const ImageResizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_image_resizer_oneof();
  switch (from.image_resizer_oneof_case()) {
    case kKeepAspectRatioResizer: {
      mutable_keep_aspect_ratio_resizer()->::object_detection::protos::KeepAspectRatioResizer::MergeFrom(from.keep_aspect_ratio_resizer());
      break;
    }
    case kFixedShapeResizer: {
      mutable_fixed_shape_resizer()->::object_detection::protos::FixedShapeResizer::MergeFrom(from.fixed_shape_resizer());
      break;
    }
    case kIdentityResizer: {
      mutable_identity_resizer()->::object_detection::protos::IdentityResizer::MergeFrom(from.identity_resizer());
      break;
    }
    case kConditionalShapeResizer: {
      mutable_conditional_shape_resizer()->::object_detection::protos::ConditionalShapeResizer::MergeFrom(from.conditional_shape_resizer());
      break;
    }
    case IMAGE_RESIZER_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ImageResizer)
}

void ImageResizer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto.base);
  clear_has_image_resizer_oneof();
}

ImageResizer::~ImageResizer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ImageResizer)
  SharedDtor();
}

void ImageResizer::SharedDtor() {
  if (has_image_resizer_oneof()) {
    clear_image_resizer_oneof();
  }
}

void ImageResizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageResizer& ImageResizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto.base);
  return *internal_default_instance();
}


void ImageResizer::clear_image_resizer_oneof() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.ImageResizer)
  switch (image_resizer_oneof_case()) {
    case kKeepAspectRatioResizer: {
      delete image_resizer_oneof_.keep_aspect_ratio_resizer_;
      break;
    }
    case kFixedShapeResizer: {
      delete image_resizer_oneof_.fixed_shape_resizer_;
      break;
    }
    case kIdentityResizer: {
      delete image_resizer_oneof_.identity_resizer_;
      break;
    }
    case kConditionalShapeResizer: {
      delete image_resizer_oneof_.conditional_shape_resizer_;
      break;
    }
    case IMAGE_RESIZER_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IMAGE_RESIZER_ONEOF_NOT_SET;
}


void ImageResizer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ImageResizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_image_resizer_oneof();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ImageResizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.KeepAspectRatioResizer keep_aspect_ratio_resizer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_keep_aspect_ratio_resizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.FixedShapeResizer fixed_shape_resizer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_fixed_shape_resizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.IdentityResizer identity_resizer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_identity_resizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.ConditionalShapeResizer conditional_shape_resizer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_conditional_shape_resizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ImageResizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ImageResizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.KeepAspectRatioResizer keep_aspect_ratio_resizer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_keep_aspect_ratio_resizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.FixedShapeResizer fixed_shape_resizer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fixed_shape_resizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.IdentityResizer identity_resizer = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_identity_resizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ConditionalShapeResizer conditional_shape_resizer = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_conditional_shape_resizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ImageResizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ImageResizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ImageResizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ImageResizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (image_resizer_oneof_case()) {
    case kKeepAspectRatioResizer:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::keep_aspect_ratio_resizer(this), output);
      break;
    case kFixedShapeResizer:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::fixed_shape_resizer(this), output);
      break;
    case kIdentityResizer:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, _Internal::identity_resizer(this), output);
      break;
    case kConditionalShapeResizer:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, _Internal::conditional_shape_resizer(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ImageResizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageResizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ImageResizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (image_resizer_oneof_case()) {
    case kKeepAspectRatioResizer:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, _Internal::keep_aspect_ratio_resizer(this), target);
      break;
    case kFixedShapeResizer:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::fixed_shape_resizer(this), target);
      break;
    case kIdentityResizer:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, _Internal::identity_resizer(this), target);
      break;
    case kConditionalShapeResizer:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, _Internal::conditional_shape_resizer(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ImageResizer)
  return target;
}

size_t ImageResizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ImageResizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (image_resizer_oneof_case()) {
    // optional .object_detection.protos.KeepAspectRatioResizer keep_aspect_ratio_resizer = 1;
    case kKeepAspectRatioResizer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_resizer_oneof_.keep_aspect_ratio_resizer_);
      break;
    }
    // optional .object_detection.protos.FixedShapeResizer fixed_shape_resizer = 2;
    case kFixedShapeResizer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_resizer_oneof_.fixed_shape_resizer_);
      break;
    }
    // optional .object_detection.protos.IdentityResizer identity_resizer = 3;
    case kIdentityResizer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_resizer_oneof_.identity_resizer_);
      break;
    }
    // optional .object_detection.protos.ConditionalShapeResizer conditional_shape_resizer = 4;
    case kConditionalShapeResizer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_resizer_oneof_.conditional_shape_resizer_);
      break;
    }
    case IMAGE_RESIZER_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageResizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ImageResizer)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageResizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageResizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ImageResizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ImageResizer)
    MergeFrom(*source);
  }
}

void ImageResizer::MergeFrom(const ImageResizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ImageResizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.image_resizer_oneof_case()) {
    case kKeepAspectRatioResizer: {
      mutable_keep_aspect_ratio_resizer()->::object_detection::protos::KeepAspectRatioResizer::MergeFrom(from.keep_aspect_ratio_resizer());
      break;
    }
    case kFixedShapeResizer: {
      mutable_fixed_shape_resizer()->::object_detection::protos::FixedShapeResizer::MergeFrom(from.fixed_shape_resizer());
      break;
    }
    case kIdentityResizer: {
      mutable_identity_resizer()->::object_detection::protos::IdentityResizer::MergeFrom(from.identity_resizer());
      break;
    }
    case kConditionalShapeResizer: {
      mutable_conditional_shape_resizer()->::object_detection::protos::ConditionalShapeResizer::MergeFrom(from.conditional_shape_resizer());
      break;
    }
    case IMAGE_RESIZER_ONEOF_NOT_SET: {
      break;
    }
  }
}

void ImageResizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ImageResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageResizer::CopyFrom(const ImageResizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ImageResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageResizer::IsInitialized() const {
  return true;
}

void ImageResizer::InternalSwap(ImageResizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(image_resizer_oneof_, other->image_resizer_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageResizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IdentityResizer::InitAsDefaultInstance() {
}
class IdentityResizer::_Internal {
 public:
  using HasBits = decltype(std::declval<IdentityResizer>()._has_bits_);
};

IdentityResizer::IdentityResizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.IdentityResizer)
}
IdentityResizer::IdentityResizer(const IdentityResizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.IdentityResizer)
}

void IdentityResizer::SharedCtor() {
}

IdentityResizer::~IdentityResizer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.IdentityResizer)
  SharedDtor();
}

void IdentityResizer::SharedDtor() {
}

void IdentityResizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IdentityResizer& IdentityResizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IdentityResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto.base);
  return *internal_default_instance();
}


void IdentityResizer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.IdentityResizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IdentityResizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IdentityResizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.IdentityResizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.IdentityResizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.IdentityResizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IdentityResizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.IdentityResizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.IdentityResizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* IdentityResizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.IdentityResizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.IdentityResizer)
  return target;
}

size_t IdentityResizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.IdentityResizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IdentityResizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.IdentityResizer)
  GOOGLE_DCHECK_NE(&from, this);
  const IdentityResizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IdentityResizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.IdentityResizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.IdentityResizer)
    MergeFrom(*source);
  }
}

void IdentityResizer::MergeFrom(const IdentityResizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.IdentityResizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IdentityResizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.IdentityResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdentityResizer::CopyFrom(const IdentityResizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.IdentityResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentityResizer::IsInitialized() const {
  return true;
}

void IdentityResizer::InternalSwap(IdentityResizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdentityResizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeepAspectRatioResizer::InitAsDefaultInstance() {
}
class KeepAspectRatioResizer::_Internal {
 public:
  using HasBits = decltype(std::declval<KeepAspectRatioResizer>()._has_bits_);
  static void set_has_min_dimension(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_dimension(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_resize_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pad_to_max_dimension(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_convert_to_grayscale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

KeepAspectRatioResizer::KeepAspectRatioResizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.KeepAspectRatioResizer)
}
KeepAspectRatioResizer::KeepAspectRatioResizer(const KeepAspectRatioResizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      per_channel_pad_value_(from.per_channel_pad_value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&resize_method_, &from.resize_method_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_dimension_) -
    reinterpret_cast<char*>(&resize_method_)) + sizeof(max_dimension_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.KeepAspectRatioResizer)
}

void KeepAspectRatioResizer::SharedCtor() {
  ::memset(&resize_method_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&convert_to_grayscale_) -
      reinterpret_cast<char*>(&resize_method_)) + sizeof(convert_to_grayscale_));
  min_dimension_ = 600;
  max_dimension_ = 1024;
}

KeepAspectRatioResizer::~KeepAspectRatioResizer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.KeepAspectRatioResizer)
  SharedDtor();
}

void KeepAspectRatioResizer::SharedDtor() {
}

void KeepAspectRatioResizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeepAspectRatioResizer& KeepAspectRatioResizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeepAspectRatioResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto.base);
  return *internal_default_instance();
}


void KeepAspectRatioResizer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.KeepAspectRatioResizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  per_channel_pad_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&resize_method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&convert_to_grayscale_) -
        reinterpret_cast<char*>(&resize_method_)) + sizeof(convert_to_grayscale_));
    min_dimension_ = 600;
    max_dimension_ = 1024;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KeepAspectRatioResizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 min_dimension = 1 [default = 600];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_min_dimension(&has_bits);
          min_dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_dimension = 2 [default = 1024];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_dimension(&has_bits);
          max_dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::object_detection::protos::ResizeType_IsValid(val))) {
            set_resize_method(static_cast<::object_detection::protos::ResizeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool pad_to_max_dimension = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pad_to_max_dimension(&has_bits);
          pad_to_max_dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool convert_to_grayscale = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_convert_to_grayscale(&has_bits);
          convert_to_grayscale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float per_channel_pad_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_per_channel_pad_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 53);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_per_channel_pad_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KeepAspectRatioResizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.KeepAspectRatioResizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 min_dimension = 1 [default = 600];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_min_dimension(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_dimension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_dimension = 2 [default = 1024];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_max_dimension(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_dimension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::ResizeType_IsValid(value)) {
            set_resize_method(static_cast< ::object_detection::protos::ResizeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pad_to_max_dimension = 4 [default = false];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_pad_to_max_dimension(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pad_to_max_dimension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool convert_to_grayscale = 5 [default = false];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_convert_to_grayscale(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &convert_to_grayscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float per_channel_pad_value = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53u, input, this->mutable_per_channel_pad_value())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_per_channel_pad_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.KeepAspectRatioResizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.KeepAspectRatioResizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KeepAspectRatioResizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.KeepAspectRatioResizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 min_dimension = 1 [default = 600];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->min_dimension(), output);
  }

  // optional int32 max_dimension = 2 [default = 1024];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->max_dimension(), output);
  }

  // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->resize_method(), output);
  }

  // optional bool pad_to_max_dimension = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->pad_to_max_dimension(), output);
  }

  // optional bool convert_to_grayscale = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->convert_to_grayscale(), output);
  }

  // repeated float per_channel_pad_value = 6;
  for (int i = 0, n = this->per_channel_pad_value_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      6, this->per_channel_pad_value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.KeepAspectRatioResizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* KeepAspectRatioResizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.KeepAspectRatioResizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 min_dimension = 1 [default = 600];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->min_dimension(), target);
  }

  // optional int32 max_dimension = 2 [default = 1024];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->max_dimension(), target);
  }

  // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->resize_method(), target);
  }

  // optional bool pad_to_max_dimension = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->pad_to_max_dimension(), target);
  }

  // optional bool convert_to_grayscale = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->convert_to_grayscale(), target);
  }

  // repeated float per_channel_pad_value = 6;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(6, this->per_channel_pad_value_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.KeepAspectRatioResizer)
  return target;
}

size_t KeepAspectRatioResizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.KeepAspectRatioResizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float per_channel_pad_value = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->per_channel_pad_value_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->per_channel_pad_value_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->resize_method());
    }

    // optional bool pad_to_max_dimension = 4 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool convert_to_grayscale = 5 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 min_dimension = 1 [default = 600];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->min_dimension());
    }

    // optional int32 max_dimension = 2 [default = 1024];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_dimension());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeepAspectRatioResizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.KeepAspectRatioResizer)
  GOOGLE_DCHECK_NE(&from, this);
  const KeepAspectRatioResizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeepAspectRatioResizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.KeepAspectRatioResizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.KeepAspectRatioResizer)
    MergeFrom(*source);
  }
}

void KeepAspectRatioResizer::MergeFrom(const KeepAspectRatioResizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.KeepAspectRatioResizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  per_channel_pad_value_.MergeFrom(from.per_channel_pad_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      resize_method_ = from.resize_method_;
    }
    if (cached_has_bits & 0x00000002u) {
      pad_to_max_dimension_ = from.pad_to_max_dimension_;
    }
    if (cached_has_bits & 0x00000004u) {
      convert_to_grayscale_ = from.convert_to_grayscale_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_dimension_ = from.min_dimension_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_dimension_ = from.max_dimension_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeepAspectRatioResizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.KeepAspectRatioResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepAspectRatioResizer::CopyFrom(const KeepAspectRatioResizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.KeepAspectRatioResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAspectRatioResizer::IsInitialized() const {
  return true;
}

void KeepAspectRatioResizer::InternalSwap(KeepAspectRatioResizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  per_channel_pad_value_.InternalSwap(&other->per_channel_pad_value_);
  swap(resize_method_, other->resize_method_);
  swap(pad_to_max_dimension_, other->pad_to_max_dimension_);
  swap(convert_to_grayscale_, other->convert_to_grayscale_);
  swap(min_dimension_, other->min_dimension_);
  swap(max_dimension_, other->max_dimension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeepAspectRatioResizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FixedShapeResizer::InitAsDefaultInstance() {
}
class FixedShapeResizer::_Internal {
 public:
  using HasBits = decltype(std::declval<FixedShapeResizer>()._has_bits_);
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_resize_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_convert_to_grayscale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FixedShapeResizer::FixedShapeResizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.FixedShapeResizer)
}
FixedShapeResizer::FixedShapeResizer(const FixedShapeResizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&resize_method_, &from.resize_method_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&resize_method_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.FixedShapeResizer)
}

void FixedShapeResizer::SharedCtor() {
  ::memset(&resize_method_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&convert_to_grayscale_) -
      reinterpret_cast<char*>(&resize_method_)) + sizeof(convert_to_grayscale_));
  height_ = 300;
  width_ = 300;
}

FixedShapeResizer::~FixedShapeResizer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.FixedShapeResizer)
  SharedDtor();
}

void FixedShapeResizer::SharedDtor() {
}

void FixedShapeResizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixedShapeResizer& FixedShapeResizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FixedShapeResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto.base);
  return *internal_default_instance();
}


void FixedShapeResizer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.FixedShapeResizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&resize_method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&convert_to_grayscale_) -
        reinterpret_cast<char*>(&resize_method_)) + sizeof(convert_to_grayscale_));
    height_ = 300;
    width_ = 300;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FixedShapeResizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 height = 1 [default = 300];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 width = 2 [default = 300];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::object_detection::protos::ResizeType_IsValid(val))) {
            set_resize_method(static_cast<::object_detection::protos::ResizeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool convert_to_grayscale = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_convert_to_grayscale(&has_bits);
          convert_to_grayscale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FixedShapeResizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.FixedShapeResizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 height = 1 [default = 300];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 2 [default = 300];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::ResizeType_IsValid(value)) {
            set_resize_method(static_cast< ::object_detection::protos::ResizeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool convert_to_grayscale = 4 [default = false];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_convert_to_grayscale(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &convert_to_grayscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.FixedShapeResizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.FixedShapeResizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FixedShapeResizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.FixedShapeResizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 height = 1 [default = 300];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // optional int32 width = 2 [default = 300];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->resize_method(), output);
  }

  // optional bool convert_to_grayscale = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->convert_to_grayscale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.FixedShapeResizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* FixedShapeResizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.FixedShapeResizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 height = 1 [default = 300];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->height(), target);
  }

  // optional int32 width = 2 [default = 300];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->resize_method(), target);
  }

  // optional bool convert_to_grayscale = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->convert_to_grayscale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.FixedShapeResizer)
  return target;
}

size_t FixedShapeResizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.FixedShapeResizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->resize_method());
    }

    // optional bool convert_to_grayscale = 4 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 height = 1 [default = 300];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 2 [default = 300];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedShapeResizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.FixedShapeResizer)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedShapeResizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FixedShapeResizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.FixedShapeResizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.FixedShapeResizer)
    MergeFrom(*source);
  }
}

void FixedShapeResizer::MergeFrom(const FixedShapeResizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.FixedShapeResizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      resize_method_ = from.resize_method_;
    }
    if (cached_has_bits & 0x00000002u) {
      convert_to_grayscale_ = from.convert_to_grayscale_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FixedShapeResizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.FixedShapeResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedShapeResizer::CopyFrom(const FixedShapeResizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.FixedShapeResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedShapeResizer::IsInitialized() const {
  return true;
}

void FixedShapeResizer::InternalSwap(FixedShapeResizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(resize_method_, other->resize_method_);
  swap(convert_to_grayscale_, other->convert_to_grayscale_);
  swap(height_, other->height_);
  swap(width_, other->width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FixedShapeResizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConditionalShapeResizer::InitAsDefaultInstance() {
}
class ConditionalShapeResizer::_Internal {
 public:
  using HasBits = decltype(std::declval<ConditionalShapeResizer>()._has_bits_);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_resize_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_convert_to_grayscale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ConditionalShapeResizer::ConditionalShapeResizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ConditionalShapeResizer)
}
ConditionalShapeResizer::ConditionalShapeResizer(const ConditionalShapeResizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&resize_method_, &from.resize_method_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_threshold_) -
    reinterpret_cast<char*>(&resize_method_)) + sizeof(size_threshold_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ConditionalShapeResizer)
}

void ConditionalShapeResizer::SharedCtor() {
  ::memset(&resize_method_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&convert_to_grayscale_) -
      reinterpret_cast<char*>(&resize_method_)) + sizeof(convert_to_grayscale_));
  condition_ = 1;
  size_threshold_ = 300;
}

ConditionalShapeResizer::~ConditionalShapeResizer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ConditionalShapeResizer)
  SharedDtor();
}

void ConditionalShapeResizer::SharedDtor() {
}

void ConditionalShapeResizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionalShapeResizer& ConditionalShapeResizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConditionalShapeResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto.base);
  return *internal_default_instance();
}


void ConditionalShapeResizer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ConditionalShapeResizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&resize_method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&convert_to_grayscale_) -
        reinterpret_cast<char*>(&resize_method_)) + sizeof(convert_to_grayscale_));
    condition_ = 1;
    size_threshold_ = 300;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionalShapeResizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.ConditionalShapeResizer.ResizeCondition condition = 1 [default = GREATER];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::object_detection::protos::ConditionalShapeResizer_ResizeCondition_IsValid(val))) {
            set_condition(static_cast<::object_detection::protos::ConditionalShapeResizer_ResizeCondition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 size_threshold = 2 [default = 300];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size_threshold(&has_bits);
          size_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::object_detection::protos::ResizeType_IsValid(val))) {
            set_resize_method(static_cast<::object_detection::protos::ResizeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool convert_to_grayscale = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_convert_to_grayscale(&has_bits);
          convert_to_grayscale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionalShapeResizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ConditionalShapeResizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.ConditionalShapeResizer.ResizeCondition condition = 1 [default = GREATER];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::ConditionalShapeResizer_ResizeCondition_IsValid(value)) {
            set_condition(static_cast< ::object_detection::protos::ConditionalShapeResizer_ResizeCondition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 size_threshold = 2 [default = 300];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_size_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::ResizeType_IsValid(value)) {
            set_resize_method(static_cast< ::object_detection::protos::ResizeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool convert_to_grayscale = 4 [default = false];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_convert_to_grayscale(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &convert_to_grayscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ConditionalShapeResizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ConditionalShapeResizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionalShapeResizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ConditionalShapeResizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.ConditionalShapeResizer.ResizeCondition condition = 1 [default = GREATER];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->condition(), output);
  }

  // optional int32 size_threshold = 2 [default = 300];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->size_threshold(), output);
  }

  // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->resize_method(), output);
  }

  // optional bool convert_to_grayscale = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->convert_to_grayscale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ConditionalShapeResizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConditionalShapeResizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ConditionalShapeResizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.ConditionalShapeResizer.ResizeCondition condition = 1 [default = GREATER];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->condition(), target);
  }

  // optional int32 size_threshold = 2 [default = 300];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->size_threshold(), target);
  }

  // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->resize_method(), target);
  }

  // optional bool convert_to_grayscale = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->convert_to_grayscale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ConditionalShapeResizer)
  return target;
}

size_t ConditionalShapeResizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ConditionalShapeResizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->resize_method());
    }

    // optional bool convert_to_grayscale = 4 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .object_detection.protos.ConditionalShapeResizer.ResizeCondition condition = 1 [default = GREATER];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->condition());
    }

    // optional int32 size_threshold = 2 [default = 300];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->size_threshold());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionalShapeResizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ConditionalShapeResizer)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionalShapeResizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConditionalShapeResizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ConditionalShapeResizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ConditionalShapeResizer)
    MergeFrom(*source);
  }
}

void ConditionalShapeResizer::MergeFrom(const ConditionalShapeResizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ConditionalShapeResizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      resize_method_ = from.resize_method_;
    }
    if (cached_has_bits & 0x00000002u) {
      convert_to_grayscale_ = from.convert_to_grayscale_;
    }
    if (cached_has_bits & 0x00000004u) {
      condition_ = from.condition_;
    }
    if (cached_has_bits & 0x00000008u) {
      size_threshold_ = from.size_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConditionalShapeResizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ConditionalShapeResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionalShapeResizer::CopyFrom(const ConditionalShapeResizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ConditionalShapeResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalShapeResizer::IsInitialized() const {
  return true;
}

void ConditionalShapeResizer::InternalSwap(ConditionalShapeResizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(resize_method_, other->resize_method_);
  swap(convert_to_grayscale_, other->convert_to_grayscale_);
  swap(condition_, other->condition_);
  swap(size_threshold_, other->size_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionalShapeResizer::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::object_detection::protos::ImageResizer* Arena::CreateMaybeMessage< ::object_detection::protos::ImageResizer >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::ImageResizer >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::IdentityResizer* Arena::CreateMaybeMessage< ::object_detection::protos::IdentityResizer >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::IdentityResizer >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::KeepAspectRatioResizer* Arena::CreateMaybeMessage< ::object_detection::protos::KeepAspectRatioResizer >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::KeepAspectRatioResizer >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::FixedShapeResizer* Arena::CreateMaybeMessage< ::object_detection::protos::FixedShapeResizer >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::FixedShapeResizer >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::ConditionalShapeResizer* Arena::CreateMaybeMessage< ::object_detection::protos::ConditionalShapeResizer >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::ConditionalShapeResizer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
