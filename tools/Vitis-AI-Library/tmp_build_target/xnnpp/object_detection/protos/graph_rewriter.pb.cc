// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/graph_rewriter.proto

#include "object_detection/protos/graph_rewriter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quantization_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto;
namespace object_detection {
namespace protos {
class GraphRewriterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphRewriter> _instance;
} _GraphRewriter_default_instance_;
class QuantizationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Quantization> _instance;
} _Quantization_default_instance_;
}  // namespace protos
}  // namespace object_detection
static void InitDefaultsscc_info_GraphRewriter_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_GraphRewriter_default_instance_;
    new (ptr) ::object_detection::protos::GraphRewriter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::GraphRewriter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphRewriter_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GraphRewriter_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto}, {
      &scc_info_Quantization_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto.base,}};

static void InitDefaultsscc_info_Quantization_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_Quantization_default_instance_;
    new (ptr) ::object_detection::protos::Quantization();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::Quantization::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quantization_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Quantization_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::GraphRewriter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::GraphRewriter, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::GraphRewriter, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::GraphRewriter, quantization_),
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Quantization, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Quantization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Quantization, delay_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Quantization, weight_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Quantization, activation_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Quantization, symmetric_),
  2,
  3,
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::object_detection::protos::GraphRewriter)},
  { 7, 16, sizeof(::object_detection::protos::Quantization)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_GraphRewriter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_Quantization_default_instance_),
};

const char descriptor_table_protodef_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,object_detection/protos/graph_rewriter"
  ".proto\022\027object_detection.protos\"W\n\rGraph"
  "Rewriter\022;\n\014quantization\030\001 \001(\0132%.object_"
  "detection.protos.Quantization*\t\010\350\007\020\200\200\200\200\002"
  "\"s\n\014Quantization\022\025\n\005delay\030\001 \001(\005:\006500000\022"
  "\026\n\013weight_bits\030\002 \001(\005:\0018\022\032\n\017activation_bi"
  "ts\030\003 \001(\005:\0018\022\030\n\tsymmetric\030\004 \001(\010:\005false"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto_sccs[2] = {
  &scc_info_GraphRewriter_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto.base,
  &scc_info_Quantization_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto_once;
static bool descriptor_table_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto = {
  &descriptor_table_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto_initialized, descriptor_table_protodef_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto, "object_detection/protos/graph_rewriter.proto", 277,
  &descriptor_table_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto_once, descriptor_table_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto_sccs, descriptor_table_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto::offsets,
  file_level_metadata_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto, 2, file_level_enum_descriptors_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto, file_level_service_descriptors_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto), true);
namespace object_detection {
namespace protos {

// ===================================================================

void GraphRewriter::InitAsDefaultInstance() {
  ::object_detection::protos::_GraphRewriter_default_instance_._instance.get_mutable()->quantization_ = const_cast< ::object_detection::protos::Quantization*>(
      ::object_detection::protos::Quantization::internal_default_instance());
}
class GraphRewriter::_Internal {
 public:
  using HasBits = decltype(std::declval<GraphRewriter>()._has_bits_);
  static const ::object_detection::protos::Quantization& quantization(const GraphRewriter* msg);
  static void set_has_quantization(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::object_detection::protos::Quantization&
GraphRewriter::_Internal::quantization(const GraphRewriter* msg) {
  return *msg->quantization_;
}
GraphRewriter::GraphRewriter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.GraphRewriter)
}
GraphRewriter::GraphRewriter(const GraphRewriter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from.has_quantization()) {
    quantization_ = new ::object_detection::protos::Quantization(*from.quantization_);
  } else {
    quantization_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.GraphRewriter)
}

void GraphRewriter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphRewriter_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto.base);
  quantization_ = nullptr;
}

GraphRewriter::~GraphRewriter() {
  // @@protoc_insertion_point(destructor:object_detection.protos.GraphRewriter)
  SharedDtor();
}

void GraphRewriter::SharedDtor() {
  if (this != internal_default_instance()) delete quantization_;
}

void GraphRewriter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphRewriter& GraphRewriter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphRewriter_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto.base);
  return *internal_default_instance();
}


void GraphRewriter::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.GraphRewriter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(quantization_ != nullptr);
    quantization_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GraphRewriter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.Quantization quantization = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_quantization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8000u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GraphRewriter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.GraphRewriter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.Quantization quantization = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_quantization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.GraphRewriter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.GraphRewriter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GraphRewriter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.GraphRewriter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Quantization quantization = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::quantization(this), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(1000, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.GraphRewriter)
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphRewriter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.GraphRewriter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Quantization quantization = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::quantization(this), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.GraphRewriter)
  return target;
}

size_t GraphRewriter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.GraphRewriter)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .object_detection.protos.Quantization quantization = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quantization_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphRewriter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.GraphRewriter)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphRewriter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphRewriter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.GraphRewriter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.GraphRewriter)
    MergeFrom(*source);
  }
}

void GraphRewriter::MergeFrom(const GraphRewriter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.GraphRewriter)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_quantization()) {
    mutable_quantization()->::object_detection::protos::Quantization::MergeFrom(from.quantization());
  }
}

void GraphRewriter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.GraphRewriter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphRewriter::CopyFrom(const GraphRewriter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.GraphRewriter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphRewriter::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void GraphRewriter::InternalSwap(GraphRewriter* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(quantization_, other->quantization_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphRewriter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Quantization::InitAsDefaultInstance() {
}
class Quantization::_Internal {
 public:
  using HasBits = decltype(std::declval<Quantization>()._has_bits_);
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_weight_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_activation_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_symmetric(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Quantization::Quantization()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.Quantization)
}
Quantization::Quantization(const Quantization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symmetric_, &from.symmetric_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_bits_) -
    reinterpret_cast<char*>(&symmetric_)) + sizeof(weight_bits_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.Quantization)
}

void Quantization::SharedCtor() {
  symmetric_ = false;
  activation_bits_ = 8;
  delay_ = 500000;
  weight_bits_ = 8;
}

Quantization::~Quantization() {
  // @@protoc_insertion_point(destructor:object_detection.protos.Quantization)
  SharedDtor();
}

void Quantization::SharedDtor() {
}

void Quantization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Quantization& Quantization::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Quantization_object_5fdetection_2fprotos_2fgraph_5frewriter_2eproto.base);
  return *internal_default_instance();
}


void Quantization::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.Quantization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    symmetric_ = false;
    activation_bits_ = 8;
    delay_ = 500000;
    weight_bits_ = 8;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Quantization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 delay = 1 [default = 500000];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_delay(&has_bits);
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 weight_bits = 2 [default = 8];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_weight_bits(&has_bits);
          weight_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 activation_bits = 3 [default = 8];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_activation_bits(&has_bits);
          activation_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool symmetric = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_symmetric(&has_bits);
          symmetric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Quantization::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.Quantization)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 delay = 1 [default = 500000];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_delay(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 weight_bits = 2 [default = 8];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_weight_bits(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 activation_bits = 3 [default = 8];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_activation_bits(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &activation_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool symmetric = 4 [default = false];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_symmetric(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &symmetric_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.Quantization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.Quantization)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Quantization::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.Quantization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 delay = 1 [default = 500000];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->delay(), output);
  }

  // optional int32 weight_bits = 2 [default = 8];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->weight_bits(), output);
  }

  // optional int32 activation_bits = 3 [default = 8];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->activation_bits(), output);
  }

  // optional bool symmetric = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->symmetric(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.Quantization)
}

::PROTOBUF_NAMESPACE_ID::uint8* Quantization::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.Quantization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 delay = 1 [default = 500000];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->delay(), target);
  }

  // optional int32 weight_bits = 2 [default = 8];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->weight_bits(), target);
  }

  // optional int32 activation_bits = 3 [default = 8];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->activation_bits(), target);
  }

  // optional bool symmetric = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->symmetric(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.Quantization)
  return target;
}

size_t Quantization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.Quantization)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool symmetric = 4 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 activation_bits = 3 [default = 8];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->activation_bits());
    }

    // optional int32 delay = 1 [default = 500000];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->delay());
    }

    // optional int32 weight_bits = 2 [default = 8];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->weight_bits());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quantization::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.Quantization)
  GOOGLE_DCHECK_NE(&from, this);
  const Quantization* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quantization>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.Quantization)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.Quantization)
    MergeFrom(*source);
  }
}

void Quantization::MergeFrom(const Quantization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.Quantization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      symmetric_ = from.symmetric_;
    }
    if (cached_has_bits & 0x00000002u) {
      activation_bits_ = from.activation_bits_;
    }
    if (cached_has_bits & 0x00000004u) {
      delay_ = from.delay_;
    }
    if (cached_has_bits & 0x00000008u) {
      weight_bits_ = from.weight_bits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Quantization::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.Quantization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quantization::CopyFrom(const Quantization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.Quantization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quantization::IsInitialized() const {
  return true;
}

void Quantization::InternalSwap(Quantization* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(symmetric_, other->symmetric_);
  swap(activation_bits_, other->activation_bits_);
  swap(delay_, other->delay_);
  swap(weight_bits_, other->weight_bits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Quantization::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::object_detection::protos::GraphRewriter* Arena::CreateMaybeMessage< ::object_detection::protos::GraphRewriter >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::GraphRewriter >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::Quantization* Arena::CreateMaybeMessage< ::object_detection::protos::Quantization >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::Quantization >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
